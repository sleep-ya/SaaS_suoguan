2020-12-22 21:13:40,458 - [test_login.py-->line:53] - INFO: 用例--【登录成功】---执行通过
2020-12-22 21:13:40,515 - [test_login.py-->line:53] - INFO: 用例--【手机号为空】---执行通过
2020-12-22 21:13:40,566 - [test_login.py-->line:53] - INFO: 用例--【密码为空】---执行通过
2020-12-22 21:13:40,816 - [test_login.py-->line:53] - INFO: 用例--【手机号未注册】---执行通过
2020-12-22 21:13:41,092 - [test_login.py-->line:53] - INFO: 用例--【密码错误】---执行通过
2020-12-22 21:13:41,140 - [test_login.py-->line:53] - INFO: 用例--【手机号格式错误】---执行通过
2020-12-22 21:13:41,467 - [test_recharge.py-->line:68] - ERROR: 用例--【充值成功】---执行失败
2020-12-22 21:13:41,478 - [test_recharge.py-->line:69] - ERROR: 'ok' != 'OK'
- ok
+ OK
Traceback (most recent call last):
  File "C:\project\python_35\py35_21day_project\testcases\test_recharge.py", line 66, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: 'ok' != 'OK'
- ok
+ OK

2020-12-22 21:13:41,546 - [test_recharge.py-->line:68] - ERROR: 用例--【id错误】---执行失败
2020-12-22 21:13:41,547 - [test_recharge.py-->line:69] - ERROR: 0 != 1007
Traceback (most recent call last):
  File "C:\project\python_35\py35_21day_project\testcases\test_recharge.py", line 65, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 0 != 1007
2020-12-22 21:13:41,589 - [test_recharge.py-->line:68] - ERROR: 用例--【不输入id】---执行失败
2020-12-22 21:13:41,589 - [test_recharge.py-->line:69] - ERROR: 0 != 1
Traceback (most recent call last):
  File "C:\project\python_35\py35_21day_project\testcases\test_recharge.py", line 65, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 0 != 1
2020-12-22 21:13:41,630 - [test_recharge.py-->line:68] - ERROR: 用例--【不输入金额】---执行失败
2020-12-22 21:13:41,630 - [test_recharge.py-->line:69] - ERROR: 0 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_21day_project\testcases\test_recharge.py", line 65, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 0 != 2
2020-12-22 21:13:41,690 - [test_recharge.py-->line:68] - ERROR: 用例--【充值金额为负数】---执行失败
2020-12-22 21:13:41,691 - [test_recharge.py-->line:69] - ERROR: 0 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_21day_project\testcases\test_recharge.py", line 65, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 0 != 2
2020-12-22 21:13:41,733 - [test_recharge.py-->line:68] - ERROR: 用例--【充值金额为500001】---执行失败
2020-12-22 21:13:41,734 - [test_recharge.py-->line:69] - ERROR: 0 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_21day_project\testcases\test_recharge.py", line 65, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 0 != 2
2020-12-22 21:13:41,792 - [test_recharge.py-->line:68] - ERROR: 用例--【充值金额非数字】---执行失败
2020-12-22 21:13:41,792 - [test_recharge.py-->line:69] - ERROR: '数字格式化异常' != '余额必须为数值型'
- 数字格式化异常
+ 余额必须为数值型
Traceback (most recent call last):
  File "C:\project\python_35\py35_21day_project\testcases\test_recharge.py", line 66, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '数字格式化异常' != '余额必须为数值型'
- 数字格式化异常
+ 余额必须为数值型

2020-12-22 21:13:41,844 - [test_recharge.py-->line:68] - ERROR: 用例--【充值金额小数点3位】---执行失败
2020-12-22 21:13:41,844 - [test_recharge.py-->line:69] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_21day_project\testcases\test_recharge.py", line 66, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2020-12-22 21:13:42,116 - [test_register.py-->line:47] - ERROR: 用例--【注册成功-带注册名】---执行失败
2020-12-22 21:13:42,116 - [test_register.py-->line:48] - ERROR: 0 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_21day_project\testcases\test_register.py", line 43, in test_register
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 0 != 2
2020-12-22 21:13:42,372 - [test_register.py-->line:47] - ERROR: 用例--【成功-不带用户名】---执行失败
2020-12-22 21:13:42,372 - [test_register.py-->line:48] - ERROR: 0 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_21day_project\testcases\test_register.py", line 43, in test_register
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 0 != 2
2020-12-22 21:13:42,413 - [test_register.py-->line:52] - INFO: 用例--【不输入手机号】---执行通过
2020-12-22 21:13:42,468 - [test_register.py-->line:52] - INFO: 用例--【手机号长度10位】---执行通过
2020-12-22 21:13:42,525 - [test_register.py-->line:52] - INFO: 用例--【手机号长度12位】---执行通过
2020-12-22 21:13:42,572 - [test_register.py-->line:52] - INFO: 用例--【手机号含有非法字符】---执行通过
2020-12-22 21:13:42,851 - [test_register.py-->line:52] - INFO: 用例--【已注册过的手机号】---执行通过
2020-12-22 21:13:42,908 - [test_register.py-->line:52] - INFO: 用例--【密码7位】---执行通过
2020-12-22 21:13:42,962 - [test_register.py-->line:52] - INFO: 用例--【密码17位】---执行通过
2020-12-22 21:13:43,010 - [test_register.py-->line:52] - INFO: 用例--【不输入密码】---执行通过
2020-12-22 21:13:43,053 - [test_register.py-->line:52] - INFO: 用例--【注册名11位】---执行通过
2020-12-22 21:13:43,105 - [test_register.py-->line:52] - INFO: 用例--【类型输入非0，1内容】---执行通过
2020-12-22 21:13:43,356 - [test_register.py-->line:47] - ERROR: 用例--【不输入类型】---执行失败
2020-12-22 21:13:43,356 - [test_register.py-->line:48] - ERROR: 0 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_21day_project\testcases\test_register.py", line 43, in test_register
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 0 != 2
2020-12-22 21:16:17,378 - [test_login.py-->line:53] - INFO: 用例--【登录成功】---执行通过
2020-12-22 21:16:17,429 - [test_login.py-->line:53] - INFO: 用例--【手机号为空】---执行通过
2020-12-22 21:16:17,471 - [test_login.py-->line:53] - INFO: 用例--【密码为空】---执行通过
2020-12-22 21:16:17,743 - [test_login.py-->line:53] - INFO: 用例--【手机号未注册】---执行通过
2020-12-22 21:16:17,998 - [test_login.py-->line:53] - INFO: 用例--【密码错误】---执行通过
2020-12-22 21:16:18,050 - [test_login.py-->line:53] - INFO: 用例--【手机号格式错误】---执行通过
2020-12-22 21:16:18,384 - [test_recharge.py-->line:74] - INFO: 用例--【充值成功】---执行通过
2020-12-22 21:16:18,431 - [test_recharge.py-->line:70] - ERROR: 用例--【id错误】---执行失败
2020-12-22 21:16:18,431 - [test_recharge.py-->line:71] - ERROR: 0 != 1007
Traceback (most recent call last):
  File "C:\project\python_35\py35_21day_project\testcases\test_recharge.py", line 67, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 0 != 1007
2020-12-22 21:16:18,473 - [test_recharge.py-->line:70] - ERROR: 用例--【不输入id】---执行失败
2020-12-22 21:16:18,474 - [test_recharge.py-->line:71] - ERROR: 0 != 1
Traceback (most recent call last):
  File "C:\project\python_35\py35_21day_project\testcases\test_recharge.py", line 67, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 0 != 1
2020-12-22 21:16:18,534 - [test_recharge.py-->line:70] - ERROR: 用例--【不输入金额】---执行失败
2020-12-22 21:16:18,534 - [test_recharge.py-->line:71] - ERROR: 0 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_21day_project\testcases\test_recharge.py", line 67, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 0 != 2
2020-12-22 21:16:18,586 - [test_recharge.py-->line:70] - ERROR: 用例--【充值金额为负数】---执行失败
2020-12-22 21:16:18,587 - [test_recharge.py-->line:71] - ERROR: 0 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_21day_project\testcases\test_recharge.py", line 67, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 0 != 2
2020-12-22 21:16:18,634 - [test_recharge.py-->line:70] - ERROR: 用例--【充值金额为500001】---执行失败
2020-12-22 21:16:18,634 - [test_recharge.py-->line:71] - ERROR: 0 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_21day_project\testcases\test_recharge.py", line 67, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 0 != 2
2020-12-22 21:16:18,695 - [test_recharge.py-->line:70] - ERROR: 用例--【充值金额非数字】---执行失败
2020-12-22 21:16:18,701 - [test_recharge.py-->line:71] - ERROR: '数字格式化异常' != '余额必须为数值型'
- 数字格式化异常
+ 余额必须为数值型
Traceback (most recent call last):
  File "C:\project\python_35\py35_21day_project\testcases\test_recharge.py", line 68, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '数字格式化异常' != '余额必须为数值型'
- 数字格式化异常
+ 余额必须为数值型

2020-12-22 21:16:18,760 - [test_recharge.py-->line:70] - ERROR: 用例--【充值金额小数点3位】---执行失败
2020-12-22 21:16:18,760 - [test_recharge.py-->line:71] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_21day_project\testcases\test_recharge.py", line 68, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2020-12-22 21:16:19,063 - [test_register.py-->line:47] - ERROR: 用例--【注册成功-带注册名】---执行失败
2020-12-22 21:16:19,064 - [test_register.py-->line:48] - ERROR: 0 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_21day_project\testcases\test_register.py", line 43, in test_register
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 0 != 2
2020-12-22 21:16:19,316 - [test_register.py-->line:47] - ERROR: 用例--【成功-不带用户名】---执行失败
2020-12-22 21:16:19,317 - [test_register.py-->line:48] - ERROR: 0 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_21day_project\testcases\test_register.py", line 43, in test_register
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 0 != 2
2020-12-22 21:16:19,388 - [test_register.py-->line:52] - INFO: 用例--【不输入手机号】---执行通过
2020-12-22 21:16:19,438 - [test_register.py-->line:52] - INFO: 用例--【手机号长度10位】---执行通过
2020-12-22 21:16:19,478 - [test_register.py-->line:52] - INFO: 用例--【手机号长度12位】---执行通过
2020-12-22 21:16:19,520 - [test_register.py-->line:52] - INFO: 用例--【手机号含有非法字符】---执行通过
2020-12-22 21:16:19,791 - [test_register.py-->line:52] - INFO: 用例--【已注册过的手机号】---执行通过
2020-12-22 21:16:19,838 - [test_register.py-->line:52] - INFO: 用例--【密码7位】---执行通过
2020-12-22 21:16:19,895 - [test_register.py-->line:52] - INFO: 用例--【密码17位】---执行通过
2020-12-22 21:16:19,946 - [test_register.py-->line:52] - INFO: 用例--【不输入密码】---执行通过
2020-12-22 21:16:19,999 - [test_register.py-->line:52] - INFO: 用例--【注册名11位】---执行通过
2020-12-22 21:16:20,057 - [test_register.py-->line:52] - INFO: 用例--【类型输入非0，1内容】---执行通过
2020-12-22 21:16:20,324 - [test_register.py-->line:47] - ERROR: 用例--【不输入类型】---执行失败
2020-12-22 21:16:20,325 - [test_register.py-->line:48] - ERROR: 0 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_21day_project\testcases\test_register.py", line 43, in test_register
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 0 != 2
2020-12-22 21:21:27,077 - [test_login.py-->line:53] - INFO: 用例--【登录成功】---执行通过
2020-12-22 21:21:27,130 - [test_login.py-->line:53] - INFO: 用例--【手机号为空】---执行通过
2020-12-22 21:21:27,169 - [test_login.py-->line:53] - INFO: 用例--【密码为空】---执行通过
2020-12-22 21:21:27,420 - [test_login.py-->line:53] - INFO: 用例--【手机号未注册】---执行通过
2020-12-22 21:21:27,692 - [test_login.py-->line:53] - INFO: 用例--【密码错误】---执行通过
2020-12-22 21:21:27,745 - [test_login.py-->line:53] - INFO: 用例--【手机号格式错误】---执行通过
2020-12-22 21:21:28,061 - [test_recharge.py-->line:74] - INFO: 用例--【充值成功】---执行通过
2020-12-22 21:21:28,119 - [test_recharge.py-->line:74] - INFO: 用例--【id错误】---执行通过
2020-12-22 21:21:28,176 - [test_recharge.py-->line:70] - ERROR: 用例--【不输入金额】---执行失败
2020-12-22 21:21:28,177 - [test_recharge.py-->line:71] - ERROR: 1 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_21day_project\testcases\test_recharge.py", line 67, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 2
2020-12-22 21:21:28,223 - [test_recharge.py-->line:70] - ERROR: 用例--【充值金额为负数】---执行失败
2020-12-22 21:21:28,223 - [test_recharge.py-->line:71] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_21day_project\testcases\test_recharge.py", line 68, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2020-12-22 21:21:28,267 - [test_recharge.py-->line:70] - ERROR: 用例--【充值金额为500001】---执行失败
2020-12-22 21:21:28,267 - [test_recharge.py-->line:71] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_21day_project\testcases\test_recharge.py", line 68, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2020-12-22 21:21:28,321 - [test_recharge.py-->line:74] - INFO: 用例--【充值金额非数字】---执行通过
2020-12-22 21:21:28,361 - [test_recharge.py-->line:70] - ERROR: 用例--【充值金额小数点3位】---执行失败
2020-12-22 21:21:28,361 - [test_recharge.py-->line:71] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_21day_project\testcases\test_recharge.py", line 68, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2020-12-22 21:21:28,626 - [test_register.py-->line:47] - ERROR: 用例--【注册成功-带注册名】---执行失败
2020-12-22 21:21:28,627 - [test_register.py-->line:48] - ERROR: 0 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_21day_project\testcases\test_register.py", line 43, in test_register
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 0 != 2
2020-12-22 21:21:28,907 - [test_register.py-->line:47] - ERROR: 用例--【成功-不带用户名】---执行失败
2020-12-22 21:21:28,908 - [test_register.py-->line:48] - ERROR: 0 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_21day_project\testcases\test_register.py", line 43, in test_register
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 0 != 2
2020-12-22 21:21:28,970 - [test_register.py-->line:52] - INFO: 用例--【不输入手机号】---执行通过
2020-12-22 21:21:29,025 - [test_register.py-->line:52] - INFO: 用例--【手机号长度10位】---执行通过
2020-12-22 21:21:29,071 - [test_register.py-->line:52] - INFO: 用例--【手机号长度12位】---执行通过
2020-12-22 21:21:29,124 - [test_register.py-->line:52] - INFO: 用例--【手机号含有非法字符】---执行通过
2020-12-22 21:21:29,420 - [test_register.py-->line:52] - INFO: 用例--【已注册过的手机号】---执行通过
2020-12-22 21:21:29,472 - [test_register.py-->line:52] - INFO: 用例--【密码7位】---执行通过
2020-12-22 21:21:29,513 - [test_register.py-->line:52] - INFO: 用例--【密码17位】---执行通过
2020-12-22 21:21:29,560 - [test_register.py-->line:52] - INFO: 用例--【不输入密码】---执行通过
2020-12-22 21:21:29,611 - [test_register.py-->line:52] - INFO: 用例--【注册名11位】---执行通过
2020-12-22 21:21:29,664 - [test_register.py-->line:52] - INFO: 用例--【类型输入非0，1内容】---执行通过
2020-12-22 21:21:29,939 - [test_register.py-->line:47] - ERROR: 用例--【不输入类型】---执行失败
2020-12-22 21:21:29,939 - [test_register.py-->line:48] - ERROR: 0 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_21day_project\testcases\test_register.py", line 43, in test_register
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 0 != 2
2020-12-22 21:25:35,230 - [test_login.py-->line:53] - INFO: 用例--【登录成功】---执行通过
2020-12-22 21:25:35,283 - [test_login.py-->line:53] - INFO: 用例--【手机号为空】---执行通过
2020-12-22 21:25:35,321 - [test_login.py-->line:53] - INFO: 用例--【密码为空】---执行通过
2020-12-22 21:25:35,570 - [test_login.py-->line:53] - INFO: 用例--【手机号未注册】---执行通过
2020-12-22 21:25:35,857 - [test_login.py-->line:53] - INFO: 用例--【密码错误】---执行通过
2020-12-22 21:25:35,908 - [test_login.py-->line:53] - INFO: 用例--【手机号格式错误】---执行通过
2020-12-22 21:25:36,234 - [test_recharge.py-->line:74] - INFO: 用例--【充值成功】---执行通过
2020-12-22 21:25:36,286 - [test_recharge.py-->line:74] - INFO: 用例--【id错误】---执行通过
2020-12-22 21:25:36,324 - [test_recharge.py-->line:74] - INFO: 用例--【不输入id】---执行通过
2020-12-22 21:25:36,379 - [test_recharge.py-->line:70] - ERROR: 用例--【不输入金额】---执行失败
2020-12-22 21:25:36,379 - [test_recharge.py-->line:71] - ERROR: 1 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_21day_project\testcases\test_recharge.py", line 67, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 2
2020-12-22 21:25:36,434 - [test_recharge.py-->line:70] - ERROR: 用例--【充值金额为负数】---执行失败
2020-12-22 21:25:36,434 - [test_recharge.py-->line:71] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_21day_project\testcases\test_recharge.py", line 68, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2020-12-22 21:25:36,479 - [test_recharge.py-->line:70] - ERROR: 用例--【充值金额为500001】---执行失败
2020-12-22 21:25:36,479 - [test_recharge.py-->line:71] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_21day_project\testcases\test_recharge.py", line 68, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2020-12-22 21:25:36,519 - [test_recharge.py-->line:70] - ERROR: 用例--【充值金额非数字】---执行失败
2020-12-22 21:25:36,519 - [test_recharge.py-->line:71] - ERROR: '金额必须为数值型' != '余额必须为数值型'
- 金额必须为数值型
? ^
+ 余额必须为数值型
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_21day_project\testcases\test_recharge.py", line 68, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须为数值型' != '余额必须为数值型'
- 金额必须为数值型
? ^
+ 余额必须为数值型
? ^

2020-12-22 21:25:36,578 - [test_recharge.py-->line:70] - ERROR: 用例--【充值金额小数点3位】---执行失败
2020-12-22 21:25:36,578 - [test_recharge.py-->line:71] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_21day_project\testcases\test_recharge.py", line 68, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2020-12-22 21:25:36,842 - [test_register.py-->line:47] - ERROR: 用例--【注册成功-带注册名】---执行失败
2020-12-22 21:25:36,842 - [test_register.py-->line:48] - ERROR: 0 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_21day_project\testcases\test_register.py", line 43, in test_register
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 0 != 2
2020-12-22 21:25:37,107 - [test_register.py-->line:47] - ERROR: 用例--【成功-不带用户名】---执行失败
2020-12-22 21:25:37,107 - [test_register.py-->line:48] - ERROR: 0 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_21day_project\testcases\test_register.py", line 43, in test_register
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 0 != 2
2020-12-22 21:25:37,152 - [test_register.py-->line:52] - INFO: 用例--【不输入手机号】---执行通过
2020-12-22 21:25:37,196 - [test_register.py-->line:52] - INFO: 用例--【手机号长度10位】---执行通过
2020-12-22 21:25:37,233 - [test_register.py-->line:52] - INFO: 用例--【手机号长度12位】---执行通过
2020-12-22 21:25:37,285 - [test_register.py-->line:52] - INFO: 用例--【手机号含有非法字符】---执行通过
2020-12-22 21:25:37,633 - [test_register.py-->line:52] - INFO: 用例--【已注册过的手机号】---执行通过
2020-12-22 21:25:37,685 - [test_register.py-->line:52] - INFO: 用例--【密码7位】---执行通过
2020-12-22 21:25:37,730 - [test_register.py-->line:52] - INFO: 用例--【密码17位】---执行通过
2020-12-22 21:25:37,790 - [test_register.py-->line:52] - INFO: 用例--【不输入密码】---执行通过
2020-12-22 21:25:37,839 - [test_register.py-->line:52] - INFO: 用例--【注册名11位】---执行通过
2020-12-22 21:25:37,895 - [test_register.py-->line:52] - INFO: 用例--【类型输入非0，1内容】---执行通过
2020-12-22 21:25:38,162 - [test_register.py-->line:47] - ERROR: 用例--【不输入类型】---执行失败
2020-12-22 21:25:38,162 - [test_register.py-->line:48] - ERROR: 0 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_21day_project\testcases\test_register.py", line 43, in test_register
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 0 != 2
2020-12-22 21:39:27,726 - [test_register.py-->line:56] - INFO: 用例--【注册成功-带注册名】---执行通过
2020-12-22 21:39:27,986 - [test_register.py-->line:56] - INFO: 用例--【成功-不带用户名】---执行通过
2020-12-22 21:39:28,030 - [test_register.py-->line:56] - INFO: 用例--【不输入手机号】---执行通过
2020-12-22 21:39:28,088 - [test_register.py-->line:56] - INFO: 用例--【手机号长度10位】---执行通过
2020-12-22 21:39:28,147 - [test_register.py-->line:56] - INFO: 用例--【手机号长度12位】---执行通过
2020-12-22 21:39:28,205 - [test_register.py-->line:56] - INFO: 用例--【手机号含有非法字符】---执行通过
2020-12-22 21:39:28,463 - [test_register.py-->line:56] - INFO: 用例--【已注册过的手机号】---执行通过
2020-12-22 21:39:28,504 - [test_register.py-->line:56] - INFO: 用例--【密码7位】---执行通过
2020-12-22 21:39:28,565 - [test_register.py-->line:56] - INFO: 用例--【密码17位】---执行通过
2020-12-22 21:39:28,625 - [test_register.py-->line:56] - INFO: 用例--【不输入密码】---执行通过
2020-12-22 21:39:28,683 - [test_register.py-->line:56] - INFO: 用例--【注册名11位】---执行通过
2020-12-22 21:39:28,743 - [test_register.py-->line:56] - INFO: 用例--【类型输入非0，1内容】---执行通过
2020-12-22 21:39:29,010 - [test_register.py-->line:56] - INFO: 用例--【不输入类型】---执行通过
2020-12-22 21:39:39,254 - [test_register.py-->line:56] - INFO: 用例--【注册成功-带注册名】---执行通过
2020-12-22 21:39:39,516 - [test_register.py-->line:56] - INFO: 用例--【成功-不带用户名】---执行通过
2020-12-22 21:39:39,556 - [test_register.py-->line:56] - INFO: 用例--【不输入手机号】---执行通过
2020-12-22 21:39:39,596 - [test_register.py-->line:56] - INFO: 用例--【手机号长度10位】---执行通过
2020-12-22 21:39:39,640 - [test_register.py-->line:56] - INFO: 用例--【手机号长度12位】---执行通过
2020-12-22 21:39:39,694 - [test_register.py-->line:56] - INFO: 用例--【手机号含有非法字符】---执行通过
2020-12-22 21:39:39,954 - [test_register.py-->line:56] - INFO: 用例--【已注册过的手机号】---执行通过
2020-12-22 21:39:39,995 - [test_register.py-->line:56] - INFO: 用例--【密码7位】---执行通过
2020-12-22 21:39:40,043 - [test_register.py-->line:56] - INFO: 用例--【密码17位】---执行通过
2020-12-22 21:39:40,105 - [test_register.py-->line:56] - INFO: 用例--【不输入密码】---执行通过
2020-12-22 21:39:40,162 - [test_register.py-->line:56] - INFO: 用例--【注册名11位】---执行通过
2020-12-22 21:39:40,215 - [test_register.py-->line:56] - INFO: 用例--【类型输入非0，1内容】---执行通过
2020-12-22 21:39:40,500 - [test_register.py-->line:56] - INFO: 用例--【不输入类型】---执行通过
2020-12-22 21:42:37,314 - [test_login.py-->line:53] - INFO: 用例--【登录成功】---执行通过
2020-12-22 21:42:37,354 - [test_login.py-->line:53] - INFO: 用例--【手机号为空】---执行通过
2020-12-22 21:42:37,391 - [test_login.py-->line:53] - INFO: 用例--【密码为空】---执行通过
2020-12-22 21:42:37,643 - [test_login.py-->line:53] - INFO: 用例--【手机号未注册】---执行通过
2020-12-22 21:42:37,914 - [test_login.py-->line:53] - INFO: 用例--【密码错误】---执行通过
2020-12-22 21:42:37,953 - [test_login.py-->line:53] - INFO: 用例--【手机号格式错误】---执行通过
2020-12-22 21:42:38,285 - [test_recharge.py-->line:73] - INFO: 用例--【充值成功】---执行通过
2020-12-22 21:42:38,327 - [test_recharge.py-->line:73] - INFO: 用例--【id错误】---执行通过
2020-12-22 21:42:38,373 - [test_recharge.py-->line:73] - INFO: 用例--【不输入id】---执行通过
2020-12-22 21:42:38,413 - [test_recharge.py-->line:69] - ERROR: 用例--【不输入金额】---执行失败
2020-12-22 21:42:38,413 - [test_recharge.py-->line:70] - ERROR: 1 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_21day_project\testcases\test_recharge.py", line 66, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 2
2020-12-22 21:42:38,467 - [test_recharge.py-->line:69] - ERROR: 用例--【充值金额为负数】---执行失败
2020-12-22 21:42:38,468 - [test_recharge.py-->line:70] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_21day_project\testcases\test_recharge.py", line 67, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2020-12-22 21:42:38,523 - [test_recharge.py-->line:69] - ERROR: 用例--【充值金额为500001】---执行失败
2020-12-22 21:42:38,524 - [test_recharge.py-->line:70] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_21day_project\testcases\test_recharge.py", line 67, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2020-12-22 21:42:38,586 - [test_recharge.py-->line:69] - ERROR: 用例--【充值金额非数字】---执行失败
2020-12-22 21:42:38,586 - [test_recharge.py-->line:70] - ERROR: '金额必须为数值型' != '余额必须为数值型'
- 金额必须为数值型
? ^
+ 余额必须为数值型
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_21day_project\testcases\test_recharge.py", line 67, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须为数值型' != '余额必须为数值型'
- 金额必须为数值型
? ^
+ 余额必须为数值型
? ^

2020-12-22 21:42:38,642 - [test_recharge.py-->line:69] - ERROR: 用例--【充值金额小数点3位】---执行失败
2020-12-22 21:42:38,642 - [test_recharge.py-->line:70] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_21day_project\testcases\test_recharge.py", line 67, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2020-12-22 21:42:38,934 - [test_register.py-->line:58] - INFO: 用例--【注册成功-带注册名】---执行通过
2020-12-22 21:42:39,206 - [test_register.py-->line:58] - INFO: 用例--【成功-不带用户名】---执行通过
2020-12-22 21:42:39,258 - [test_register.py-->line:58] - INFO: 用例--【不输入手机号】---执行通过
2020-12-22 21:42:39,295 - [test_register.py-->line:58] - INFO: 用例--【手机号长度10位】---执行通过
2020-12-22 21:42:39,340 - [test_register.py-->line:58] - INFO: 用例--【手机号长度12位】---执行通过
2020-12-22 21:42:39,381 - [test_register.py-->line:58] - INFO: 用例--【手机号含有非法字符】---执行通过
2020-12-22 21:42:39,636 - [test_register.py-->line:58] - INFO: 用例--【已注册过的手机号】---执行通过
2020-12-22 21:42:39,678 - [test_register.py-->line:58] - INFO: 用例--【密码7位】---执行通过
2020-12-22 21:42:39,714 - [test_register.py-->line:58] - INFO: 用例--【密码17位】---执行通过
2020-12-22 21:42:39,755 - [test_register.py-->line:58] - INFO: 用例--【不输入密码】---执行通过
2020-12-22 21:42:39,796 - [test_register.py-->line:58] - INFO: 用例--【注册名11位】---执行通过
2020-12-22 21:42:39,834 - [test_register.py-->line:58] - INFO: 用例--【类型输入非0，1内容】---执行通过
2020-12-22 21:42:40,102 - [test_register.py-->line:58] - INFO: 用例--【不输入类型】---执行通过
2020-12-24 19:35:45,132 - [test_login.py-->line:48] - ERROR: 用例--【登录成功】---执行失败
2020-12-24 19:35:45,133 - [test_login.py-->line:49] - ERROR: {'code': 0, 'msg': 'OK'} not in {'code': 1001, 'msg': '账号信息错误', 'data': None, 'copyright': 'Copyright 柠檬班 © 2017-2020 湖南省零檬信息技术有限公司 All Rights Reserved'}
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_login.py", line 45, in test_login
    self.assertDictIn(expected,res)
  File "C:\project\python_35\py35_23day_project\testcases\test_login.py", line 61, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'msg': 'OK'} not in {'code': 1001, 'msg': '账号信息错误', 'data': None, 'copyright': 'Copyright 柠檬班 © 2017-2020 湖南省零檬信息技术有限公司 All Rights Reserved'}
2020-12-24 19:35:45,180 - [test_login.py-->line:53] - INFO: 用例--【手机号为空】---执行通过
2020-12-24 19:35:45,224 - [test_login.py-->line:53] - INFO: 用例--【密码为空】---执行通过
2020-12-24 19:35:45,264 - [test_login.py-->line:53] - INFO: 用例--【手机号未注册】---执行通过
2020-12-24 19:35:45,304 - [test_login.py-->line:53] - INFO: 用例--【密码错误】---执行通过
2020-12-24 19:35:45,345 - [test_login.py-->line:53] - INFO: 用例--【手机号格式错误】---执行通过
2020-12-24 19:35:45,457 - [test_register.py-->line:61] - INFO: 用例--【注册成功-带注册名】---执行通过
2020-12-24 19:35:45,519 - [test_register.py-->line:61] - INFO: 用例--【成功-不带用户名】---执行通过
2020-12-24 19:35:45,561 - [test_register.py-->line:61] - INFO: 用例--【不输入手机号】---执行通过
2020-12-24 19:35:45,599 - [test_register.py-->line:61] - INFO: 用例--【手机号长度10位】---执行通过
2020-12-24 19:35:45,641 - [test_register.py-->line:61] - INFO: 用例--【手机号长度12位】---执行通过
2020-12-24 19:35:45,680 - [test_register.py-->line:61] - INFO: 用例--【手机号含有非法字符】---执行通过
2020-12-24 19:35:45,724 - [test_register.py-->line:56] - ERROR: 用例--【已注册过的手机号】---执行失败
2020-12-24 19:35:45,724 - [test_register.py-->line:57] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_register.py", line 52, in test_register
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2020-12-24 19:35:45,781 - [test_register.py-->line:61] - INFO: 用例--【密码7位】---执行通过
2020-12-24 19:35:45,820 - [test_register.py-->line:61] - INFO: 用例--【密码17位】---执行通过
2020-12-24 19:35:45,869 - [test_register.py-->line:61] - INFO: 用例--【不输入密码】---执行通过
2020-12-24 19:35:45,925 - [test_register.py-->line:61] - INFO: 用例--【注册名11位】---执行通过
2020-12-24 19:35:45,974 - [test_register.py-->line:61] - INFO: 用例--【类型输入非0，1内容】---执行通过
2020-12-24 19:35:46,027 - [test_register.py-->line:61] - INFO: 用例--【不输入类型】---执行通过
2020-12-24 20:04:17,083 - [test_login.py-->line:48] - ERROR: 用例--【登录成功】---执行失败
2020-12-24 20:04:17,083 - [test_login.py-->line:49] - ERROR: {'code': 0, 'msg': 'OK'} not in {'code': 1001, 'msg': '账号信息错误', 'data': None, 'copyright': 'Copyright 柠檬班 © 2017-2020 湖南省零檬信息技术有限公司 All Rights Reserved'}
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_login.py", line 45, in test_login
    self.assertDictIn(expected,res)
  File "C:\project\python_35\py35_23day_project\testcases\test_login.py", line 61, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'msg': 'OK'} not in {'code': 1001, 'msg': '账号信息错误', 'data': None, 'copyright': 'Copyright 柠檬班 © 2017-2020 湖南省零檬信息技术有限公司 All Rights Reserved'}
2020-12-24 20:04:17,139 - [test_login.py-->line:53] - INFO: 用例--【手机号为空】---执行通过
2020-12-24 20:04:17,194 - [test_login.py-->line:53] - INFO: 用例--【密码为空】---执行通过
2020-12-24 20:04:17,250 - [test_login.py-->line:53] - INFO: 用例--【手机号未注册】---执行通过
2020-12-24 20:04:17,290 - [test_login.py-->line:53] - INFO: 用例--【密码错误】---执行通过
2020-12-24 20:04:17,341 - [test_login.py-->line:53] - INFO: 用例--【手机号格式错误】---执行通过
2020-12-24 20:04:17,450 - [test_register.py-->line:61] - INFO: 用例--【注册成功-带注册名】---执行通过
2020-12-24 20:04:17,498 - [test_register.py-->line:61] - INFO: 用例--【成功-不带用户名】---执行通过
2020-12-24 20:04:17,535 - [test_register.py-->line:61] - INFO: 用例--【不输入手机号】---执行通过
2020-12-24 20:04:17,595 - [test_register.py-->line:61] - INFO: 用例--【手机号长度10位】---执行通过
2020-12-24 20:04:17,638 - [test_register.py-->line:61] - INFO: 用例--【手机号长度12位】---执行通过
2020-12-24 20:04:17,687 - [test_register.py-->line:61] - INFO: 用例--【手机号含有非法字符】---执行通过
2020-12-24 20:04:17,748 - [test_register.py-->line:61] - INFO: 用例--【已注册过的手机号】---执行通过
2020-12-24 20:04:17,797 - [test_register.py-->line:61] - INFO: 用例--【密码7位】---执行通过
2020-12-24 20:04:17,846 - [test_register.py-->line:61] - INFO: 用例--【密码17位】---执行通过
2020-12-24 20:04:17,896 - [test_register.py-->line:61] - INFO: 用例--【不输入密码】---执行通过
2020-12-24 20:04:17,938 - [test_register.py-->line:61] - INFO: 用例--【注册名11位】---执行通过
2020-12-24 20:04:17,999 - [test_register.py-->line:61] - INFO: 用例--【类型输入非0，1内容】---执行通过
2020-12-24 20:04:18,063 - [test_register.py-->line:61] - INFO: 用例--【不输入类型】---执行通过
2020-12-24 20:05:42,682 - [test_login.py-->line:48] - ERROR: 用例--【登录成功】---执行失败
2020-12-24 20:05:42,683 - [test_login.py-->line:49] - ERROR: {'code': 0, 'msg': 'OK'} not in {'code': 1001, 'msg': '账号信息错误', 'data': None, 'copyright': 'Copyright 柠檬班 © 2017-2020 湖南省零檬信息技术有限公司 All Rights Reserved'}
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_login.py", line 45, in test_login
    self.assertDictIn(expected,res)
  File "C:\project\python_35\py35_23day_project\testcases\test_login.py", line 61, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'msg': 'OK'} not in {'code': 1001, 'msg': '账号信息错误', 'data': None, 'copyright': 'Copyright 柠檬班 © 2017-2020 湖南省零檬信息技术有限公司 All Rights Reserved'}
2020-12-24 20:05:42,724 - [test_login.py-->line:53] - INFO: 用例--【手机号为空】---执行通过
2020-12-24 20:05:42,779 - [test_login.py-->line:53] - INFO: 用例--【密码为空】---执行通过
2020-12-24 20:05:42,832 - [test_login.py-->line:53] - INFO: 用例--【手机号未注册】---执行通过
2020-12-24 20:05:42,875 - [test_login.py-->line:53] - INFO: 用例--【密码错误】---执行通过
2020-12-24 20:05:42,916 - [test_login.py-->line:53] - INFO: 用例--【手机号格式错误】---执行通过
2020-12-24 20:05:43,029 - [test_register.py-->line:61] - INFO: 用例--【注册成功-带注册名】---执行通过
2020-12-24 20:05:43,087 - [test_register.py-->line:61] - INFO: 用例--【成功-不带用户名】---执行通过
2020-12-24 20:05:43,148 - [test_register.py-->line:61] - INFO: 用例--【不输入手机号】---执行通过
2020-12-24 20:05:43,194 - [test_register.py-->line:61] - INFO: 用例--【手机号长度10位】---执行通过
2020-12-24 20:05:43,242 - [test_register.py-->line:61] - INFO: 用例--【手机号长度12位】---执行通过
2020-12-24 20:05:43,298 - [test_register.py-->line:61] - INFO: 用例--【手机号含有非法字符】---执行通过
2020-12-24 20:05:43,352 - [test_register.py-->line:61] - INFO: 用例--【已注册过的手机号】---执行通过
2020-12-24 20:05:43,412 - [test_register.py-->line:61] - INFO: 用例--【密码7位】---执行通过
2020-12-24 20:05:43,458 - [test_register.py-->line:61] - INFO: 用例--【密码17位】---执行通过
2020-12-24 20:05:43,511 - [test_register.py-->line:61] - INFO: 用例--【不输入密码】---执行通过
2020-12-24 20:05:43,574 - [test_register.py-->line:61] - INFO: 用例--【注册名11位】---执行通过
2020-12-24 20:05:43,643 - [test_register.py-->line:61] - INFO: 用例--【类型输入非0，1内容】---执行通过
2020-12-24 20:05:43,704 - [test_register.py-->line:61] - INFO: 用例--【不输入类型】---执行通过
2020-12-24 20:05:54,351 - [test_login.py-->line:48] - ERROR: 用例--【登录成功】---执行失败
2020-12-24 20:05:54,353 - [test_login.py-->line:49] - ERROR: {'code': 0, 'msg': 'OK'} not in {'code': 1001, 'msg': '账号信息错误', 'data': None, 'copyright': 'Copyright 柠檬班 © 2017-2020 湖南省零檬信息技术有限公司 All Rights Reserved'}
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_login.py", line 45, in test_login
    self.assertDictIn(expected,res)
  File "C:\project\python_35\py35_23day_project\testcases\test_login.py", line 61, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'msg': 'OK'} not in {'code': 1001, 'msg': '账号信息错误', 'data': None, 'copyright': 'Copyright 柠檬班 © 2017-2020 湖南省零檬信息技术有限公司 All Rights Reserved'}
2020-12-24 20:05:54,421 - [test_login.py-->line:53] - INFO: 用例--【手机号为空】---执行通过
2020-12-24 20:05:54,481 - [test_login.py-->line:53] - INFO: 用例--【密码为空】---执行通过
2020-12-24 20:05:54,538 - [test_login.py-->line:53] - INFO: 用例--【手机号未注册】---执行通过
2020-12-24 20:05:54,599 - [test_login.py-->line:53] - INFO: 用例--【密码错误】---执行通过
2020-12-24 20:05:54,660 - [test_login.py-->line:53] - INFO: 用例--【手机号格式错误】---执行通过
2020-12-24 20:05:54,827 - [test_register.py-->line:61] - INFO: 用例--【注册成功-带注册名】---执行通过
2020-12-24 20:05:54,917 - [test_register.py-->line:61] - INFO: 用例--【成功-不带用户名】---执行通过
2020-12-24 20:05:54,977 - [test_register.py-->line:61] - INFO: 用例--【不输入手机号】---执行通过
2020-12-24 20:05:55,050 - [test_register.py-->line:61] - INFO: 用例--【手机号长度10位】---执行通过
2020-12-24 20:05:55,107 - [test_register.py-->line:61] - INFO: 用例--【手机号长度12位】---执行通过
2020-12-24 20:05:55,177 - [test_register.py-->line:61] - INFO: 用例--【手机号含有非法字符】---执行通过
2020-12-24 20:05:55,240 - [test_register.py-->line:61] - INFO: 用例--【已注册过的手机号】---执行通过
2020-12-24 20:05:55,304 - [test_register.py-->line:61] - INFO: 用例--【密码7位】---执行通过
2020-12-24 20:05:55,371 - [test_register.py-->line:61] - INFO: 用例--【密码17位】---执行通过
2020-12-24 20:05:55,425 - [test_register.py-->line:61] - INFO: 用例--【不输入密码】---执行通过
2020-12-24 20:05:55,480 - [test_register.py-->line:61] - INFO: 用例--【注册名11位】---执行通过
2020-12-24 20:05:55,530 - [test_register.py-->line:61] - INFO: 用例--【类型输入非0，1内容】---执行通过
2020-12-24 20:05:55,612 - [test_register.py-->line:61] - INFO: 用例--【不输入类型】---执行通过
2020-12-24 20:08:15,099 - [test_login.py-->line:48] - ERROR: 用例--【登录成功】---执行失败
2020-12-24 20:08:15,100 - [test_login.py-->line:49] - ERROR: {'code': 0, 'msg': 'OK'} not in {'code': 1001, 'msg': '账号信息错误', 'data': None, 'copyright': 'Copyright 柠檬班 © 2017-2020 湖南省零檬信息技术有限公司 All Rights Reserved'}
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_login.py", line 45, in test_login
    self.assertDictIn(expected,res)
  File "C:\project\python_35\py35_23day_project\testcases\test_login.py", line 61, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'msg': 'OK'} not in {'code': 1001, 'msg': '账号信息错误', 'data': None, 'copyright': 'Copyright 柠檬班 © 2017-2020 湖南省零檬信息技术有限公司 All Rights Reserved'}
2020-12-24 20:08:15,142 - [test_login.py-->line:53] - INFO: 用例--【手机号为空】---执行通过
2020-12-24 20:08:15,182 - [test_login.py-->line:53] - INFO: 用例--【密码为空】---执行通过
2020-12-24 20:08:15,237 - [test_login.py-->line:53] - INFO: 用例--【手机号未注册】---执行通过
2020-12-24 20:08:15,274 - [test_login.py-->line:53] - INFO: 用例--【密码错误】---执行通过
2020-12-24 20:08:15,323 - [test_login.py-->line:53] - INFO: 用例--【手机号格式错误】---执行通过
2020-12-24 20:08:15,446 - [test_recharge.py-->line:85] - INFO: 用例--【充值成功】---执行通过
2020-12-24 20:08:15,501 - [test_recharge.py-->line:85] - INFO: 用例--【id错误】---执行通过
2020-12-24 20:08:15,542 - [test_recharge.py-->line:85] - INFO: 用例--【不输入id】---执行通过
2020-12-24 20:08:15,603 - [test_recharge.py-->line:81] - ERROR: 用例--【不输入金额】---执行失败
2020-12-24 20:08:15,603 - [test_recharge.py-->line:82] - ERROR: 1 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_recharge.py", line 78, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 2
2020-12-24 20:08:15,644 - [test_recharge.py-->line:81] - ERROR: 用例--【充值金额为负数】---执行失败
2020-12-24 20:08:15,644 - [test_recharge.py-->line:82] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_recharge.py", line 79, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2020-12-24 20:08:15,698 - [test_recharge.py-->line:81] - ERROR: 用例--【充值金额为500001】---执行失败
2020-12-24 20:08:15,698 - [test_recharge.py-->line:82] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_recharge.py", line 79, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2020-12-24 20:08:15,747 - [test_recharge.py-->line:81] - ERROR: 用例--【充值金额非数字】---执行失败
2020-12-24 20:08:15,747 - [test_recharge.py-->line:82] - ERROR: '金额必须为数值型' != '余额必须为数值型'
- 金额必须为数值型
? ^
+ 余额必须为数值型
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_recharge.py", line 79, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须为数值型' != '余额必须为数值型'
- 金额必须为数值型
? ^
+ 余额必须为数值型
? ^

2020-12-24 20:08:15,792 - [test_recharge.py-->line:81] - ERROR: 用例--【充值金额小数点3位】---执行失败
2020-12-24 20:08:15,792 - [test_recharge.py-->line:82] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_recharge.py", line 79, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2020-12-24 20:08:15,840 - [test_register.py-->line:61] - INFO: 用例--【注册成功-带注册名】---执行通过
2020-12-24 20:08:15,902 - [test_register.py-->line:61] - INFO: 用例--【成功-不带用户名】---执行通过
2020-12-24 20:08:15,946 - [test_register.py-->line:61] - INFO: 用例--【不输入手机号】---执行通过
2020-12-24 20:08:15,985 - [test_register.py-->line:61] - INFO: 用例--【手机号长度10位】---执行通过
2020-12-24 20:08:16,042 - [test_register.py-->line:61] - INFO: 用例--【手机号长度12位】---执行通过
2020-12-24 20:08:16,094 - [test_register.py-->line:61] - INFO: 用例--【手机号含有非法字符】---执行通过
2020-12-24 20:08:16,141 - [test_register.py-->line:61] - INFO: 用例--【已注册过的手机号】---执行通过
2020-12-24 20:08:16,185 - [test_register.py-->line:61] - INFO: 用例--【密码7位】---执行通过
2020-12-24 20:08:16,233 - [test_register.py-->line:61] - INFO: 用例--【密码17位】---执行通过
2020-12-24 20:08:16,277 - [test_register.py-->line:61] - INFO: 用例--【不输入密码】---执行通过
2020-12-24 20:08:16,336 - [test_register.py-->line:61] - INFO: 用例--【注册名11位】---执行通过
2020-12-24 20:08:16,385 - [test_register.py-->line:61] - INFO: 用例--【类型输入非0，1内容】---执行通过
2020-12-24 20:08:16,443 - [test_register.py-->line:61] - INFO: 用例--【不输入类型】---执行通过
2020-12-24 20:08:16,552 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现成功-整数】---执行失败
2020-12-24 20:08:16,552 - [test_withdraw.py-->line:79] - ERROR: 0 != 1002
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_withdraw.py", line 75, in test_withdraw
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 0 != 1002
2020-12-24 20:08:16,607 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现成功-1位小数】---执行失败
2020-12-24 20:08:16,607 - [test_withdraw.py-->line:79] - ERROR: 0 != 1002
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_withdraw.py", line 75, in test_withdraw
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 0 != 1002
2020-12-24 20:08:16,650 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现成功-2位小数】---执行失败
2020-12-24 20:08:16,650 - [test_withdraw.py-->line:79] - ERROR: 0 != 1002
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_withdraw.py", line 75, in test_withdraw
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 0 != 1002
2020-12-24 20:08:16,692 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现成功-50万】---执行失败
2020-12-24 20:08:16,692 - [test_withdraw.py-->line:79] - ERROR: 0 != 1002
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_withdraw.py", line 75, in test_withdraw
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 0 != 1002
2020-12-24 20:08:16,754 - [test_withdraw.py-->line:82] - INFO: 用例--【会员id为空】---执行通过
2020-12-24 20:08:16,791 - [test_withdraw.py-->line:82] - INFO: 用例--【会员id为小数】---执行通过
2020-12-24 20:08:16,836 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额为0】---执行失败
2020-12-24 20:08:16,837 - [test_withdraw.py-->line:79] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_withdraw.py", line 75, in test_withdraw
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2020-12-24 20:08:16,887 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额为负数】---执行失败
2020-12-24 20:08:16,888 - [test_withdraw.py-->line:79] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_withdraw.py", line 76, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2020-12-24 20:08:16,938 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额为空】---执行失败
2020-12-24 20:08:16,939 - [test_withdraw.py-->line:79] - ERROR: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_withdraw.py", line 76, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^

2020-12-24 20:08:16,978 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额-3位小数】---执行失败
2020-12-24 20:08:16,978 - [test_withdraw.py-->line:79] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_withdraw.py", line 76, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2020-12-24 20:08:17,017 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额-大于50万】---执行失败
2020-12-24 20:08:17,017 - [test_withdraw.py-->line:79] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_withdraw.py", line 76, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2020-12-24 20:08:17,064 - [test_withdraw.py-->line:82] - INFO: 用例--【提现金额-非数字】---执行通过
2020-12-24 20:10:53,464 - [test_login.py-->line:48] - ERROR: 用例--【登录成功】---执行失败
2020-12-24 20:10:53,465 - [test_login.py-->line:49] - ERROR: {'code': 0, 'msg': 'OK'} not in {'code': 1001, 'msg': '账号信息错误', 'data': None, 'copyright': 'Copyright 柠檬班 © 2017-2020 湖南省零檬信息技术有限公司 All Rights Reserved'}
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_login.py", line 45, in test_login
    self.assertDictIn(expected,res)
  File "C:\project\python_35\py35_23day_project\testcases\test_login.py", line 61, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'msg': 'OK'} not in {'code': 1001, 'msg': '账号信息错误', 'data': None, 'copyright': 'Copyright 柠檬班 © 2017-2020 湖南省零檬信息技术有限公司 All Rights Reserved'}
2020-12-24 20:10:53,512 - [test_login.py-->line:53] - INFO: 用例--【手机号为空】---执行通过
2020-12-24 20:10:53,552 - [test_login.py-->line:53] - INFO: 用例--【密码为空】---执行通过
2020-12-24 20:10:53,605 - [test_login.py-->line:53] - INFO: 用例--【手机号未注册】---执行通过
2020-12-24 20:10:53,670 - [test_login.py-->line:53] - INFO: 用例--【密码错误】---执行通过
2020-12-24 20:10:53,722 - [test_login.py-->line:53] - INFO: 用例--【手机号格式错误】---执行通过
2020-12-24 20:10:53,845 - [test_recharge.py-->line:85] - INFO: 用例--【充值成功】---执行通过
2020-12-24 20:10:53,898 - [test_recharge.py-->line:85] - INFO: 用例--【id错误】---执行通过
2020-12-24 20:10:53,957 - [test_recharge.py-->line:85] - INFO: 用例--【不输入id】---执行通过
2020-12-24 20:10:53,999 - [test_recharge.py-->line:81] - ERROR: 用例--【不输入金额】---执行失败
2020-12-24 20:10:54,002 - [test_recharge.py-->line:82] - ERROR: 1 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_recharge.py", line 78, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 2
2020-12-24 20:10:54,058 - [test_recharge.py-->line:81] - ERROR: 用例--【充值金额为负数】---执行失败
2020-12-24 20:10:54,059 - [test_recharge.py-->line:82] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_recharge.py", line 79, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2020-12-24 20:10:54,115 - [test_recharge.py-->line:81] - ERROR: 用例--【充值金额为500001】---执行失败
2020-12-24 20:10:54,115 - [test_recharge.py-->line:82] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_recharge.py", line 79, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2020-12-24 20:10:54,178 - [test_recharge.py-->line:81] - ERROR: 用例--【充值金额非数字】---执行失败
2020-12-24 20:10:54,178 - [test_recharge.py-->line:82] - ERROR: '金额必须为数值型' != '余额必须为数值型'
- 金额必须为数值型
? ^
+ 余额必须为数值型
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_recharge.py", line 79, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须为数值型' != '余额必须为数值型'
- 金额必须为数值型
? ^
+ 余额必须为数值型
? ^

2020-12-24 20:10:54,239 - [test_recharge.py-->line:81] - ERROR: 用例--【充值金额小数点3位】---执行失败
2020-12-24 20:10:54,239 - [test_recharge.py-->line:82] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_recharge.py", line 79, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2020-12-24 20:10:54,295 - [test_register.py-->line:61] - INFO: 用例--【注册成功-带注册名】---执行通过
2020-12-24 20:10:54,337 - [test_register.py-->line:61] - INFO: 用例--【成功-不带用户名】---执行通过
2020-12-24 20:10:54,394 - [test_register.py-->line:61] - INFO: 用例--【不输入手机号】---执行通过
2020-12-24 20:10:54,450 - [test_register.py-->line:61] - INFO: 用例--【手机号长度10位】---执行通过
2020-12-24 20:10:54,504 - [test_register.py-->line:61] - INFO: 用例--【手机号长度12位】---执行通过
2020-12-24 20:10:54,559 - [test_register.py-->line:61] - INFO: 用例--【手机号含有非法字符】---执行通过
2020-12-24 20:10:54,602 - [test_register.py-->line:61] - INFO: 用例--【已注册过的手机号】---执行通过
2020-12-24 20:10:54,649 - [test_register.py-->line:61] - INFO: 用例--【密码7位】---执行通过
2020-12-24 20:10:54,700 - [test_register.py-->line:61] - INFO: 用例--【密码17位】---执行通过
2020-12-24 20:10:54,751 - [test_register.py-->line:61] - INFO: 用例--【不输入密码】---执行通过
2020-12-24 20:10:54,808 - [test_register.py-->line:61] - INFO: 用例--【注册名11位】---执行通过
2020-12-24 20:10:54,861 - [test_register.py-->line:61] - INFO: 用例--【类型输入非0，1内容】---执行通过
2020-12-24 20:10:54,908 - [test_register.py-->line:61] - INFO: 用例--【不输入类型】---执行通过
2020-12-24 20:10:55,020 - [test_withdraw.py-->line:82] - INFO: 用例--【提现成功-整数】---执行通过
2020-12-24 20:10:55,067 - [test_withdraw.py-->line:82] - INFO: 用例--【提现成功-1位小数】---执行通过
2020-12-24 20:10:55,110 - [test_withdraw.py-->line:82] - INFO: 用例--【提现成功-2位小数】---执行通过
2020-12-24 20:10:55,163 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现成功-50万】---执行失败
2020-12-24 20:10:55,164 - [test_withdraw.py-->line:79] - ERROR: 0 != 1002
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_withdraw.py", line 75, in test_withdraw
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 0 != 1002
2020-12-24 20:10:55,219 - [test_withdraw.py-->line:82] - INFO: 用例--【会员id为空】---执行通过
2020-12-24 20:10:55,275 - [test_withdraw.py-->line:82] - INFO: 用例--【会员id为小数】---执行通过
2020-12-24 20:10:55,333 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额为0】---执行失败
2020-12-24 20:10:55,333 - [test_withdraw.py-->line:79] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_withdraw.py", line 75, in test_withdraw
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2020-12-24 20:10:55,386 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额为负数】---执行失败
2020-12-24 20:10:55,386 - [test_withdraw.py-->line:79] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_withdraw.py", line 76, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2020-12-24 20:10:55,427 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额为空】---执行失败
2020-12-24 20:10:55,428 - [test_withdraw.py-->line:79] - ERROR: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_withdraw.py", line 76, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^

2020-12-24 20:10:55,477 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额-3位小数】---执行失败
2020-12-24 20:10:55,477 - [test_withdraw.py-->line:79] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_withdraw.py", line 76, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2020-12-24 20:10:55,525 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额-大于50万】---执行失败
2020-12-24 20:10:55,525 - [test_withdraw.py-->line:79] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_withdraw.py", line 76, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2020-12-24 20:10:55,582 - [test_withdraw.py-->line:82] - INFO: 用例--【提现金额-非数字】---执行通过
2020-12-24 20:16:32,349 - [test_login.py-->line:48] - ERROR: 用例--【登录成功】---执行失败
2020-12-24 20:16:32,350 - [test_login.py-->line:49] - ERROR: {'code': 0, 'msg': 'OK'} not in {'code': 1001, 'msg': '账号信息错误', 'data': None, 'copyright': 'Copyright 柠檬班 © 2017-2020 湖南省零檬信息技术有限公司 All Rights Reserved'}
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_login.py", line 45, in test_login
    self.assertDictIn(expected,res)
  File "C:\project\python_35\py35_23day_project\testcases\test_login.py", line 61, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'msg': 'OK'} not in {'code': 1001, 'msg': '账号信息错误', 'data': None, 'copyright': 'Copyright 柠檬班 © 2017-2020 湖南省零檬信息技术有限公司 All Rights Reserved'}
2020-12-24 20:16:32,410 - [test_login.py-->line:53] - INFO: 用例--【手机号为空】---执行通过
2020-12-24 20:16:32,467 - [test_login.py-->line:53] - INFO: 用例--【密码为空】---执行通过
2020-12-24 20:16:32,542 - [test_login.py-->line:53] - INFO: 用例--【手机号未注册】---执行通过
2020-12-24 20:16:32,596 - [test_login.py-->line:53] - INFO: 用例--【密码错误】---执行通过
2020-12-24 20:16:32,638 - [test_login.py-->line:53] - INFO: 用例--【手机号格式错误】---执行通过
2020-12-24 20:16:32,732 - [test_recharge.py-->line:85] - INFO: 用例--【充值成功-整数】---执行通过
2020-12-24 20:16:32,798 - [test_recharge.py-->line:85] - INFO: 用例--【充值成功-1位小数】---执行通过
2020-12-24 20:16:32,858 - [test_recharge.py-->line:85] - INFO: 用例--【充值成功-2位小数】---执行通过
2020-12-24 20:16:32,921 - [test_recharge.py-->line:85] - INFO: 用例--【充值成功-50万】---执行通过
2020-12-24 20:16:32,977 - [test_recharge.py-->line:81] - ERROR: 用例--【会员id为空】---执行失败
2020-12-24 20:16:32,978 - [test_recharge.py-->line:82] - ERROR: '会员id为空' != '用户id为空'
- 会员id为空
+ 用户id为空
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_recharge.py", line 79, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '会员id为空' != '用户id为空'
- 会员id为空
+ 用户id为空

2020-12-24 20:16:33,030 - [test_recharge.py-->line:81] - ERROR: 用例--【会员id为小数】---执行失败
2020-12-24 20:16:33,030 - [test_recharge.py-->line:82] - ERROR: '数值参数格式不正确' != '数字格式化异常'
- 数值参数格式不正确
+ 数字格式化异常
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_recharge.py", line 79, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '数值参数格式不正确' != '数字格式化异常'
- 数值参数格式不正确
+ 数字格式化异常

2020-12-24 20:16:33,093 - [test_recharge.py-->line:81] - ERROR: 用例--【充值金额为0】---执行失败
2020-12-24 20:16:33,094 - [test_recharge.py-->line:82] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_recharge.py", line 78, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2020-12-24 20:16:33,159 - [test_recharge.py-->line:81] - ERROR: 用例--【充值金额为负数】---执行失败
2020-12-24 20:16:33,160 - [test_recharge.py-->line:82] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_recharge.py", line 79, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2020-12-24 20:16:33,220 - [test_recharge.py-->line:81] - ERROR: 用例--【充值金额为空】---执行失败
2020-12-24 20:16:33,221 - [test_recharge.py-->line:82] - ERROR: 1 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_recharge.py", line 78, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 2
2020-12-24 20:16:33,279 - [test_recharge.py-->line:81] - ERROR: 用例--【充值金额-3位小数】---执行失败
2020-12-24 20:16:33,280 - [test_recharge.py-->line:82] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_recharge.py", line 79, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2020-12-24 20:16:33,341 - [test_recharge.py-->line:81] - ERROR: 用例--【充值金额-大于50万】---执行失败
2020-12-24 20:16:33,341 - [test_recharge.py-->line:82] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_recharge.py", line 79, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2020-12-24 20:16:33,395 - [test_recharge.py-->line:81] - ERROR: 用例--【充值金额-非数字】---执行失败
2020-12-24 20:16:33,396 - [test_recharge.py-->line:82] - ERROR: '数值参数格式不正确' != '数字格式化异常'
- 数值参数格式不正确
+ 数字格式化异常
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_recharge.py", line 79, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '数值参数格式不正确' != '数字格式化异常'
- 数值参数格式不正确
+ 数字格式化异常

2020-12-24 20:16:33,454 - [test_register.py-->line:61] - INFO: 用例--【注册成功-带注册名】---执行通过
2020-12-24 20:16:33,498 - [test_register.py-->line:61] - INFO: 用例--【成功-不带用户名】---执行通过
2020-12-24 20:16:33,551 - [test_register.py-->line:61] - INFO: 用例--【不输入手机号】---执行通过
2020-12-24 20:16:33,600 - [test_register.py-->line:61] - INFO: 用例--【手机号长度10位】---执行通过
2020-12-24 20:16:33,658 - [test_register.py-->line:61] - INFO: 用例--【手机号长度12位】---执行通过
2020-12-24 20:16:33,719 - [test_register.py-->line:61] - INFO: 用例--【手机号含有非法字符】---执行通过
2020-12-24 20:16:33,791 - [test_register.py-->line:61] - INFO: 用例--【已注册过的手机号】---执行通过
2020-12-24 20:16:33,860 - [test_register.py-->line:61] - INFO: 用例--【密码7位】---执行通过
2020-12-24 20:16:33,914 - [test_register.py-->line:61] - INFO: 用例--【密码17位】---执行通过
2020-12-24 20:16:33,970 - [test_register.py-->line:61] - INFO: 用例--【不输入密码】---执行通过
2020-12-24 20:16:34,021 - [test_register.py-->line:61] - INFO: 用例--【注册名11位】---执行通过
2020-12-24 20:16:34,059 - [test_register.py-->line:61] - INFO: 用例--【类型输入非0，1内容】---执行通过
2020-12-24 20:16:34,115 - [test_register.py-->line:61] - INFO: 用例--【不输入类型】---执行通过
2020-12-24 20:16:34,212 - [test_withdraw.py-->line:82] - INFO: 用例--【提现成功-整数】---执行通过
2020-12-24 20:16:34,263 - [test_withdraw.py-->line:82] - INFO: 用例--【提现成功-1位小数】---执行通过
2020-12-24 20:16:34,327 - [test_withdraw.py-->line:82] - INFO: 用例--【提现成功-2位小数】---执行通过
2020-12-24 20:16:34,383 - [test_withdraw.py-->line:82] - INFO: 用例--【提现成功-50万】---执行通过
2020-12-24 20:16:34,438 - [test_withdraw.py-->line:82] - INFO: 用例--【会员id为空】---执行通过
2020-12-24 20:16:34,484 - [test_withdraw.py-->line:82] - INFO: 用例--【会员id为小数】---执行通过
2020-12-24 20:16:34,547 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额为0】---执行失败
2020-12-24 20:16:34,548 - [test_withdraw.py-->line:79] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_withdraw.py", line 75, in test_withdraw
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2020-12-24 20:16:34,597 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额为负数】---执行失败
2020-12-24 20:16:34,597 - [test_withdraw.py-->line:79] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_withdraw.py", line 76, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2020-12-24 20:16:34,669 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额为空】---执行失败
2020-12-24 20:16:34,670 - [test_withdraw.py-->line:79] - ERROR: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_withdraw.py", line 76, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^

2020-12-24 20:16:34,733 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额-3位小数】---执行失败
2020-12-24 20:16:34,733 - [test_withdraw.py-->line:79] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_withdraw.py", line 76, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2020-12-24 20:16:34,796 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额-大于50万】---执行失败
2020-12-24 20:16:34,796 - [test_withdraw.py-->line:79] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_withdraw.py", line 76, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2020-12-24 20:16:34,838 - [test_withdraw.py-->line:82] - INFO: 用例--【提现金额-非数字】---执行通过
2020-12-24 21:55:06,869 - [test_login.py-->line:48] - ERROR: 用例--【登录成功】---执行失败
2020-12-24 21:55:06,870 - [test_login.py-->line:49] - ERROR: {'code': 0, 'msg': 'OK'} not in {'code': 1001, 'msg': '账号信息错误', 'data': None, 'copyright': 'Copyright 柠檬班 © 2017-2020 湖南省零檬信息技术有限公司 All Rights Reserved'}
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_login.py", line 45, in test_login
    self.assertDictIn(expected,res)
  File "C:\project\python_35\py35_23day_project\testcases\test_login.py", line 61, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'msg': 'OK'} not in {'code': 1001, 'msg': '账号信息错误', 'data': None, 'copyright': 'Copyright 柠檬班 © 2017-2020 湖南省零檬信息技术有限公司 All Rights Reserved'}
2020-12-24 21:55:07,931 - [test_login.py-->line:53] - INFO: 用例--【手机号为空】---执行通过
2020-12-24 21:55:07,988 - [test_login.py-->line:53] - INFO: 用例--【密码为空】---执行通过
2020-12-24 21:55:08,027 - [test_login.py-->line:53] - INFO: 用例--【手机号未注册】---执行通过
2020-12-24 21:55:09,073 - [test_login.py-->line:53] - INFO: 用例--【密码错误】---执行通过
2020-12-24 21:55:09,129 - [test_login.py-->line:53] - INFO: 用例--【手机号格式错误】---执行通过
2020-12-24 21:55:09,570 - [test_recharge.py-->line:103] - INFO: 用例--【充值成功-整数】---执行通过
2020-12-24 21:55:09,733 - [test_recharge.py-->line:103] - INFO: 用例--【充值成功-1位小数】---执行通过
2020-12-24 21:55:09,896 - [test_recharge.py-->line:103] - INFO: 用例--【充值成功-2位小数】---执行通过
2020-12-24 21:55:10,057 - [test_recharge.py-->line:103] - INFO: 用例--【充值成功-50万】---执行通过
2020-12-24 21:55:10,231 - [test_recharge.py-->line:103] - INFO: 用例--【会员id为空】---执行通过
2020-12-24 21:55:10,383 - [test_recharge.py-->line:103] - INFO: 用例--【会员id为小数】---执行通过
2020-12-24 21:55:10,783 - [test_recharge.py-->line:99] - ERROR: 用例--【充值金额为0】---执行失败
2020-12-24 21:55:10,783 - [test_recharge.py-->line:100] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_recharge.py", line 92, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2020-12-24 21:55:10,931 - [test_recharge.py-->line:99] - ERROR: 用例--【充值金额为负数】---执行失败
2020-12-24 21:55:10,931 - [test_recharge.py-->line:100] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_recharge.py", line 93, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2020-12-24 21:55:11,098 - [test_recharge.py-->line:99] - ERROR: 用例--【充值金额为空】---执行失败
2020-12-24 21:55:11,099 - [test_recharge.py-->line:100] - ERROR: 1 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_recharge.py", line 92, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 2
2020-12-24 21:55:11,266 - [test_recharge.py-->line:99] - ERROR: 用例--【充值金额-3位小数】---执行失败
2020-12-24 21:55:11,266 - [test_recharge.py-->line:100] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_recharge.py", line 93, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2020-12-24 21:55:11,433 - [test_recharge.py-->line:99] - ERROR: 用例--【充值金额-大于50万】---执行失败
2020-12-24 21:55:11,433 - [test_recharge.py-->line:100] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_recharge.py", line 93, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2020-12-24 21:55:11,585 - [test_recharge.py-->line:103] - INFO: 用例--【充值金额-非数字】---执行通过
2020-12-24 21:55:11,637 - [test_register.py-->line:61] - INFO: 用例--【注册成功-带注册名】---执行通过
2020-12-24 21:55:11,701 - [test_register.py-->line:61] - INFO: 用例--【成功-不带用户名】---执行通过
2020-12-24 21:55:11,740 - [test_register.py-->line:61] - INFO: 用例--【不输入手机号】---执行通过
2020-12-24 21:55:11,792 - [test_register.py-->line:61] - INFO: 用例--【手机号长度10位】---执行通过
2020-12-24 21:55:11,843 - [test_register.py-->line:61] - INFO: 用例--【手机号长度12位】---执行通过
2020-12-24 21:55:11,892 - [test_register.py-->line:61] - INFO: 用例--【手机号含有非法字符】---执行通过
2020-12-24 21:55:11,944 - [test_register.py-->line:61] - INFO: 用例--【已注册过的手机号】---执行通过
2020-12-24 21:55:12,234 - [test_register.py-->line:61] - INFO: 用例--【密码7位】---执行通过
2020-12-24 21:55:12,272 - [test_register.py-->line:61] - INFO: 用例--【密码17位】---执行通过
2020-12-24 21:55:13,323 - [test_register.py-->line:61] - INFO: 用例--【不输入密码】---执行通过
2020-12-24 21:55:13,373 - [test_register.py-->line:61] - INFO: 用例--【注册名11位】---执行通过
2020-12-24 21:55:13,421 - [test_register.py-->line:61] - INFO: 用例--【类型输入非0，1内容】---执行通过
2020-12-24 21:55:13,470 - [test_register.py-->line:61] - INFO: 用例--【不输入类型】---执行通过
2020-12-24 21:55:13,565 - [test_withdraw.py-->line:82] - INFO: 用例--【提现成功-整数】---执行通过
2020-12-24 21:55:13,632 - [test_withdraw.py-->line:82] - INFO: 用例--【提现成功-1位小数】---执行通过
2020-12-24 21:55:13,694 - [test_withdraw.py-->line:82] - INFO: 用例--【提现成功-2位小数】---执行通过
2020-12-24 21:55:13,766 - [test_withdraw.py-->line:82] - INFO: 用例--【提现成功-50万】---执行通过
2020-12-24 21:55:13,826 - [test_withdraw.py-->line:82] - INFO: 用例--【会员id为空】---执行通过
2020-12-24 21:55:13,884 - [test_withdraw.py-->line:82] - INFO: 用例--【会员id为小数】---执行通过
2020-12-24 21:55:13,932 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额为0】---执行失败
2020-12-24 21:55:13,933 - [test_withdraw.py-->line:79] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_withdraw.py", line 75, in test_withdraw
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2020-12-24 21:55:13,996 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额为负数】---执行失败
2020-12-24 21:55:13,996 - [test_withdraw.py-->line:79] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_withdraw.py", line 76, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2020-12-24 21:55:14,036 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额为空】---执行失败
2020-12-24 21:55:14,037 - [test_withdraw.py-->line:79] - ERROR: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_withdraw.py", line 76, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^

2020-12-24 21:55:14,096 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额-3位小数】---执行失败
2020-12-24 21:55:14,096 - [test_withdraw.py-->line:79] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_withdraw.py", line 76, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2020-12-24 21:55:14,146 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额-大于50万】---执行失败
2020-12-24 21:55:14,146 - [test_withdraw.py-->line:79] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_withdraw.py", line 76, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2020-12-24 21:55:14,185 - [test_withdraw.py-->line:82] - INFO: 用例--【提现金额-非数字】---执行通过
2020-12-24 21:55:21,853 - [test_login.py-->line:48] - ERROR: 用例--【登录成功】---执行失败
2020-12-24 21:55:21,854 - [test_login.py-->line:49] - ERROR: {'code': 0, 'msg': 'OK'} not in {'code': 1001, 'msg': '账号信息错误', 'data': None, 'copyright': 'Copyright 柠檬班 © 2017-2020 湖南省零檬信息技术有限公司 All Rights Reserved'}
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_login.py", line 45, in test_login
    self.assertDictIn(expected,res)
  File "C:\project\python_35\py35_23day_project\testcases\test_login.py", line 61, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'msg': 'OK'} not in {'code': 1001, 'msg': '账号信息错误', 'data': None, 'copyright': 'Copyright 柠檬班 © 2017-2020 湖南省零檬信息技术有限公司 All Rights Reserved'}
2020-12-24 21:55:21,914 - [test_login.py-->line:53] - INFO: 用例--【手机号为空】---执行通过
2020-12-24 21:55:21,968 - [test_login.py-->line:53] - INFO: 用例--【密码为空】---执行通过
2020-12-24 21:55:22,008 - [test_login.py-->line:53] - INFO: 用例--【手机号未注册】---执行通过
2020-12-24 21:55:22,052 - [test_login.py-->line:53] - INFO: 用例--【密码错误】---执行通过
2020-12-24 21:55:22,106 - [test_login.py-->line:53] - INFO: 用例--【手机号格式错误】---执行通过
2020-12-24 21:55:22,299 - [test_recharge.py-->line:103] - INFO: 用例--【充值成功-整数】---执行通过
2020-12-24 21:55:22,438 - [test_recharge.py-->line:103] - INFO: 用例--【充值成功-1位小数】---执行通过
2020-12-24 21:55:22,584 - [test_recharge.py-->line:103] - INFO: 用例--【充值成功-2位小数】---执行通过
2020-12-24 21:55:22,712 - [test_recharge.py-->line:103] - INFO: 用例--【充值成功-50万】---执行通过
2020-12-24 21:55:22,837 - [test_recharge.py-->line:103] - INFO: 用例--【会员id为空】---执行通过
2020-12-24 21:55:22,977 - [test_recharge.py-->line:103] - INFO: 用例--【会员id为小数】---执行通过
2020-12-24 21:55:23,117 - [test_recharge.py-->line:99] - ERROR: 用例--【充值金额为0】---执行失败
2020-12-24 21:55:23,117 - [test_recharge.py-->line:100] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_recharge.py", line 92, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2020-12-24 21:55:23,238 - [test_recharge.py-->line:99] - ERROR: 用例--【充值金额为负数】---执行失败
2020-12-24 21:55:23,238 - [test_recharge.py-->line:100] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_recharge.py", line 93, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2020-12-24 21:55:23,360 - [test_recharge.py-->line:99] - ERROR: 用例--【充值金额为空】---执行失败
2020-12-24 21:55:23,360 - [test_recharge.py-->line:100] - ERROR: 1 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_recharge.py", line 92, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 2
2020-12-24 21:55:23,481 - [test_recharge.py-->line:99] - ERROR: 用例--【充值金额-3位小数】---执行失败
2020-12-24 21:55:23,482 - [test_recharge.py-->line:100] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_recharge.py", line 93, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2020-12-24 21:55:23,611 - [test_recharge.py-->line:99] - ERROR: 用例--【充值金额-大于50万】---执行失败
2020-12-24 21:55:23,612 - [test_recharge.py-->line:100] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_recharge.py", line 93, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2020-12-24 21:55:23,736 - [test_recharge.py-->line:103] - INFO: 用例--【充值金额-非数字】---执行通过
2020-12-24 21:55:23,805 - [test_register.py-->line:61] - INFO: 用例--【注册成功-带注册名】---执行通过
2020-12-24 21:55:23,859 - [test_register.py-->line:61] - INFO: 用例--【成功-不带用户名】---执行通过
2020-12-24 21:55:23,918 - [test_register.py-->line:61] - INFO: 用例--【不输入手机号】---执行通过
2020-12-24 21:55:23,961 - [test_register.py-->line:61] - INFO: 用例--【手机号长度10位】---执行通过
2020-12-24 21:55:24,007 - [test_register.py-->line:61] - INFO: 用例--【手机号长度12位】---执行通过
2020-12-24 21:55:24,059 - [test_register.py-->line:61] - INFO: 用例--【手机号含有非法字符】---执行通过
2020-12-24 21:55:24,102 - [test_register.py-->line:61] - INFO: 用例--【已注册过的手机号】---执行通过
2020-12-24 21:55:24,161 - [test_register.py-->line:61] - INFO: 用例--【密码7位】---执行通过
2020-12-24 21:55:24,217 - [test_register.py-->line:61] - INFO: 用例--【密码17位】---执行通过
2020-12-24 21:55:24,270 - [test_register.py-->line:61] - INFO: 用例--【不输入密码】---执行通过
2020-12-24 21:55:24,310 - [test_register.py-->line:61] - INFO: 用例--【注册名11位】---执行通过
2020-12-24 21:55:24,351 - [test_register.py-->line:61] - INFO: 用例--【类型输入非0，1内容】---执行通过
2020-12-24 21:55:24,407 - [test_register.py-->line:61] - INFO: 用例--【不输入类型】---执行通过
2020-12-24 21:55:24,516 - [test_withdraw.py-->line:82] - INFO: 用例--【提现成功-整数】---执行通过
2020-12-24 21:55:24,575 - [test_withdraw.py-->line:82] - INFO: 用例--【提现成功-1位小数】---执行通过
2020-12-24 21:55:24,639 - [test_withdraw.py-->line:82] - INFO: 用例--【提现成功-2位小数】---执行通过
2020-12-24 21:55:24,699 - [test_withdraw.py-->line:82] - INFO: 用例--【提现成功-50万】---执行通过
2020-12-24 21:55:24,743 - [test_withdraw.py-->line:82] - INFO: 用例--【会员id为空】---执行通过
2020-12-24 21:55:24,781 - [test_withdraw.py-->line:82] - INFO: 用例--【会员id为小数】---执行通过
2020-12-24 21:55:24,842 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额为0】---执行失败
2020-12-24 21:55:24,842 - [test_withdraw.py-->line:79] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_withdraw.py", line 75, in test_withdraw
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2020-12-24 21:55:24,896 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额为负数】---执行失败
2020-12-24 21:55:24,896 - [test_withdraw.py-->line:79] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_withdraw.py", line 76, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2020-12-24 21:55:24,951 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额为空】---执行失败
2020-12-24 21:55:24,951 - [test_withdraw.py-->line:79] - ERROR: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_withdraw.py", line 76, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^

2020-12-24 21:55:25,002 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额-3位小数】---执行失败
2020-12-24 21:55:25,002 - [test_withdraw.py-->line:79] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_withdraw.py", line 76, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2020-12-24 21:55:25,046 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额-大于50万】---执行失败
2020-12-24 21:55:25,046 - [test_withdraw.py-->line:79] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_withdraw.py", line 76, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2020-12-24 21:55:25,109 - [test_withdraw.py-->line:82] - INFO: 用例--【提现金额-非数字】---执行通过
2020-12-24 21:57:42,864 - [test_login.py-->line:48] - ERROR: 用例--【登录成功】---执行失败
2020-12-24 21:57:42,865 - [test_login.py-->line:49] - ERROR: {'code': 0, 'msg': 'OK'} not in {'code': 1001, 'msg': '账号信息错误', 'data': None, 'copyright': 'Copyright 柠檬班 © 2017-2020 湖南省零檬信息技术有限公司 All Rights Reserved'}
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_login.py", line 45, in test_login
    self.assertDictIn(expected,res)
  File "C:\project\python_35\py35_23day_project\testcases\test_login.py", line 61, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'msg': 'OK'} not in {'code': 1001, 'msg': '账号信息错误', 'data': None, 'copyright': 'Copyright 柠檬班 © 2017-2020 湖南省零檬信息技术有限公司 All Rights Reserved'}
2020-12-24 21:57:42,905 - [test_login.py-->line:53] - INFO: 用例--【手机号为空】---执行通过
2020-12-24 21:57:42,957 - [test_login.py-->line:53] - INFO: 用例--【密码为空】---执行通过
2020-12-24 21:57:42,995 - [test_login.py-->line:53] - INFO: 用例--【手机号未注册】---执行通过
2020-12-24 21:57:43,047 - [test_login.py-->line:53] - INFO: 用例--【密码错误】---执行通过
2020-12-24 21:57:43,100 - [test_login.py-->line:53] - INFO: 用例--【手机号格式错误】---执行通过
2020-12-24 21:57:44,323 - [test_recharge.py-->line:101] - ERROR: 用例--【充值金额为0】---执行失败
2020-12-24 21:57:44,324 - [test_recharge.py-->line:102] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_recharge.py", line 94, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2020-12-24 21:57:44,473 - [test_recharge.py-->line:101] - ERROR: 用例--【充值金额为负数】---执行失败
2020-12-24 21:57:44,473 - [test_recharge.py-->line:102] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_recharge.py", line 95, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2020-12-24 21:57:44,630 - [test_recharge.py-->line:101] - ERROR: 用例--【充值金额为空】---执行失败
2020-12-24 21:57:44,630 - [test_recharge.py-->line:102] - ERROR: 1 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_recharge.py", line 94, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 2
2020-12-24 21:57:44,789 - [test_recharge.py-->line:101] - ERROR: 用例--【充值金额-3位小数】---执行失败
2020-12-24 21:57:44,789 - [test_recharge.py-->line:102] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_recharge.py", line 95, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2020-12-24 21:57:44,950 - [test_recharge.py-->line:101] - ERROR: 用例--【充值金额-大于50万】---执行失败
2020-12-24 21:57:44,951 - [test_recharge.py-->line:102] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_recharge.py", line 95, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2020-12-24 21:57:45,162 - [test_register.py-->line:61] - INFO: 用例--【注册成功-带注册名】---执行通过
2020-12-24 21:57:45,208 - [test_register.py-->line:61] - INFO: 用例--【成功-不带用户名】---执行通过
2020-12-24 21:57:45,256 - [test_register.py-->line:61] - INFO: 用例--【不输入手机号】---执行通过
2020-12-24 21:57:45,307 - [test_register.py-->line:61] - INFO: 用例--【手机号长度10位】---执行通过
2020-12-24 21:57:45,365 - [test_register.py-->line:61] - INFO: 用例--【手机号长度12位】---执行通过
2020-12-24 21:57:45,431 - [test_register.py-->line:61] - INFO: 用例--【手机号含有非法字符】---执行通过
2020-12-24 21:57:45,474 - [test_register.py-->line:61] - INFO: 用例--【已注册过的手机号】---执行通过
2020-12-24 21:57:45,513 - [test_register.py-->line:61] - INFO: 用例--【密码7位】---执行通过
2020-12-24 21:57:45,578 - [test_register.py-->line:61] - INFO: 用例--【密码17位】---执行通过
2020-12-24 21:57:45,629 - [test_register.py-->line:61] - INFO: 用例--【不输入密码】---执行通过
2020-12-24 21:57:45,703 - [test_register.py-->line:61] - INFO: 用例--【注册名11位】---执行通过
2020-12-24 21:57:45,749 - [test_register.py-->line:61] - INFO: 用例--【类型输入非0，1内容】---执行通过
2020-12-24 21:57:45,805 - [test_register.py-->line:61] - INFO: 用例--【不输入类型】---执行通过
2020-12-24 21:57:45,915 - [test_withdraw.py-->line:82] - INFO: 用例--【提现成功-整数】---执行通过
2020-12-24 21:57:45,999 - [test_withdraw.py-->line:82] - INFO: 用例--【提现成功-1位小数】---执行通过
2020-12-24 21:57:46,045 - [test_withdraw.py-->line:82] - INFO: 用例--【提现成功-2位小数】---执行通过
2020-12-24 21:57:46,109 - [test_withdraw.py-->line:82] - INFO: 用例--【提现成功-50万】---执行通过
2020-12-24 21:57:46,157 - [test_withdraw.py-->line:82] - INFO: 用例--【会员id为空】---执行通过
2020-12-24 21:57:46,205 - [test_withdraw.py-->line:82] - INFO: 用例--【会员id为小数】---执行通过
2020-12-24 21:57:46,263 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额为0】---执行失败
2020-12-24 21:57:46,264 - [test_withdraw.py-->line:79] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_withdraw.py", line 75, in test_withdraw
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2020-12-24 21:57:46,339 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额为负数】---执行失败
2020-12-24 21:57:46,340 - [test_withdraw.py-->line:79] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_withdraw.py", line 76, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2020-12-24 21:57:46,382 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额为空】---执行失败
2020-12-24 21:57:46,383 - [test_withdraw.py-->line:79] - ERROR: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_withdraw.py", line 76, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^

2020-12-24 21:57:46,430 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额-3位小数】---执行失败
2020-12-24 21:57:46,431 - [test_withdraw.py-->line:79] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_withdraw.py", line 76, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2020-12-24 21:57:46,480 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额-大于50万】---执行失败
2020-12-24 21:57:46,481 - [test_withdraw.py-->line:79] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_withdraw.py", line 76, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2020-12-24 21:57:46,551 - [test_withdraw.py-->line:82] - INFO: 用例--【提现金额-非数字】---执行通过
2020-12-24 21:58:54,189 - [test_login.py-->line:48] - ERROR: 用例--【登录成功】---执行失败
2020-12-24 21:58:54,190 - [test_login.py-->line:49] - ERROR: {'code': 0, 'msg': 'OK'} not in {'code': 1001, 'msg': '账号信息错误', 'data': None, 'copyright': 'Copyright 柠檬班 © 2017-2020 湖南省零檬信息技术有限公司 All Rights Reserved'}
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_login.py", line 45, in test_login
    self.assertDictIn(expected,res)
  File "C:\project\python_35\py35_23day_project\testcases\test_login.py", line 61, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'msg': 'OK'} not in {'code': 1001, 'msg': '账号信息错误', 'data': None, 'copyright': 'Copyright 柠檬班 © 2017-2020 湖南省零檬信息技术有限公司 All Rights Reserved'}
2020-12-24 21:58:54,246 - [test_login.py-->line:53] - INFO: 用例--【手机号为空】---执行通过
2020-12-24 21:58:54,304 - [test_login.py-->line:53] - INFO: 用例--【密码为空】---执行通过
2020-12-24 21:58:54,355 - [test_login.py-->line:53] - INFO: 用例--【手机号未注册】---执行通过
2020-12-24 21:58:54,407 - [test_login.py-->line:53] - INFO: 用例--【密码错误】---执行通过
2020-12-24 21:58:54,458 - [test_login.py-->line:53] - INFO: 用例--【手机号格式错误】---执行通过
2020-12-24 21:58:54,673 - [test_recharge.py-->line:105] - INFO: 用例--【充值成功-整数】---执行通过
2020-12-24 21:58:54,812 - [test_recharge.py-->line:101] - ERROR: 用例--【充值成功-1位小数】---执行失败
2020-12-24 21:58:54,812 - [test_recharge.py-->line:102] - ERROR: Decimal('600.10') != 600.1
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_recharge.py", line 97, in test_recharge
    self.assertEqual(end_amount-start_amount,params['amount'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: Decimal('600.10') != 600.1
2020-12-24 21:58:54,977 - [test_recharge.py-->line:101] - ERROR: 用例--【充值成功-2位小数】---执行失败
2020-12-24 21:58:54,977 - [test_recharge.py-->line:102] - ERROR: Decimal('600.22') != 600.22
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_recharge.py", line 97, in test_recharge
    self.assertEqual(end_amount-start_amount,params['amount'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: Decimal('600.22') != 600.22
2020-12-24 21:58:55,133 - [test_recharge.py-->line:105] - INFO: 用例--【充值成功-50万】---执行通过
2020-12-24 21:58:55,287 - [test_recharge.py-->line:101] - ERROR: 用例--【会员id为空】---执行失败
2020-12-24 21:58:55,287 - [test_recharge.py-->line:102] - ERROR: Decimal('0.00') != 600
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_recharge.py", line 97, in test_recharge
    self.assertEqual(end_amount-start_amount,params['amount'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: Decimal('0.00') != 600
2020-12-24 21:58:55,437 - [test_recharge.py-->line:101] - ERROR: 用例--【会员id为小数】---执行失败
2020-12-24 21:58:55,437 - [test_recharge.py-->line:102] - ERROR: Decimal('0.00') != 600
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_recharge.py", line 97, in test_recharge
    self.assertEqual(end_amount-start_amount,params['amount'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: Decimal('0.00') != 600
2020-12-24 21:58:55,590 - [test_recharge.py-->line:101] - ERROR: 用例--【充值金额为0】---执行失败
2020-12-24 21:58:55,590 - [test_recharge.py-->line:102] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_recharge.py", line 94, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2020-12-24 21:58:55,746 - [test_recharge.py-->line:101] - ERROR: 用例--【充值金额为负数】---执行失败
2020-12-24 21:58:55,747 - [test_recharge.py-->line:102] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_recharge.py", line 95, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2020-12-24 21:58:55,899 - [test_recharge.py-->line:101] - ERROR: 用例--【充值金额为空】---执行失败
2020-12-24 21:58:55,899 - [test_recharge.py-->line:102] - ERROR: 1 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_recharge.py", line 94, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 2
2020-12-24 21:58:56,035 - [test_recharge.py-->line:101] - ERROR: 用例--【充值金额-3位小数】---执行失败
2020-12-24 21:58:56,035 - [test_recharge.py-->line:102] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_recharge.py", line 95, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2020-12-24 21:58:56,174 - [test_recharge.py-->line:101] - ERROR: 用例--【充值金额-大于50万】---执行失败
2020-12-24 21:58:56,174 - [test_recharge.py-->line:102] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_recharge.py", line 95, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2020-12-24 21:58:56,331 - [test_recharge.py-->line:101] - ERROR: 用例--【充值金额-非数字】---执行失败
2020-12-24 21:58:56,331 - [test_recharge.py-->line:102] - ERROR: Decimal('0.00') != '5万'
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_recharge.py", line 97, in test_recharge
    self.assertEqual(end_amount-start_amount,params['amount'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: Decimal('0.00') != '5万'
2020-12-24 21:58:56,378 - [test_register.py-->line:61] - INFO: 用例--【注册成功-带注册名】---执行通过
2020-12-24 21:58:56,431 - [test_register.py-->line:61] - INFO: 用例--【成功-不带用户名】---执行通过
2020-12-24 21:58:56,489 - [test_register.py-->line:61] - INFO: 用例--【不输入手机号】---执行通过
2020-12-24 21:58:56,544 - [test_register.py-->line:61] - INFO: 用例--【手机号长度10位】---执行通过
2020-12-24 21:58:56,584 - [test_register.py-->line:61] - INFO: 用例--【手机号长度12位】---执行通过
2020-12-24 21:58:56,619 - [test_register.py-->line:61] - INFO: 用例--【手机号含有非法字符】---执行通过
2020-12-24 21:58:56,666 - [test_register.py-->line:61] - INFO: 用例--【已注册过的手机号】---执行通过
2020-12-24 21:58:56,711 - [test_register.py-->line:61] - INFO: 用例--【密码7位】---执行通过
2020-12-24 21:58:56,770 - [test_register.py-->line:61] - INFO: 用例--【密码17位】---执行通过
2020-12-24 21:58:56,808 - [test_register.py-->line:61] - INFO: 用例--【不输入密码】---执行通过
2020-12-24 21:58:56,866 - [test_register.py-->line:61] - INFO: 用例--【注册名11位】---执行通过
2020-12-24 21:58:56,932 - [test_register.py-->line:61] - INFO: 用例--【类型输入非0，1内容】---执行通过
2020-12-24 21:58:56,976 - [test_register.py-->line:61] - INFO: 用例--【不输入类型】---执行通过
2020-12-24 21:58:57,097 - [test_withdraw.py-->line:82] - INFO: 用例--【提现成功-整数】---执行通过
2020-12-24 21:58:57,162 - [test_withdraw.py-->line:82] - INFO: 用例--【提现成功-1位小数】---执行通过
2020-12-24 21:58:57,206 - [test_withdraw.py-->line:82] - INFO: 用例--【提现成功-2位小数】---执行通过
2020-12-24 21:58:57,266 - [test_withdraw.py-->line:82] - INFO: 用例--【提现成功-50万】---执行通过
2020-12-24 21:58:57,313 - [test_withdraw.py-->line:82] - INFO: 用例--【会员id为空】---执行通过
2020-12-24 21:58:57,373 - [test_withdraw.py-->line:82] - INFO: 用例--【会员id为小数】---执行通过
2020-12-24 21:58:57,432 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额为0】---执行失败
2020-12-24 21:58:57,432 - [test_withdraw.py-->line:79] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_withdraw.py", line 75, in test_withdraw
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2020-12-24 21:58:57,473 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额为负数】---执行失败
2020-12-24 21:58:57,473 - [test_withdraw.py-->line:79] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_withdraw.py", line 76, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2020-12-24 21:58:57,527 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额为空】---执行失败
2020-12-24 21:58:57,528 - [test_withdraw.py-->line:79] - ERROR: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_withdraw.py", line 76, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^

2020-12-24 21:58:57,571 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额-3位小数】---执行失败
2020-12-24 21:58:57,572 - [test_withdraw.py-->line:79] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_withdraw.py", line 76, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2020-12-24 21:58:57,627 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额-大于50万】---执行失败
2020-12-24 21:58:57,627 - [test_withdraw.py-->line:79] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_withdraw.py", line 76, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2020-12-24 21:58:57,685 - [test_withdraw.py-->line:82] - INFO: 用例--【提现金额-非数字】---执行通过
2020-12-24 22:03:48,247 - [test_login.py-->line:48] - ERROR: 用例--【登录成功】---执行失败
2020-12-24 22:03:48,247 - [test_login.py-->line:49] - ERROR: {'code': 0, 'msg': 'OK'} not in {'code': 1001, 'msg': '账号信息错误', 'data': None, 'copyright': 'Copyright 柠檬班 © 2017-2020 湖南省零檬信息技术有限公司 All Rights Reserved'}
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_login.py", line 45, in test_login
    self.assertDictIn(expected,res)
  File "C:\project\python_35\py35_23day_project\testcases\test_login.py", line 61, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'msg': 'OK'} not in {'code': 1001, 'msg': '账号信息错误', 'data': None, 'copyright': 'Copyright 柠檬班 © 2017-2020 湖南省零檬信息技术有限公司 All Rights Reserved'}
2020-12-24 22:03:48,288 - [test_login.py-->line:53] - INFO: 用例--【手机号为空】---执行通过
2020-12-24 22:03:48,347 - [test_login.py-->line:53] - INFO: 用例--【密码为空】---执行通过
2020-12-24 22:03:48,399 - [test_login.py-->line:53] - INFO: 用例--【手机号未注册】---执行通过
2020-12-24 22:03:48,443 - [test_login.py-->line:53] - INFO: 用例--【密码错误】---执行通过
2020-12-24 22:03:48,487 - [test_login.py-->line:53] - INFO: 用例--【手机号格式错误】---执行通过
2020-12-24 22:03:48,664 - [test_recharge.py-->line:109] - INFO: 用例--【充值成功-整数】---执行通过
2020-12-24 22:03:48,798 - [test_recharge.py-->line:109] - INFO: 用例--【充值成功-1位小数】---执行通过
2020-12-24 22:03:48,939 - [test_recharge.py-->line:109] - INFO: 用例--【充值成功-2位小数】---执行通过
2020-12-24 22:03:49,060 - [test_recharge.py-->line:109] - INFO: 用例--【充值成功-50万】---执行通过
2020-12-24 22:03:49,177 - [test_recharge.py-->line:109] - INFO: 用例--【会员id为空】---执行通过
2020-12-24 22:03:49,303 - [test_recharge.py-->line:109] - INFO: 用例--【会员id为小数】---执行通过
2020-12-24 22:03:49,431 - [test_recharge.py-->line:105] - ERROR: 用例--【充值金额为0】---执行失败
2020-12-24 22:03:49,431 - [test_recharge.py-->line:106] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_recharge.py", line 94, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2020-12-24 22:03:49,561 - [test_recharge.py-->line:105] - ERROR: 用例--【充值金额为负数】---执行失败
2020-12-24 22:03:49,561 - [test_recharge.py-->line:106] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_recharge.py", line 95, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2020-12-24 22:03:49,693 - [test_recharge.py-->line:105] - ERROR: 用例--【充值金额为空】---执行失败
2020-12-24 22:03:49,693 - [test_recharge.py-->line:106] - ERROR: 1 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_recharge.py", line 94, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 2
2020-12-24 22:03:49,827 - [test_recharge.py-->line:105] - ERROR: 用例--【充值金额-3位小数】---执行失败
2020-12-24 22:03:49,828 - [test_recharge.py-->line:106] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_recharge.py", line 95, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2020-12-24 22:03:49,952 - [test_recharge.py-->line:105] - ERROR: 用例--【充值金额-大于50万】---执行失败
2020-12-24 22:03:49,952 - [test_recharge.py-->line:106] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_recharge.py", line 95, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2020-12-24 22:03:50,077 - [test_recharge.py-->line:109] - INFO: 用例--【充值金额-非数字】---执行通过
2020-12-24 22:03:50,129 - [test_register.py-->line:61] - INFO: 用例--【注册成功-带注册名】---执行通过
2020-12-24 22:03:50,185 - [test_register.py-->line:61] - INFO: 用例--【成功-不带用户名】---执行通过
2020-12-24 22:03:50,226 - [test_register.py-->line:61] - INFO: 用例--【不输入手机号】---执行通过
2020-12-24 22:03:50,265 - [test_register.py-->line:61] - INFO: 用例--【手机号长度10位】---执行通过
2020-12-24 22:03:50,305 - [test_register.py-->line:61] - INFO: 用例--【手机号长度12位】---执行通过
2020-12-24 22:03:50,360 - [test_register.py-->line:61] - INFO: 用例--【手机号含有非法字符】---执行通过
2020-12-24 22:03:50,403 - [test_register.py-->line:61] - INFO: 用例--【已注册过的手机号】---执行通过
2020-12-24 22:03:50,459 - [test_register.py-->line:61] - INFO: 用例--【密码7位】---执行通过
2020-12-24 22:03:50,512 - [test_register.py-->line:61] - INFO: 用例--【密码17位】---执行通过
2020-12-24 22:03:50,566 - [test_register.py-->line:61] - INFO: 用例--【不输入密码】---执行通过
2020-12-24 22:03:50,610 - [test_register.py-->line:61] - INFO: 用例--【注册名11位】---执行通过
2020-12-24 22:03:50,680 - [test_register.py-->line:61] - INFO: 用例--【类型输入非0，1内容】---执行通过
2020-12-24 22:03:50,736 - [test_register.py-->line:61] - INFO: 用例--【不输入类型】---执行通过
2020-12-24 22:03:50,851 - [test_withdraw.py-->line:82] - INFO: 用例--【提现成功-整数】---执行通过
2020-12-24 22:03:50,909 - [test_withdraw.py-->line:82] - INFO: 用例--【提现成功-1位小数】---执行通过
2020-12-24 22:03:50,964 - [test_withdraw.py-->line:82] - INFO: 用例--【提现成功-2位小数】---执行通过
2020-12-24 22:03:51,011 - [test_withdraw.py-->line:82] - INFO: 用例--【提现成功-50万】---执行通过
2020-12-24 22:03:51,064 - [test_withdraw.py-->line:82] - INFO: 用例--【会员id为空】---执行通过
2020-12-24 22:03:51,105 - [test_withdraw.py-->line:82] - INFO: 用例--【会员id为小数】---执行通过
2020-12-24 22:03:51,147 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额为0】---执行失败
2020-12-24 22:03:51,147 - [test_withdraw.py-->line:79] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_withdraw.py", line 75, in test_withdraw
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2020-12-24 22:03:51,203 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额为负数】---执行失败
2020-12-24 22:03:51,203 - [test_withdraw.py-->line:79] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_withdraw.py", line 76, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2020-12-24 22:03:51,260 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额为空】---执行失败
2020-12-24 22:03:51,261 - [test_withdraw.py-->line:79] - ERROR: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_withdraw.py", line 76, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^

2020-12-24 22:03:51,305 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额-3位小数】---执行失败
2020-12-24 22:03:51,305 - [test_withdraw.py-->line:79] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_withdraw.py", line 76, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2020-12-24 22:03:51,349 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额-大于50万】---执行失败
2020-12-24 22:03:51,350 - [test_withdraw.py-->line:79] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_23day_project\testcases\test_withdraw.py", line 76, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2020-12-24 22:03:51,403 - [test_withdraw.py-->line:82] - INFO: 用例--【提现金额-非数字】---执行通过
2020-12-26 09:44:00,331 - [test_login.py-->line:53] - INFO: 用例--【登录成功】---执行通过
2020-12-26 09:44:00,431 - [test_login.py-->line:53] - INFO: 用例--【手机号为空】---执行通过
2020-12-26 09:44:00,510 - [test_login.py-->line:53] - INFO: 用例--【密码为空】---执行通过
2020-12-26 09:44:00,610 - [test_login.py-->line:53] - INFO: 用例--【手机号未注册】---执行通过
2020-12-26 09:44:00,688 - [test_login.py-->line:53] - INFO: 用例--【密码错误】---执行通过
2020-12-26 09:44:00,769 - [test_login.py-->line:53] - INFO: 用例--【手机号格式错误】---执行通过
2020-12-26 09:46:29,767 - [test_withdraw.py-->line:82] - INFO: 用例--【提现成功-整数】---执行通过
2020-12-26 09:46:29,841 - [test_withdraw.py-->line:82] - INFO: 用例--【提现成功-1位小数】---执行通过
2020-12-26 09:46:29,906 - [test_withdraw.py-->line:82] - INFO: 用例--【提现成功-2位小数】---执行通过
2020-12-26 09:46:29,985 - [test_withdraw.py-->line:82] - INFO: 用例--【提现成功-50万】---执行通过
2020-12-26 09:46:30,035 - [test_withdraw.py-->line:82] - INFO: 用例--【会员id为空】---执行通过
2020-12-26 09:46:30,097 - [test_withdraw.py-->line:82] - INFO: 用例--【会员id为小数】---执行通过
2020-12-26 09:46:30,172 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额为0】---执行失败
2020-12-26 09:46:30,172 - [test_withdraw.py-->line:79] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_24day_project\testcases\test_withdraw.py", line 75, in test_withdraw
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2020-12-26 09:46:30,246 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额为负数】---执行失败
2020-12-26 09:46:30,247 - [test_withdraw.py-->line:79] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_24day_project\testcases\test_withdraw.py", line 76, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2020-12-26 09:46:30,312 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额为空】---执行失败
2020-12-26 09:46:30,312 - [test_withdraw.py-->line:79] - ERROR: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_24day_project\testcases\test_withdraw.py", line 76, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^

2020-12-26 09:46:30,390 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额-3位小数】---执行失败
2020-12-26 09:46:30,390 - [test_withdraw.py-->line:79] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_24day_project\testcases\test_withdraw.py", line 76, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2020-12-26 09:46:30,452 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额-大于50万】---执行失败
2020-12-26 09:46:30,452 - [test_withdraw.py-->line:79] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_24day_project\testcases\test_withdraw.py", line 76, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2020-12-26 09:46:30,527 - [test_withdraw.py-->line:82] - INFO: 用例--【提现金额-非数字】---执行通过
2020-12-26 09:48:10,024 - [test_login.py-->line:53] - INFO: 用例--【登录成功】---执行通过
2020-12-26 09:48:10,090 - [test_login.py-->line:53] - INFO: 用例--【手机号为空】---执行通过
2020-12-26 09:48:10,158 - [test_login.py-->line:53] - INFO: 用例--【密码为空】---执行通过
2020-12-26 09:48:10,233 - [test_login.py-->line:53] - INFO: 用例--【手机号未注册】---执行通过
2020-12-26 09:48:10,303 - [test_login.py-->line:53] - INFO: 用例--【密码错误】---执行通过
2020-12-26 09:48:10,376 - [test_login.py-->line:53] - INFO: 用例--【手机号格式错误】---执行通过
2020-12-26 09:48:11,386 - [test_register.py-->line:65] - INFO: 用例--【注册成功-带注册名】---执行通过
2020-12-26 09:48:11,504 - [test_register.py-->line:65] - INFO: 用例--【成功-不带用户名】---执行通过
2020-12-26 09:48:11,619 - [test_register.py-->line:65] - INFO: 用例--【不输入手机号】---执行通过
2020-12-26 09:48:11,737 - [test_register.py-->line:65] - INFO: 用例--【手机号长度10位】---执行通过
2020-12-26 09:48:11,858 - [test_register.py-->line:65] - INFO: 用例--【手机号长度12位】---执行通过
2020-12-26 09:48:11,971 - [test_register.py-->line:65] - INFO: 用例--【手机号含有非法字符】---执行通过
2020-12-26 09:48:12,085 - [test_register.py-->line:65] - INFO: 用例--【已注册过的手机号】---执行通过
2020-12-26 09:48:12,204 - [test_register.py-->line:65] - INFO: 用例--【密码7位】---执行通过
2020-12-26 09:48:12,332 - [test_register.py-->line:65] - INFO: 用例--【密码17位】---执行通过
2020-12-26 09:48:12,454 - [test_register.py-->line:65] - INFO: 用例--【不输入密码】---执行通过
2020-12-26 09:48:12,577 - [test_register.py-->line:65] - INFO: 用例--【注册名11位】---执行通过
2020-12-26 09:48:12,706 - [test_register.py-->line:65] - INFO: 用例--【类型输入非0，1内容】---执行通过
2020-12-26 09:48:12,851 - [test_register.py-->line:65] - INFO: 用例--【不输入类型】---执行通过
2020-12-26 09:48:12,998 - [test_withdraw.py-->line:82] - INFO: 用例--【提现成功-整数】---执行通过
2020-12-26 09:48:13,065 - [test_withdraw.py-->line:82] - INFO: 用例--【提现成功-1位小数】---执行通过
2020-12-26 09:48:13,148 - [test_withdraw.py-->line:82] - INFO: 用例--【提现成功-2位小数】---执行通过
2020-12-26 09:48:13,199 - [test_withdraw.py-->line:82] - INFO: 用例--【提现成功-50万】---执行通过
2020-12-26 09:48:13,275 - [test_withdraw.py-->line:82] - INFO: 用例--【会员id为空】---执行通过
2020-12-26 09:48:13,337 - [test_withdraw.py-->line:82] - INFO: 用例--【会员id为小数】---执行通过
2020-12-26 09:48:13,405 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额为0】---执行失败
2020-12-26 09:48:13,407 - [test_withdraw.py-->line:79] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_24day_project\testcases\test_withdraw.py", line 75, in test_withdraw
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2020-12-26 09:48:13,493 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额为负数】---执行失败
2020-12-26 09:48:13,493 - [test_withdraw.py-->line:79] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_24day_project\testcases\test_withdraw.py", line 76, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2020-12-26 09:48:13,558 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额为空】---执行失败
2020-12-26 09:48:13,559 - [test_withdraw.py-->line:79] - ERROR: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_24day_project\testcases\test_withdraw.py", line 76, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^

2020-12-26 09:48:13,627 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额-3位小数】---执行失败
2020-12-26 09:48:13,627 - [test_withdraw.py-->line:79] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_24day_project\testcases\test_withdraw.py", line 76, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2020-12-26 09:48:13,689 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额-大于50万】---执行失败
2020-12-26 09:48:13,689 - [test_withdraw.py-->line:79] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_24day_project\testcases\test_withdraw.py", line 76, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2020-12-26 09:48:13,746 - [test_withdraw.py-->line:82] - INFO: 用例--【提现金额-非数字】---执行通过
2020-12-26 09:52:49,921 - [test_login.py-->line:53] - INFO: 用例--【登录成功】---执行通过
2020-12-26 09:52:49,984 - [test_login.py-->line:53] - INFO: 用例--【手机号为空】---执行通过
2020-12-26 09:52:50,038 - [test_login.py-->line:53] - INFO: 用例--【密码为空】---执行通过
2020-12-26 09:52:50,109 - [test_login.py-->line:53] - INFO: 用例--【手机号未注册】---执行通过
2020-12-26 09:52:50,186 - [test_login.py-->line:53] - INFO: 用例--【密码错误】---执行通过
2020-12-26 09:52:50,256 - [test_login.py-->line:53] - INFO: 用例--【手机号格式错误】---执行通过
2020-12-26 09:52:51,170 - [test_register.py-->line:72] - INFO: 用例--【注册成功-带注册名】---执行通过
2020-12-26 09:52:51,305 - [test_register.py-->line:72] - INFO: 用例--【成功-不带用户名】---执行通过
2020-12-26 09:52:51,414 - [test_register.py-->line:72] - INFO: 用例--【不输入手机号】---执行通过
2020-12-26 09:52:51,543 - [test_register.py-->line:72] - INFO: 用例--【手机号长度10位】---执行通过
2020-12-26 09:52:51,671 - [test_register.py-->line:72] - INFO: 用例--【手机号长度12位】---执行通过
2020-12-26 09:52:51,790 - [test_register.py-->line:72] - INFO: 用例--【手机号含有非法字符】---执行通过
2020-12-26 09:52:51,910 - [test_register.py-->line:72] - INFO: 用例--【已注册过的手机号】---执行通过
2020-12-26 09:52:52,037 - [test_register.py-->line:72] - INFO: 用例--【密码7位】---执行通过
2020-12-26 09:52:52,150 - [test_register.py-->line:72] - INFO: 用例--【密码17位】---执行通过
2020-12-26 09:52:52,271 - [test_register.py-->line:72] - INFO: 用例--【不输入密码】---执行通过
2020-12-26 09:52:52,404 - [test_register.py-->line:72] - INFO: 用例--【注册名11位】---执行通过
2020-12-26 09:52:52,516 - [test_register.py-->line:72] - INFO: 用例--【类型输入非0，1内容】---执行通过
2020-12-26 09:52:52,654 - [test_register.py-->line:72] - INFO: 用例--【不输入类型】---执行通过
2020-12-26 09:52:52,773 - [test_withdraw.py-->line:82] - INFO: 用例--【提现成功-整数】---执行通过
2020-12-26 09:52:52,837 - [test_withdraw.py-->line:82] - INFO: 用例--【提现成功-1位小数】---执行通过
2020-12-26 09:52:52,906 - [test_withdraw.py-->line:82] - INFO: 用例--【提现成功-2位小数】---执行通过
2020-12-26 09:52:52,977 - [test_withdraw.py-->line:82] - INFO: 用例--【提现成功-50万】---执行通过
2020-12-26 09:52:53,038 - [test_withdraw.py-->line:82] - INFO: 用例--【会员id为空】---执行通过
2020-12-26 09:52:53,103 - [test_withdraw.py-->line:82] - INFO: 用例--【会员id为小数】---执行通过
2020-12-26 09:52:53,178 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额为0】---执行失败
2020-12-26 09:52:53,178 - [test_withdraw.py-->line:79] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_24day_project\testcases\test_withdraw.py", line 75, in test_withdraw
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2020-12-26 09:52:53,243 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额为负数】---执行失败
2020-12-26 09:52:53,243 - [test_withdraw.py-->line:79] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_24day_project\testcases\test_withdraw.py", line 76, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2020-12-26 09:52:53,312 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额为空】---执行失败
2020-12-26 09:52:53,312 - [test_withdraw.py-->line:79] - ERROR: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_24day_project\testcases\test_withdraw.py", line 76, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^

2020-12-26 09:52:53,369 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额-3位小数】---执行失败
2020-12-26 09:52:53,370 - [test_withdraw.py-->line:79] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_24day_project\testcases\test_withdraw.py", line 76, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2020-12-26 09:52:53,424 - [test_withdraw.py-->line:78] - ERROR: 用例--【提现金额-大于50万】---执行失败
2020-12-26 09:52:53,425 - [test_withdraw.py-->line:79] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_24day_project\testcases\test_withdraw.py", line 76, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2020-12-26 09:52:53,502 - [test_withdraw.py-->line:82] - INFO: 用例--【提现金额-非数字】---执行通过
2020-12-26 10:00:59,497 - [test_recharge.py-->line:109] - INFO: 用例--【充值成功-整数】---执行通过
2020-12-26 10:00:59,699 - [test_recharge.py-->line:109] - INFO: 用例--【充值成功-1位小数】---执行通过
2020-12-26 10:00:59,923 - [test_recharge.py-->line:109] - INFO: 用例--【充值成功-2位小数】---执行通过
2020-12-26 10:01:00,136 - [test_recharge.py-->line:109] - INFO: 用例--【充值成功-50万】---执行通过
2020-12-26 10:01:00,334 - [test_recharge.py-->line:109] - INFO: 用例--【会员id为空】---执行通过
2020-12-26 10:01:00,538 - [test_recharge.py-->line:109] - INFO: 用例--【会员id为小数】---执行通过
2020-12-26 10:01:00,747 - [test_recharge.py-->line:105] - ERROR: 用例--【充值金额为0】---执行失败
2020-12-26 10:01:00,748 - [test_recharge.py-->line:106] - ERROR:  :: 2 != 0
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\project\python_35\py35_24day_project\testcases\test_recharge.py", line 94, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 2 != 0
2020-12-26 10:01:01,119 - [test_recharge.py-->line:105] - ERROR: 用例--【充值金额为负数】---执行失败
2020-12-26 10:01:01,120 - [test_recharge.py-->line:106] - ERROR:  :: 金额必须大于0并且小于或者等于500000 != 余额必须大于0并且小于或者等于500000
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\project\python_35\py35_24day_project\testcases\test_recharge.py", line 95, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 金额必须大于0并且小于或者等于500000 != 余额必须大于0并且小于或者等于500000
2020-12-26 10:01:01,404 - [test_recharge.py-->line:105] - ERROR: 用例--【充值金额为空】---执行失败
2020-12-26 10:01:01,404 - [test_recharge.py-->line:106] - ERROR:  :: 1 != 2
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 2

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\project\python_35\py35_24day_project\testcases\test_recharge.py", line 94, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 1 != 2
2020-12-26 10:01:01,661 - [test_recharge.py-->line:105] - ERROR: 用例--【充值金额-3位小数】---执行失败
2020-12-26 10:01:01,662 - [test_recharge.py-->line:106] - ERROR:  :: 金额小数超过两位 != 余额小数超过两位
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\project\python_35\py35_24day_project\testcases\test_recharge.py", line 95, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 金额小数超过两位 != 余额小数超过两位
2020-12-26 10:01:01,994 - [test_recharge.py-->line:105] - ERROR: 用例--【充值金额-大于50万】---执行失败
2020-12-26 10:01:01,994 - [test_recharge.py-->line:106] - ERROR:  :: 金额必须大于0并且小于或者等于500000 != 余额必须大于0并且小于或者等于500000
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\project\python_35\py35_24day_project\testcases\test_recharge.py", line 95, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 金额必须大于0并且小于或者等于500000 != 余额必须大于0并且小于或者等于500000
2020-12-26 10:01:02,264 - [test_recharge.py-->line:109] - INFO: 用例--【充值金额-非数字】---执行通过
2020-12-26 10:06:29,958 - [test_withdraw.py-->line:102] - ERROR: 用例--【提现金额为0】---执行失败
2020-12-26 10:06:29,958 - [test_withdraw.py-->line:103] - ERROR:  :: 2 != 0
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\project\python_35\py35_24day_project\testcases\test_withdraw.py", line 92, in test_withdraw
    self.assertEqual(expected['code'], res['code'])
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 2 != 0
2020-12-26 10:06:30,160 - [test_withdraw.py-->line:102] - ERROR: 用例--【提现金额为负数】---执行失败
2020-12-26 10:06:30,161 - [test_withdraw.py-->line:103] - ERROR:  :: 金额必须大于0并且小于或者等于500000 != 余额必须大于0并且小于或者等于5000000
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\project\python_35\py35_24day_project\testcases\test_withdraw.py", line 93, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 金额必须大于0并且小于或者等于500000 != 余额必须大于0并且小于或者等于5000000
2020-12-26 10:06:30,364 - [test_withdraw.py-->line:102] - ERROR: 用例--【提现金额为空】---执行失败
2020-12-26 10:06:30,365 - [test_withdraw.py-->line:103] - ERROR:  :: 金额为空 != 余额为空
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\project\python_35\py35_24day_project\testcases\test_withdraw.py", line 93, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 金额为空 != 余额为空
2020-12-26 10:06:30,581 - [test_withdraw.py-->line:102] - ERROR: 用例--【提现金额-3位小数】---执行失败
2020-12-26 10:06:30,581 - [test_withdraw.py-->line:103] - ERROR:  :: 金额小数超过两位 != 余额小数超过两位
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\project\python_35\py35_24day_project\testcases\test_withdraw.py", line 93, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 金额小数超过两位 != 余额小数超过两位
2020-12-26 10:06:30,791 - [test_withdraw.py-->line:102] - ERROR: 用例--【提现金额-大于50万】---执行失败
2020-12-26 10:06:30,791 - [test_withdraw.py-->line:103] - ERROR:  :: 金额必须大于0并且小于或者等于500000 != 余额必须大于0并且小于或者等于5000000
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\project\python_35\py35_24day_project\testcases\test_withdraw.py", line 93, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 金额必须大于0并且小于或者等于500000 != 余额必须大于0并且小于或者等于5000000
2020-12-26 10:07:17,899 - [test_withdraw.py-->line:106] - INFO: 用例--【提现成功-整数】---执行通过
2020-12-26 10:07:18,077 - [test_withdraw.py-->line:102] - ERROR: 用例--【提现成功-1位小数】---执行失败
2020-12-26 10:07:18,077 - [test_withdraw.py-->line:103] - ERROR:  :: Decimal('600.10') != 600.1
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: Decimal('600.10') != 600.1

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\project\python_35\py35_24day_project\testcases\test_withdraw.py", line 96, in test_withdraw
    self.assertEqual(start_amount-end_amount,params['amount'])
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: Decimal('600.10') != 600.1
2020-12-26 10:07:18,253 - [test_withdraw.py-->line:102] - ERROR: 用例--【提现成功-2位小数】---执行失败
2020-12-26 10:07:18,253 - [test_withdraw.py-->line:103] - ERROR:  :: Decimal('600.22') != 600.22
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: Decimal('600.22') != 600.22

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\project\python_35\py35_24day_project\testcases\test_withdraw.py", line 96, in test_withdraw
    self.assertEqual(start_amount-end_amount,params['amount'])
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: Decimal('600.22') != 600.22
2020-12-26 10:07:18,427 - [test_withdraw.py-->line:106] - INFO: 用例--【提现成功-50万】---执行通过
2020-12-26 10:07:18,605 - [test_withdraw.py-->line:106] - INFO: 用例--【会员id为空】---执行通过
2020-12-26 10:07:18,778 - [test_withdraw.py-->line:106] - INFO: 用例--【会员id为小数】---执行通过
2020-12-26 10:07:18,942 - [test_withdraw.py-->line:102] - ERROR: 用例--【提现金额为0】---执行失败
2020-12-26 10:07:18,942 - [test_withdraw.py-->line:103] - ERROR:  :: 2 != 0
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\project\python_35\py35_24day_project\testcases\test_withdraw.py", line 92, in test_withdraw
    self.assertEqual(expected['code'], res['code'])
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 2 != 0
2020-12-26 10:07:19,096 - [test_withdraw.py-->line:102] - ERROR: 用例--【提现金额为负数】---执行失败
2020-12-26 10:07:19,096 - [test_withdraw.py-->line:103] - ERROR:  :: 金额必须大于0并且小于或者等于500000 != 余额必须大于0并且小于或者等于5000000
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\project\python_35\py35_24day_project\testcases\test_withdraw.py", line 93, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 金额必须大于0并且小于或者等于500000 != 余额必须大于0并且小于或者等于5000000
2020-12-26 10:07:19,273 - [test_withdraw.py-->line:102] - ERROR: 用例--【提现金额为空】---执行失败
2020-12-26 10:07:19,273 - [test_withdraw.py-->line:103] - ERROR:  :: 金额为空 != 余额为空
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\project\python_35\py35_24day_project\testcases\test_withdraw.py", line 93, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 金额为空 != 余额为空
2020-12-26 10:07:19,450 - [test_withdraw.py-->line:102] - ERROR: 用例--【提现金额-3位小数】---执行失败
2020-12-26 10:07:19,450 - [test_withdraw.py-->line:103] - ERROR:  :: 金额小数超过两位 != 余额小数超过两位
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\project\python_35\py35_24day_project\testcases\test_withdraw.py", line 93, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 金额小数超过两位 != 余额小数超过两位
2020-12-26 10:07:19,629 - [test_withdraw.py-->line:102] - ERROR: 用例--【提现金额-大于50万】---执行失败
2020-12-26 10:07:19,629 - [test_withdraw.py-->line:103] - ERROR:  :: 金额必须大于0并且小于或者等于500000 != 余额必须大于0并且小于或者等于5000000
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\project\python_35\py35_24day_project\testcases\test_withdraw.py", line 93, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 金额必须大于0并且小于或者等于500000 != 余额必须大于0并且小于或者等于5000000
2020-12-26 10:07:19,805 - [test_withdraw.py-->line:106] - INFO: 用例--【提现金额-非数字】---执行通过
2020-12-26 10:09:04,238 - [test_withdraw.py-->line:105] - INFO: 用例--【提现成功-整数】---执行通过
2020-12-26 10:09:04,415 - [test_withdraw.py-->line:105] - INFO: 用例--【提现成功-1位小数】---执行通过
2020-12-26 10:09:04,622 - [test_withdraw.py-->line:105] - INFO: 用例--【提现成功-2位小数】---执行通过
2020-12-26 10:09:04,806 - [test_withdraw.py-->line:105] - INFO: 用例--【提现成功-50万】---执行通过
2020-12-26 10:09:04,991 - [test_withdraw.py-->line:105] - INFO: 用例--【会员id为空】---执行通过
2020-12-26 10:09:05,165 - [test_withdraw.py-->line:105] - INFO: 用例--【会员id为小数】---执行通过
2020-12-26 10:09:05,356 - [test_withdraw.py-->line:101] - ERROR: 用例--【提现金额为0】---执行失败
2020-12-26 10:09:05,356 - [test_withdraw.py-->line:102] - ERROR:  :: 2 != 0
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\project\python_35\py35_24day_project\testcases\test_withdraw.py", line 91, in test_withdraw
    self.assertEqual(expected['code'], res['code'])
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 2 != 0
2020-12-26 10:09:05,525 - [test_withdraw.py-->line:101] - ERROR: 用例--【提现金额为负数】---执行失败
2020-12-26 10:09:05,525 - [test_withdraw.py-->line:102] - ERROR:  :: 金额必须大于0并且小于或者等于500000 != 余额必须大于0并且小于或者等于5000000
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\project\python_35\py35_24day_project\testcases\test_withdraw.py", line 92, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 金额必须大于0并且小于或者等于500000 != 余额必须大于0并且小于或者等于5000000
2020-12-26 10:09:05,687 - [test_withdraw.py-->line:101] - ERROR: 用例--【提现金额为空】---执行失败
2020-12-26 10:09:05,687 - [test_withdraw.py-->line:102] - ERROR:  :: 金额为空 != 余额为空
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\project\python_35\py35_24day_project\testcases\test_withdraw.py", line 92, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 金额为空 != 余额为空
2020-12-26 10:09:05,866 - [test_withdraw.py-->line:101] - ERROR: 用例--【提现金额-3位小数】---执行失败
2020-12-26 10:09:05,867 - [test_withdraw.py-->line:102] - ERROR:  :: 金额小数超过两位 != 余额小数超过两位
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\project\python_35\py35_24day_project\testcases\test_withdraw.py", line 92, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 金额小数超过两位 != 余额小数超过两位
2020-12-26 10:09:06,061 - [test_withdraw.py-->line:101] - ERROR: 用例--【提现金额-大于50万】---执行失败
2020-12-26 10:09:06,061 - [test_withdraw.py-->line:102] - ERROR:  :: 金额必须大于0并且小于或者等于500000 != 余额必须大于0并且小于或者等于5000000
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\project\python_35\py35_24day_project\testcases\test_withdraw.py", line 92, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 金额必须大于0并且小于或者等于500000 != 余额必须大于0并且小于或者等于5000000
2020-12-26 10:09:06,231 - [test_withdraw.py-->line:105] - INFO: 用例--【提现金额-非数字】---执行通过
2020-12-26 10:09:19,193 - [test_login.py-->line:53] - INFO: 用例--【登录成功】---执行通过
2020-12-26 10:09:19,271 - [test_login.py-->line:53] - INFO: 用例--【手机号为空】---执行通过
2020-12-26 10:09:19,351 - [test_login.py-->line:53] - INFO: 用例--【密码为空】---执行通过
2020-12-26 10:09:19,417 - [test_login.py-->line:53] - INFO: 用例--【手机号未注册】---执行通过
2020-12-26 10:09:19,480 - [test_login.py-->line:53] - INFO: 用例--【密码错误】---执行通过
2020-12-26 10:09:19,547 - [test_login.py-->line:53] - INFO: 用例--【手机号格式错误】---执行通过
2020-12-26 10:09:19,796 - [test_recharge.py-->line:109] - INFO: 用例--【充值成功-整数】---执行通过
2020-12-26 10:09:19,989 - [test_recharge.py-->line:109] - INFO: 用例--【充值成功-1位小数】---执行通过
2020-12-26 10:09:20,168 - [test_recharge.py-->line:109] - INFO: 用例--【充值成功-2位小数】---执行通过
2020-12-26 10:09:20,341 - [test_recharge.py-->line:109] - INFO: 用例--【充值成功-50万】---执行通过
2020-12-26 10:09:20,517 - [test_recharge.py-->line:109] - INFO: 用例--【会员id为空】---执行通过
2020-12-26 10:09:20,683 - [test_recharge.py-->line:109] - INFO: 用例--【会员id为小数】---执行通过
2020-12-26 10:09:20,858 - [test_recharge.py-->line:105] - ERROR: 用例--【充值金额为0】---执行失败
2020-12-26 10:09:20,858 - [test_recharge.py-->line:106] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_24day_project\testcases\test_recharge.py", line 94, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2020-12-26 10:09:21,043 - [test_recharge.py-->line:105] - ERROR: 用例--【充值金额为负数】---执行失败
2020-12-26 10:09:21,043 - [test_recharge.py-->line:106] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_24day_project\testcases\test_recharge.py", line 95, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2020-12-26 10:09:21,208 - [test_recharge.py-->line:105] - ERROR: 用例--【充值金额为空】---执行失败
2020-12-26 10:09:21,209 - [test_recharge.py-->line:106] - ERROR: 1 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_24day_project\testcases\test_recharge.py", line 94, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 2
2020-12-26 10:09:21,384 - [test_recharge.py-->line:105] - ERROR: 用例--【充值金额-3位小数】---执行失败
2020-12-26 10:09:21,388 - [test_recharge.py-->line:106] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_24day_project\testcases\test_recharge.py", line 95, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2020-12-26 10:09:21,566 - [test_recharge.py-->line:105] - ERROR: 用例--【充值金额-大于50万】---执行失败
2020-12-26 10:09:21,567 - [test_recharge.py-->line:106] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_24day_project\testcases\test_recharge.py", line 95, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2020-12-26 10:09:21,740 - [test_recharge.py-->line:109] - INFO: 用例--【充值金额-非数字】---执行通过
2020-12-26 10:09:21,859 - [test_register.py-->line:76] - INFO: 用例--【注册成功-带注册名】---执行通过
2020-12-26 10:09:21,994 - [test_register.py-->line:76] - INFO: 用例--【成功-不带用户名】---执行通过
2020-12-26 10:09:22,114 - [test_register.py-->line:76] - INFO: 用例--【不输入手机号】---执行通过
2020-12-26 10:09:22,238 - [test_register.py-->line:76] - INFO: 用例--【手机号长度10位】---执行通过
2020-12-26 10:09:22,367 - [test_register.py-->line:76] - INFO: 用例--【手机号长度12位】---执行通过
2020-12-26 10:09:22,495 - [test_register.py-->line:76] - INFO: 用例--【手机号含有非法字符】---执行通过
2020-12-26 10:09:22,632 - [test_register.py-->line:76] - INFO: 用例--【已注册过的手机号】---执行通过
2020-12-26 10:09:22,752 - [test_register.py-->line:76] - INFO: 用例--【密码7位】---执行通过
2020-12-26 10:09:22,869 - [test_register.py-->line:76] - INFO: 用例--【密码17位】---执行通过
2020-12-26 10:09:23,006 - [test_register.py-->line:76] - INFO: 用例--【不输入密码】---执行通过
2020-12-26 10:09:23,129 - [test_register.py-->line:76] - INFO: 用例--【注册名11位】---执行通过
2020-12-26 10:09:23,270 - [test_register.py-->line:76] - INFO: 用例--【类型输入非0，1内容】---执行通过
2020-12-26 10:09:23,398 - [test_register.py-->line:76] - INFO: 用例--【不输入类型】---执行通过
2020-12-26 10:09:23,645 - [test_withdraw.py-->line:105] - INFO: 用例--【提现成功-整数】---执行通过
2020-12-26 10:09:23,825 - [test_withdraw.py-->line:105] - INFO: 用例--【提现成功-1位小数】---执行通过
2020-12-26 10:09:24,000 - [test_withdraw.py-->line:105] - INFO: 用例--【提现成功-2位小数】---执行通过
2020-12-26 10:09:24,177 - [test_withdraw.py-->line:105] - INFO: 用例--【提现成功-50万】---执行通过
2020-12-26 10:09:24,335 - [test_withdraw.py-->line:105] - INFO: 用例--【会员id为空】---执行通过
2020-12-26 10:09:24,493 - [test_withdraw.py-->line:105] - INFO: 用例--【会员id为小数】---执行通过
2020-12-26 10:09:24,674 - [test_withdraw.py-->line:101] - ERROR: 用例--【提现金额为0】---执行失败
2020-12-26 10:09:24,675 - [test_withdraw.py-->line:102] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_24day_project\testcases\test_withdraw.py", line 91, in test_withdraw
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2020-12-26 10:09:24,849 - [test_withdraw.py-->line:101] - ERROR: 用例--【提现金额为负数】---执行失败
2020-12-26 10:09:24,849 - [test_withdraw.py-->line:102] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_24day_project\testcases\test_withdraw.py", line 92, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2020-12-26 10:09:25,003 - [test_withdraw.py-->line:101] - ERROR: 用例--【提现金额为空】---执行失败
2020-12-26 10:09:25,004 - [test_withdraw.py-->line:102] - ERROR: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_24day_project\testcases\test_withdraw.py", line 92, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^

2020-12-26 10:09:25,181 - [test_withdraw.py-->line:101] - ERROR: 用例--【提现金额-3位小数】---执行失败
2020-12-26 10:09:25,181 - [test_withdraw.py-->line:102] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_24day_project\testcases\test_withdraw.py", line 92, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2020-12-26 10:09:25,360 - [test_withdraw.py-->line:101] - ERROR: 用例--【提现金额-大于50万】---执行失败
2020-12-26 10:09:25,360 - [test_withdraw.py-->line:102] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_24day_project\testcases\test_withdraw.py", line 92, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2020-12-26 10:09:25,538 - [test_withdraw.py-->line:105] - INFO: 用例--【提现金额-非数字】---执行通过
2020-12-28 14:21:08,747 - [test_register.py-->line:76] - INFO: 用例--【注册成功-带注册名】---执行通过
2020-12-28 14:21:08,826 - [test_register.py-->line:71] - ERROR: 用例--【成功-不带用户名】---执行失败
2020-12-28 14:21:08,826 - [test_register.py-->line:72] - ERROR:  :: 1 != 0
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\project\python_35\py35_24day_project\testcases\test_register.py", line 67, in test_register
    self.assertEqual(1, count)
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 1 != 0
2020-12-28 14:21:08,901 - [test_register.py-->line:76] - INFO: 用例--【不输入手机号】---执行通过
2020-12-28 14:21:08,989 - [test_register.py-->line:76] - INFO: 用例--【手机号长度10位】---执行通过
2020-12-28 14:21:09,063 - [test_register.py-->line:76] - INFO: 用例--【手机号长度12位】---执行通过
2020-12-28 14:21:09,145 - [test_register.py-->line:76] - INFO: 用例--【手机号含有非法字符】---执行通过
2020-12-28 14:21:09,236 - [test_register.py-->line:76] - INFO: 用例--【已注册过的手机号】---执行通过
2020-12-28 14:21:09,312 - [test_register.py-->line:76] - INFO: 用例--【密码7位】---执行通过
2020-12-28 14:21:09,383 - [test_register.py-->line:76] - INFO: 用例--【密码17位】---执行通过
2020-12-28 14:21:09,469 - [test_register.py-->line:76] - INFO: 用例--【不输入密码】---执行通过
2020-12-28 14:21:09,557 - [test_register.py-->line:76] - INFO: 用例--【注册名11位】---执行通过
2020-12-28 14:21:09,629 - [test_register.py-->line:76] - INFO: 用例--【类型输入非0，1内容】---执行通过
2020-12-28 14:21:09,716 - [test_register.py-->line:71] - ERROR: 用例--【不输入类型】---执行失败
2020-12-28 14:21:09,716 - [test_register.py-->line:72] - ERROR:  :: 1 != 0
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 0

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\project\python_35\py35_24day_project\testcases\test_register.py", line 67, in test_register
    self.assertEqual(1, count)
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 1 != 0
2020-12-28 14:22:52,424 - [test_register.py-->line:76] - INFO: 用例--【注册成功-带注册名】---执行通过
2020-12-28 14:22:52,521 - [test_register.py-->line:76] - INFO: 用例--【成功-不带用户名】---执行通过
2020-12-28 14:22:52,599 - [test_register.py-->line:76] - INFO: 用例--【不输入手机号】---执行通过
2020-12-28 14:22:52,682 - [test_register.py-->line:76] - INFO: 用例--【手机号长度10位】---执行通过
2020-12-28 14:22:52,774 - [test_register.py-->line:76] - INFO: 用例--【手机号长度12位】---执行通过
2020-12-28 14:22:52,854 - [test_register.py-->line:76] - INFO: 用例--【手机号含有非法字符】---执行通过
2020-12-28 14:22:52,957 - [test_register.py-->line:76] - INFO: 用例--【已注册过的手机号】---执行通过
2020-12-28 14:22:53,048 - [test_register.py-->line:76] - INFO: 用例--【密码7位】---执行通过
2020-12-28 14:22:53,125 - [test_register.py-->line:76] - INFO: 用例--【密码17位】---执行通过
2020-12-28 14:22:53,202 - [test_register.py-->line:76] - INFO: 用例--【不输入密码】---执行通过
2020-12-28 14:22:53,281 - [test_register.py-->line:76] - INFO: 用例--【注册名11位】---执行通过
2020-12-28 14:22:53,370 - [test_register.py-->line:76] - INFO: 用例--【类型输入非0，1内容】---执行通过
2020-12-28 14:22:53,455 - [test_register.py-->line:76] - INFO: 用例--【不输入类型】---执行通过
2020-12-29 21:23:26,248 - [test_recharge.py-->line:113] - INFO: 用例--【充值成功-整数】---执行通过
2020-12-29 21:23:26,370 - [test_recharge.py-->line:113] - INFO: 用例--【充值成功-1位小数】---执行通过
2020-12-29 21:23:26,510 - [test_recharge.py-->line:113] - INFO: 用例--【充值成功-2位小数】---执行通过
2020-12-29 21:23:26,660 - [test_recharge.py-->line:113] - INFO: 用例--【充值成功-50万】---执行通过
2020-12-29 21:23:26,788 - [test_recharge.py-->line:113] - INFO: 用例--【会员id为空】---执行通过
2020-12-29 21:23:26,920 - [test_recharge.py-->line:113] - INFO: 用例--【会员id为小数】---执行通过
2020-12-29 21:23:27,058 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额为0】---执行失败
2020-12-29 21:23:27,058 - [test_recharge.py-->line:110] - ERROR:  :: 2 != 0
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\project\python_35\py35_25day_project\testcases\test_recharge.py", line 98, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 2 != 0
2020-12-29 21:23:27,362 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额为负数】---执行失败
2020-12-29 21:23:27,362 - [test_recharge.py-->line:110] - ERROR:  :: 金额必须大于0并且小于或者等于500000 != 余额必须大于0并且小于或者等于500000
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\project\python_35\py35_25day_project\testcases\test_recharge.py", line 99, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 金额必须大于0并且小于或者等于500000 != 余额必须大于0并且小于或者等于500000
2020-12-29 21:23:27,582 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额为空】---执行失败
2020-12-29 21:23:27,582 - [test_recharge.py-->line:110] - ERROR:  :: 1 != 2
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 2

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\project\python_35\py35_25day_project\testcases\test_recharge.py", line 98, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 1 != 2
2020-12-29 21:23:27,791 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额-3位小数】---执行失败
2020-12-29 21:23:27,792 - [test_recharge.py-->line:110] - ERROR:  :: 金额小数超过两位 != 余额小数超过两位
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\project\python_35\py35_25day_project\testcases\test_recharge.py", line 99, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 金额小数超过两位 != 余额小数超过两位
2020-12-29 21:23:28,024 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额-大于50万】---执行失败
2020-12-29 21:23:28,025 - [test_recharge.py-->line:110] - ERROR:  :: 金额必须大于0并且小于或者等于500000 != 余额必须大于0并且小于或者等于500000
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\project\python_35\py35_25day_project\testcases\test_recharge.py", line 99, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 金额必须大于0并且小于或者等于500000 != 余额必须大于0并且小于或者等于500000
2020-12-29 21:23:28,246 - [test_recharge.py-->line:113] - INFO: 用例--【充值金额-非数字】---执行通过
2020-12-29 21:27:37,460 - [test_login.py-->line:53] - INFO: 用例--【登录成功】---执行通过
2020-12-29 21:27:37,522 - [test_login.py-->line:53] - INFO: 用例--【手机号为空】---执行通过
2020-12-29 21:27:37,572 - [test_login.py-->line:53] - INFO: 用例--【密码为空】---执行通过
2020-12-29 21:27:37,642 - [test_login.py-->line:53] - INFO: 用例--【手机号未注册】---执行通过
2020-12-29 21:27:37,716 - [test_login.py-->line:53] - INFO: 用例--【密码错误】---执行通过
2020-12-29 21:27:37,771 - [test_login.py-->line:53] - INFO: 用例--【手机号格式错误】---执行通过
2020-12-29 21:30:28,285 - [test_recharge.py-->line:113] - INFO: 用例--【充值成功-整数】---执行通过
2020-12-29 21:30:30,896 - [test_recharge.py-->line:113] - INFO: 用例--【充值成功-1位小数】---执行通过
2020-12-29 21:30:31,042 - [test_recharge.py-->line:113] - INFO: 用例--【充值成功-2位小数】---执行通过
2020-12-29 21:30:31,178 - [test_recharge.py-->line:113] - INFO: 用例--【充值成功-50万】---执行通过
2020-12-29 21:30:31,322 - [test_recharge.py-->line:113] - INFO: 用例--【会员id为空】---执行通过
2020-12-29 21:30:31,463 - [test_recharge.py-->line:113] - INFO: 用例--【会员id为小数】---执行通过
2020-12-29 21:30:31,592 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额为0】---执行失败
2020-12-29 21:30:31,593 - [test_recharge.py-->line:110] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_25day_project\testcases\test_recharge.py", line 98, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2020-12-29 21:30:31,741 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额为负数】---执行失败
2020-12-29 21:30:31,743 - [test_recharge.py-->line:110] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_25day_project\testcases\test_recharge.py", line 99, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2020-12-29 21:30:31,907 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额为空】---执行失败
2020-12-29 21:30:31,907 - [test_recharge.py-->line:110] - ERROR: 1 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_25day_project\testcases\test_recharge.py", line 98, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 2
2020-12-29 21:30:32,266 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额-3位小数】---执行失败
2020-12-29 21:30:32,266 - [test_recharge.py-->line:110] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_25day_project\testcases\test_recharge.py", line 99, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2020-12-29 21:30:32,840 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额-大于50万】---执行失败
2020-12-29 21:30:32,840 - [test_recharge.py-->line:110] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_25day_project\testcases\test_recharge.py", line 99, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2020-12-29 21:30:33,196 - [test_recharge.py-->line:113] - INFO: 用例--【充值金额-非数字】---执行通过
2020-12-29 21:30:33,327 - [test_register.py-->line:76] - INFO: 用例--【注册成功-带注册名】---执行通过
2020-12-29 21:30:33,454 - [test_register.py-->line:76] - INFO: 用例--【成功-不带用户名】---执行通过
2020-12-29 21:30:33,799 - [test_register.py-->line:76] - INFO: 用例--【不输入手机号】---执行通过
2020-12-29 21:30:33,902 - [test_register.py-->line:76] - INFO: 用例--【手机号长度10位】---执行通过
2020-12-29 21:30:34,032 - [test_register.py-->line:76] - INFO: 用例--【手机号长度12位】---执行通过
2020-12-29 21:30:34,146 - [test_register.py-->line:76] - INFO: 用例--【手机号含有非法字符】---执行通过
2020-12-29 21:30:34,506 - [test_register.py-->line:76] - INFO: 用例--【已注册过的手机号】---执行通过
2020-12-29 21:30:34,623 - [test_register.py-->line:76] - INFO: 用例--【密码7位】---执行通过
2020-12-29 21:30:34,739 - [test_register.py-->line:76] - INFO: 用例--【密码17位】---执行通过
2020-12-29 21:30:34,851 - [test_register.py-->line:76] - INFO: 用例--【不输入密码】---执行通过
2020-12-29 21:30:34,965 - [test_register.py-->line:76] - INFO: 用例--【注册名11位】---执行通过
2020-12-29 21:30:35,080 - [test_register.py-->line:76] - INFO: 用例--【类型输入非0，1内容】---执行通过
2020-12-29 21:30:36,184 - [test_register.py-->line:76] - INFO: 用例--【不输入类型】---执行通过
2020-12-29 21:30:36,394 - [test_withdraw.py-->line:103] - INFO: 用例--【提现成功-整数】---执行通过
2020-12-29 21:30:36,553 - [test_withdraw.py-->line:103] - INFO: 用例--【提现成功-1位小数】---执行通过
2020-12-29 21:30:36,701 - [test_withdraw.py-->line:103] - INFO: 用例--【提现成功-2位小数】---执行通过
2020-12-29 21:30:36,860 - [test_withdraw.py-->line:103] - INFO: 用例--【提现成功-50万】---执行通过
2020-12-29 21:30:37,017 - [test_withdraw.py-->line:103] - INFO: 用例--【会员id为空】---执行通过
2020-12-29 21:30:37,170 - [test_withdraw.py-->line:103] - INFO: 用例--【会员id为小数】---执行通过
2020-12-29 21:30:37,347 - [test_withdraw.py-->line:99] - ERROR: 用例--【提现金额为0】---执行失败
2020-12-29 21:30:37,347 - [test_withdraw.py-->line:100] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_25day_project\testcases\test_withdraw.py", line 91, in test_withdraw
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2020-12-29 21:30:38,741 - [test_withdraw.py-->line:99] - ERROR: 用例--【提现金额为负数】---执行失败
2020-12-29 21:30:38,741 - [test_withdraw.py-->line:100] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_25day_project\testcases\test_withdraw.py", line 92, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2020-12-29 21:30:38,883 - [test_withdraw.py-->line:99] - ERROR: 用例--【提现金额为空】---执行失败
2020-12-29 21:30:38,883 - [test_withdraw.py-->line:100] - ERROR: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_25day_project\testcases\test_withdraw.py", line 92, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^

2020-12-29 21:30:39,051 - [test_withdraw.py-->line:99] - ERROR: 用例--【提现金额-3位小数】---执行失败
2020-12-29 21:30:39,051 - [test_withdraw.py-->line:100] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_25day_project\testcases\test_withdraw.py", line 92, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2020-12-29 21:30:39,194 - [test_withdraw.py-->line:99] - ERROR: 用例--【提现金额-大于50万】---执行失败
2020-12-29 21:30:39,194 - [test_withdraw.py-->line:100] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_25day_project\testcases\test_withdraw.py", line 92, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2020-12-29 21:30:39,596 - [test_withdraw.py-->line:103] - INFO: 用例--【提现金额-非数字】---执行通过
2020-12-29 21:43:10,054 - [test_login.py-->line:56] - INFO: 用例--【手机号为空】---执行通过
2020-12-29 21:43:10,108 - [test_login.py-->line:56] - INFO: 用例--【密码为空】---执行通过
2020-12-29 21:43:10,171 - [test_login.py-->line:56] - INFO: 用例--【手机号未注册】---执行通过
2020-12-29 21:43:10,219 - [test_login.py-->line:56] - INFO: 用例--【密码错误】---执行通过
2020-12-29 21:43:10,267 - [test_login.py-->line:56] - INFO: 用例--【手机号格式错误】---执行通过
2020-12-29 21:43:10,485 - [test_recharge.py-->line:113] - INFO: 用例--【充值成功-整数】---执行通过
2020-12-29 21:43:10,640 - [test_recharge.py-->line:113] - INFO: 用例--【充值成功-1位小数】---执行通过
2020-12-29 21:43:10,808 - [test_recharge.py-->line:113] - INFO: 用例--【充值成功-2位小数】---执行通过
2020-12-29 21:43:10,960 - [test_recharge.py-->line:113] - INFO: 用例--【充值成功-50万】---执行通过
2020-12-29 21:43:11,118 - [test_recharge.py-->line:113] - INFO: 用例--【会员id为空】---执行通过
2020-12-29 21:43:11,280 - [test_recharge.py-->line:113] - INFO: 用例--【会员id为小数】---执行通过
2020-12-29 21:43:11,440 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额为0】---执行失败
2020-12-29 21:43:11,441 - [test_recharge.py-->line:110] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_25day_project\testcases\test_recharge.py", line 98, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2020-12-29 21:43:11,602 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额为负数】---执行失败
2020-12-29 21:43:11,602 - [test_recharge.py-->line:110] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_25day_project\testcases\test_recharge.py", line 99, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2020-12-29 21:43:11,774 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额为空】---执行失败
2020-12-29 21:43:11,774 - [test_recharge.py-->line:110] - ERROR: 1 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_25day_project\testcases\test_recharge.py", line 98, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 2
2020-12-29 21:43:11,922 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额-3位小数】---执行失败
2020-12-29 21:43:11,922 - [test_recharge.py-->line:110] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_25day_project\testcases\test_recharge.py", line 99, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2020-12-29 21:43:12,100 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额-大于50万】---执行失败
2020-12-29 21:43:12,101 - [test_recharge.py-->line:110] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_25day_project\testcases\test_recharge.py", line 99, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2020-12-29 21:43:12,277 - [test_recharge.py-->line:113] - INFO: 用例--【充值金额-非数字】---执行通过
2020-12-29 21:43:12,398 - [test_register.py-->line:76] - INFO: 用例--【注册成功-带注册名】---执行通过
2020-12-29 21:43:12,501 - [test_register.py-->line:76] - INFO: 用例--【成功-不带用户名】---执行通过
2020-12-29 21:43:12,610 - [test_register.py-->line:76] - INFO: 用例--【不输入手机号】---执行通过
2020-12-29 21:43:12,703 - [test_register.py-->line:76] - INFO: 用例--【手机号长度10位】---执行通过
2020-12-29 21:43:12,813 - [test_register.py-->line:76] - INFO: 用例--【手机号长度12位】---执行通过
2020-12-29 21:43:12,925 - [test_register.py-->line:76] - INFO: 用例--【手机号含有非法字符】---执行通过
2020-12-29 21:43:13,038 - [test_register.py-->line:76] - INFO: 用例--【已注册过的手机号】---执行通过
2020-12-29 21:43:13,135 - [test_register.py-->line:76] - INFO: 用例--【密码7位】---执行通过
2020-12-29 21:43:13,233 - [test_register.py-->line:76] - INFO: 用例--【密码17位】---执行通过
2020-12-29 21:43:13,342 - [test_register.py-->line:76] - INFO: 用例--【不输入密码】---执行通过
2020-12-29 21:43:13,438 - [test_register.py-->line:76] - INFO: 用例--【注册名11位】---执行通过
2020-12-29 21:43:13,556 - [test_register.py-->line:76] - INFO: 用例--【类型输入非0，1内容】---执行通过
2020-12-29 21:43:13,684 - [test_register.py-->line:76] - INFO: 用例--【不输入类型】---执行通过
2020-12-29 21:43:13,917 - [test_withdraw.py-->line:106] - INFO: 用例--【提现成功-整数】---执行通过
2020-12-29 21:43:14,076 - [test_withdraw.py-->line:106] - INFO: 用例--【提现成功-1位小数】---执行通过
2020-12-29 21:43:14,243 - [test_withdraw.py-->line:106] - INFO: 用例--【提现成功-2位小数】---执行通过
2020-12-29 21:43:14,416 - [test_withdraw.py-->line:106] - INFO: 用例--【提现成功-50万】---执行通过
2020-12-29 21:43:14,564 - [test_withdraw.py-->line:106] - INFO: 用例--【会员id为空】---执行通过
2020-12-29 21:43:14,738 - [test_withdraw.py-->line:106] - INFO: 用例--【会员id为小数】---执行通过
2020-12-29 21:43:14,895 - [test_withdraw.py-->line:102] - ERROR: 用例--【提现金额为0】---执行失败
2020-12-29 21:43:14,896 - [test_withdraw.py-->line:103] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_25day_project\testcases\test_withdraw.py", line 94, in test_withdraw
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2020-12-29 21:43:15,042 - [test_withdraw.py-->line:102] - ERROR: 用例--【提现金额为负数】---执行失败
2020-12-29 21:43:15,042 - [test_withdraw.py-->line:103] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_25day_project\testcases\test_withdraw.py", line 95, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2020-12-29 21:43:15,215 - [test_withdraw.py-->line:102] - ERROR: 用例--【提现金额为空】---执行失败
2020-12-29 21:43:15,215 - [test_withdraw.py-->line:103] - ERROR: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_25day_project\testcases\test_withdraw.py", line 95, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^

2020-12-29 21:43:15,368 - [test_withdraw.py-->line:102] - ERROR: 用例--【提现金额-3位小数】---执行失败
2020-12-29 21:43:15,368 - [test_withdraw.py-->line:103] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_25day_project\testcases\test_withdraw.py", line 95, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2020-12-29 21:43:15,515 - [test_withdraw.py-->line:102] - ERROR: 用例--【提现金额-大于50万】---执行失败
2020-12-29 21:43:15,515 - [test_withdraw.py-->line:103] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_25day_project\testcases\test_withdraw.py", line 95, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2020-12-29 21:43:15,677 - [test_withdraw.py-->line:106] - INFO: 用例--【提现金额-非数字】---执行通过
2020-12-29 21:46:46,819 - [test_login.py-->line:56] - INFO: 用例--【手机号为空】---执行通过
2020-12-29 21:46:46,881 - [test_login.py-->line:56] - INFO: 用例--【密码为空】---执行通过
2020-12-29 21:46:46,938 - [test_login.py-->line:56] - INFO: 用例--【手机号未注册】---执行通过
2020-12-29 21:46:47,023 - [test_login.py-->line:56] - INFO: 用例--【密码错误】---执行通过
2020-12-29 21:46:47,084 - [test_login.py-->line:56] - INFO: 用例--【手机号格式错误】---执行通过
2020-12-29 21:46:47,302 - [test_recharge.py-->line:113] - INFO: 用例--【充值成功-整数】---执行通过
2020-12-29 21:46:47,477 - [test_recharge.py-->line:113] - INFO: 用例--【充值成功-1位小数】---执行通过
2020-12-29 21:46:47,631 - [test_recharge.py-->line:113] - INFO: 用例--【充值成功-2位小数】---执行通过
2020-12-29 21:46:47,801 - [test_recharge.py-->line:113] - INFO: 用例--【充值成功-50万】---执行通过
2020-12-29 21:46:47,959 - [test_recharge.py-->line:113] - INFO: 用例--【会员id为空】---执行通过
2020-12-29 21:46:48,106 - [test_recharge.py-->line:113] - INFO: 用例--【会员id为小数】---执行通过
2020-12-29 21:46:48,259 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额为0】---执行失败
2020-12-29 21:46:48,260 - [test_recharge.py-->line:110] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_25day_project\testcases\test_recharge.py", line 98, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2020-12-29 21:46:48,424 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额为负数】---执行失败
2020-12-29 21:46:48,425 - [test_recharge.py-->line:110] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_25day_project\testcases\test_recharge.py", line 99, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2020-12-29 21:46:48,571 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额为空】---执行失败
2020-12-29 21:46:48,572 - [test_recharge.py-->line:110] - ERROR: 1 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_25day_project\testcases\test_recharge.py", line 98, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 2
2020-12-29 21:46:48,715 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额-3位小数】---执行失败
2020-12-29 21:46:48,716 - [test_recharge.py-->line:110] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_25day_project\testcases\test_recharge.py", line 99, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2020-12-29 21:46:48,865 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额-大于50万】---执行失败
2020-12-29 21:46:48,865 - [test_recharge.py-->line:110] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_25day_project\testcases\test_recharge.py", line 99, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2020-12-29 21:46:49,030 - [test_recharge.py-->line:113] - INFO: 用例--【充值金额-非数字】---执行通过
2020-12-29 21:46:49,147 - [test_register.py-->line:76] - INFO: 用例--【注册成功-带注册名】---执行通过
2020-12-29 21:46:49,260 - [test_register.py-->line:76] - INFO: 用例--【成功-不带用户名】---执行通过
2020-12-29 21:46:49,371 - [test_register.py-->line:76] - INFO: 用例--【不输入手机号】---执行通过
2020-12-29 21:46:49,479 - [test_register.py-->line:76] - INFO: 用例--【手机号长度10位】---执行通过
2020-12-29 21:46:49,588 - [test_register.py-->line:76] - INFO: 用例--【手机号长度12位】---执行通过
2020-12-29 21:46:49,697 - [test_register.py-->line:76] - INFO: 用例--【手机号含有非法字符】---执行通过
2020-12-29 21:46:49,797 - [test_register.py-->line:76] - INFO: 用例--【已注册过的手机号】---执行通过
2020-12-29 21:46:49,924 - [test_register.py-->line:76] - INFO: 用例--【密码7位】---执行通过
2020-12-29 21:46:50,036 - [test_register.py-->line:76] - INFO: 用例--【密码17位】---执行通过
2020-12-29 21:46:50,155 - [test_register.py-->line:76] - INFO: 用例--【不输入密码】---执行通过
2020-12-29 21:46:50,287 - [test_register.py-->line:76] - INFO: 用例--【注册名11位】---执行通过
2020-12-29 21:46:50,402 - [test_register.py-->line:76] - INFO: 用例--【类型输入非0，1内容】---执行通过
2020-12-29 21:46:50,519 - [test_register.py-->line:76] - INFO: 用例--【不输入类型】---执行通过
2020-12-29 21:46:50,694 - [test_withdraw.py-->line:106] - INFO: 用例--【提现成功-整数】---执行通过
2020-12-29 21:46:50,835 - [test_withdraw.py-->line:106] - INFO: 用例--【提现成功-1位小数】---执行通过
2020-12-29 21:46:50,953 - [test_withdraw.py-->line:106] - INFO: 用例--【提现成功-2位小数】---执行通过
2020-12-29 21:46:51,086 - [test_withdraw.py-->line:106] - INFO: 用例--【提现成功-50万】---执行通过
2020-12-29 21:46:51,214 - [test_withdraw.py-->line:106] - INFO: 用例--【会员id为空】---执行通过
2020-12-29 21:46:51,344 - [test_withdraw.py-->line:106] - INFO: 用例--【会员id为小数】---执行通过
2020-12-29 21:46:51,479 - [test_withdraw.py-->line:102] - ERROR: 用例--【提现金额为0】---执行失败
2020-12-29 21:46:51,479 - [test_withdraw.py-->line:103] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_25day_project\testcases\test_withdraw.py", line 94, in test_withdraw
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2020-12-29 21:46:51,608 - [test_withdraw.py-->line:102] - ERROR: 用例--【提现金额为负数】---执行失败
2020-12-29 21:46:51,609 - [test_withdraw.py-->line:103] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_25day_project\testcases\test_withdraw.py", line 95, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2020-12-29 21:46:51,731 - [test_withdraw.py-->line:102] - ERROR: 用例--【提现金额为空】---执行失败
2020-12-29 21:46:51,731 - [test_withdraw.py-->line:103] - ERROR: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_25day_project\testcases\test_withdraw.py", line 95, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^

2020-12-29 21:46:51,848 - [test_withdraw.py-->line:102] - ERROR: 用例--【提现金额-3位小数】---执行失败
2020-12-29 21:46:51,848 - [test_withdraw.py-->line:103] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_25day_project\testcases\test_withdraw.py", line 95, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2020-12-29 21:46:51,979 - [test_withdraw.py-->line:102] - ERROR: 用例--【提现金额-大于50万】---执行失败
2020-12-29 21:46:51,980 - [test_withdraw.py-->line:103] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_25day_project\testcases\test_withdraw.py", line 95, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2020-12-29 21:46:52,118 - [test_withdraw.py-->line:106] - INFO: 用例--【提现金额-非数字】---执行通过
2020-12-29 21:48:39,528 - [test_login.py-->line:56] - INFO: 用例--【登录成功】---执行通过
2020-12-29 21:48:39,572 - [test_login.py-->line:56] - INFO: 用例--【手机号为空】---执行通过
2020-12-29 21:48:39,623 - [test_login.py-->line:56] - INFO: 用例--【密码为空】---执行通过
2020-12-29 21:48:39,681 - [test_login.py-->line:56] - INFO: 用例--【手机号未注册】---执行通过
2020-12-29 21:48:39,726 - [test_login.py-->line:56] - INFO: 用例--【密码错误】---执行通过
2020-12-29 21:48:39,770 - [test_login.py-->line:56] - INFO: 用例--【手机号格式错误】---执行通过
2020-12-29 21:48:39,959 - [test_recharge.py-->line:113] - INFO: 用例--【充值成功-整数】---执行通过
2020-12-29 21:48:40,104 - [test_recharge.py-->line:113] - INFO: 用例--【充值成功-1位小数】---执行通过
2020-12-29 21:48:40,261 - [test_recharge.py-->line:113] - INFO: 用例--【充值成功-2位小数】---执行通过
2020-12-29 21:48:40,422 - [test_recharge.py-->line:113] - INFO: 用例--【充值成功-50万】---执行通过
2020-12-29 21:48:40,580 - [test_recharge.py-->line:113] - INFO: 用例--【会员id为空】---执行通过
2020-12-29 21:48:40,724 - [test_recharge.py-->line:113] - INFO: 用例--【会员id为小数】---执行通过
2020-12-29 21:48:40,883 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额为0】---执行失败
2020-12-29 21:48:40,883 - [test_recharge.py-->line:110] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_25day_project\testcases\test_recharge.py", line 98, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2020-12-29 21:48:41,035 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额为负数】---执行失败
2020-12-29 21:48:41,035 - [test_recharge.py-->line:110] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_25day_project\testcases\test_recharge.py", line 99, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2020-12-29 21:48:41,189 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额为空】---执行失败
2020-12-29 21:48:41,189 - [test_recharge.py-->line:110] - ERROR: 1 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_25day_project\testcases\test_recharge.py", line 98, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 2
2020-12-29 21:48:41,338 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额-3位小数】---执行失败
2020-12-29 21:48:41,338 - [test_recharge.py-->line:110] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_25day_project\testcases\test_recharge.py", line 99, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2020-12-29 21:48:41,496 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额-大于50万】---执行失败
2020-12-29 21:48:41,496 - [test_recharge.py-->line:110] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_25day_project\testcases\test_recharge.py", line 99, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2020-12-29 21:48:41,666 - [test_recharge.py-->line:113] - INFO: 用例--【充值金额-非数字】---执行通过
2020-12-29 21:48:41,783 - [test_register.py-->line:76] - INFO: 用例--【注册成功-带注册名】---执行通过
2020-12-29 21:48:41,908 - [test_register.py-->line:76] - INFO: 用例--【成功-不带用户名】---执行通过
2020-12-29 21:48:42,011 - [test_register.py-->line:76] - INFO: 用例--【不输入手机号】---执行通过
2020-12-29 21:48:42,124 - [test_register.py-->line:76] - INFO: 用例--【手机号长度10位】---执行通过
2020-12-29 21:48:42,215 - [test_register.py-->line:76] - INFO: 用例--【手机号长度12位】---执行通过
2020-12-29 21:48:42,326 - [test_register.py-->line:76] - INFO: 用例--【手机号含有非法字符】---执行通过
2020-12-29 21:48:42,433 - [test_register.py-->line:76] - INFO: 用例--【已注册过的手机号】---执行通过
2020-12-29 21:48:42,548 - [test_register.py-->line:76] - INFO: 用例--【密码7位】---执行通过
2020-12-29 21:48:42,655 - [test_register.py-->line:76] - INFO: 用例--【密码17位】---执行通过
2020-12-29 21:48:42,753 - [test_register.py-->line:76] - INFO: 用例--【不输入密码】---执行通过
2020-12-29 21:48:42,841 - [test_register.py-->line:76] - INFO: 用例--【注册名11位】---执行通过
2020-12-29 21:48:42,944 - [test_register.py-->line:76] - INFO: 用例--【类型输入非0，1内容】---执行通过
2020-12-29 21:48:43,059 - [test_register.py-->line:76] - INFO: 用例--【不输入类型】---执行通过
2020-12-29 21:48:43,243 - [test_withdraw.py-->line:106] - INFO: 用例--【提现成功-整数】---执行通过
2020-12-29 21:48:43,371 - [test_withdraw.py-->line:106] - INFO: 用例--【提现成功-1位小数】---执行通过
2020-12-29 21:48:43,497 - [test_withdraw.py-->line:106] - INFO: 用例--【提现成功-2位小数】---执行通过
2020-12-29 21:48:43,624 - [test_withdraw.py-->line:106] - INFO: 用例--【提现成功-50万】---执行通过
2020-12-29 21:48:43,746 - [test_withdraw.py-->line:106] - INFO: 用例--【会员id为空】---执行通过
2020-12-29 21:48:43,892 - [test_withdraw.py-->line:106] - INFO: 用例--【会员id为小数】---执行通过
2020-12-29 21:48:44,023 - [test_withdraw.py-->line:102] - ERROR: 用例--【提现金额为0】---执行失败
2020-12-29 21:48:44,024 - [test_withdraw.py-->line:103] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_25day_project\testcases\test_withdraw.py", line 94, in test_withdraw
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2020-12-29 21:48:44,176 - [test_withdraw.py-->line:102] - ERROR: 用例--【提现金额为负数】---执行失败
2020-12-29 21:48:44,176 - [test_withdraw.py-->line:103] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_25day_project\testcases\test_withdraw.py", line 95, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2020-12-29 21:48:44,297 - [test_withdraw.py-->line:102] - ERROR: 用例--【提现金额为空】---执行失败
2020-12-29 21:48:44,297 - [test_withdraw.py-->line:103] - ERROR: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_25day_project\testcases\test_withdraw.py", line 95, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^

2020-12-29 21:48:44,438 - [test_withdraw.py-->line:102] - ERROR: 用例--【提现金额-3位小数】---执行失败
2020-12-29 21:48:44,438 - [test_withdraw.py-->line:103] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_25day_project\testcases\test_withdraw.py", line 95, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2020-12-29 21:48:44,557 - [test_withdraw.py-->line:102] - ERROR: 用例--【提现金额-大于50万】---执行失败
2020-12-29 21:48:44,558 - [test_withdraw.py-->line:103] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_25day_project\testcases\test_withdraw.py", line 95, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2020-12-29 21:48:44,696 - [test_withdraw.py-->line:106] - INFO: 用例--【提现金额-非数字】---执行通过
2020-12-31 19:34:53,909 - [test_login.py-->line:51] - ERROR: 用例--【登录成功】---执行失败
2020-12-31 19:34:53,909 - [test_login.py-->line:52] - ERROR: {'code': 0, 'msg': 'OK'} not in {'code': 1001, 'msg': '账号信息错误', 'data': None, 'copyright': 'Copyright 柠檬班 © 2017-2020 湖南省零檬信息技术有限公司 All Rights Reserved'}
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_login.py", line 48, in test_login
    self.assertDictIn(expected, res)
  File "C:\project\python_35\py35_26day_project\testcases\test_login.py", line 64, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'msg': 'OK'} not in {'code': 1001, 'msg': '账号信息错误', 'data': None, 'copyright': 'Copyright 柠檬班 © 2017-2020 湖南省零檬信息技术有限公司 All Rights Reserved'}
2020-12-31 19:34:53,949 - [test_login.py-->line:56] - INFO: 用例--【手机号为空】---执行通过
2020-12-31 19:34:53,989 - [test_login.py-->line:56] - INFO: 用例--【密码为空】---执行通过
2020-12-31 19:34:54,034 - [test_login.py-->line:56] - INFO: 用例--【手机号未注册】---执行通过
2020-12-31 19:34:54,092 - [test_login.py-->line:56] - INFO: 用例--【密码错误】---执行通过
2020-12-31 19:34:54,131 - [test_login.py-->line:56] - INFO: 用例--【手机号格式错误】---执行通过
2020-12-31 19:34:54,306 - [test_register.py-->line:77] - INFO: 用例--【注册成功-带注册名】---执行通过
2020-12-31 19:34:54,409 - [test_register.py-->line:77] - INFO: 用例--【成功-不带用户名】---执行通过
2020-12-31 19:34:54,510 - [test_register.py-->line:77] - INFO: 用例--【不输入手机号】---执行通过
2020-12-31 19:34:54,610 - [test_register.py-->line:77] - INFO: 用例--【手机号长度10位】---执行通过
2020-12-31 19:34:54,719 - [test_register.py-->line:77] - INFO: 用例--【手机号长度12位】---执行通过
2020-12-31 19:34:54,814 - [test_register.py-->line:77] - INFO: 用例--【手机号含有非法字符】---执行通过
2020-12-31 19:34:54,926 - [test_register.py-->line:77] - INFO: 用例--【已注册过的手机号】---执行通过
2020-12-31 19:34:55,038 - [test_register.py-->line:77] - INFO: 用例--【密码7位】---执行通过
2020-12-31 19:34:55,144 - [test_register.py-->line:77] - INFO: 用例--【密码17位】---执行通过
2020-12-31 19:34:55,242 - [test_register.py-->line:77] - INFO: 用例--【不输入密码】---执行通过
2020-12-31 19:34:55,349 - [test_register.py-->line:77] - INFO: 用例--【注册名11位】---执行通过
2020-12-31 19:34:55,455 - [test_register.py-->line:77] - INFO: 用例--【类型输入非0，1内容】---执行通过
2020-12-31 19:34:55,579 - [test_register.py-->line:77] - INFO: 用例--【不输入类型】---执行通过
2020-12-31 19:37:31,309 - [test_login.py-->line:56] - INFO: 用例--【登录成功】---执行通过
2020-12-31 19:37:31,362 - [test_login.py-->line:56] - INFO: 用例--【手机号为空】---执行通过
2020-12-31 19:37:31,405 - [test_login.py-->line:56] - INFO: 用例--【密码为空】---执行通过
2020-12-31 19:37:31,462 - [test_login.py-->line:56] - INFO: 用例--【手机号未注册】---执行通过
2020-12-31 19:37:31,512 - [test_login.py-->line:56] - INFO: 用例--【密码错误】---执行通过
2020-12-31 19:37:31,566 - [test_login.py-->line:56] - INFO: 用例--【手机号格式错误】---执行通过
2020-12-31 19:37:31,781 - [test_recharge.py-->line:113] - INFO: 用例--【充值成功-整数】---执行通过
2020-12-31 19:37:31,944 - [test_recharge.py-->line:113] - INFO: 用例--【充值成功-1位小数】---执行通过
2020-12-31 19:37:32,114 - [test_recharge.py-->line:113] - INFO: 用例--【充值成功-2位小数】---执行通过
2020-12-31 19:37:32,295 - [test_recharge.py-->line:113] - INFO: 用例--【充值成功-50万】---执行通过
2020-12-31 19:37:32,460 - [test_recharge.py-->line:113] - INFO: 用例--【会员id为空】---执行通过
2020-12-31 19:37:32,610 - [test_recharge.py-->line:113] - INFO: 用例--【会员id为小数】---执行通过
2020-12-31 19:37:32,764 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额为0】---执行失败
2020-12-31 19:37:32,764 - [test_recharge.py-->line:110] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_recharge.py", line 98, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2020-12-31 19:37:32,928 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额为负数】---执行失败
2020-12-31 19:37:32,928 - [test_recharge.py-->line:110] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_recharge.py", line 99, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2020-12-31 19:37:33,090 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额为空】---执行失败
2020-12-31 19:37:33,090 - [test_recharge.py-->line:110] - ERROR: 1 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_recharge.py", line 98, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 2
2020-12-31 19:37:33,260 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额-3位小数】---执行失败
2020-12-31 19:37:33,260 - [test_recharge.py-->line:110] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_recharge.py", line 99, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2020-12-31 19:37:33,407 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额-大于50万】---执行失败
2020-12-31 19:37:33,407 - [test_recharge.py-->line:110] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_recharge.py", line 99, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2020-12-31 19:37:33,562 - [test_recharge.py-->line:113] - INFO: 用例--【充值金额-非数字】---执行通过
2020-12-31 19:37:33,682 - [test_register.py-->line:77] - INFO: 用例--【注册成功-带注册名】---执行通过
2020-12-31 19:37:33,796 - [test_register.py-->line:77] - INFO: 用例--【成功-不带用户名】---执行通过
2020-12-31 19:37:33,888 - [test_register.py-->line:77] - INFO: 用例--【不输入手机号】---执行通过
2020-12-31 19:37:33,987 - [test_register.py-->line:77] - INFO: 用例--【手机号长度10位】---执行通过
2020-12-31 19:37:34,081 - [test_register.py-->line:77] - INFO: 用例--【手机号长度12位】---执行通过
2020-12-31 19:37:34,184 - [test_register.py-->line:77] - INFO: 用例--【手机号含有非法字符】---执行通过
2020-12-31 19:37:34,298 - [test_register.py-->line:77] - INFO: 用例--【已注册过的手机号】---执行通过
2020-12-31 19:37:34,400 - [test_register.py-->line:77] - INFO: 用例--【密码7位】---执行通过
2020-12-31 19:37:34,494 - [test_register.py-->line:77] - INFO: 用例--【密码17位】---执行通过
2020-12-31 19:37:34,596 - [test_register.py-->line:77] - INFO: 用例--【不输入密码】---执行通过
2020-12-31 19:37:34,690 - [test_register.py-->line:77] - INFO: 用例--【注册名11位】---执行通过
2020-12-31 19:37:34,780 - [test_register.py-->line:77] - INFO: 用例--【类型输入非0，1内容】---执行通过
2020-12-31 19:37:34,881 - [test_register.py-->line:77] - INFO: 用例--【不输入类型】---执行通过
2020-12-31 19:37:35,049 - [test_withdraw.py-->line:106] - INFO: 用例--【提现成功-整数】---执行通过
2020-12-31 19:37:35,186 - [test_withdraw.py-->line:106] - INFO: 用例--【提现成功-1位小数】---执行通过
2020-12-31 19:37:35,311 - [test_withdraw.py-->line:106] - INFO: 用例--【提现成功-2位小数】---执行通过
2020-12-31 19:37:35,444 - [test_withdraw.py-->line:106] - INFO: 用例--【提现成功-50万】---执行通过
2020-12-31 19:37:35,572 - [test_withdraw.py-->line:106] - INFO: 用例--【会员id为空】---执行通过
2020-12-31 19:37:35,680 - [test_withdraw.py-->line:106] - INFO: 用例--【会员id为小数】---执行通过
2020-12-31 19:37:35,795 - [test_withdraw.py-->line:102] - ERROR: 用例--【提现金额为0】---执行失败
2020-12-31 19:37:35,796 - [test_withdraw.py-->line:103] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_withdraw.py", line 94, in test_withdraw
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2020-12-31 19:37:35,919 - [test_withdraw.py-->line:102] - ERROR: 用例--【提现金额为负数】---执行失败
2020-12-31 19:37:35,919 - [test_withdraw.py-->line:103] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_withdraw.py", line 95, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2020-12-31 19:37:36,044 - [test_withdraw.py-->line:102] - ERROR: 用例--【提现金额为空】---执行失败
2020-12-31 19:37:36,044 - [test_withdraw.py-->line:103] - ERROR: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_withdraw.py", line 95, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^

2020-12-31 19:37:36,157 - [test_withdraw.py-->line:102] - ERROR: 用例--【提现金额-3位小数】---执行失败
2020-12-31 19:37:36,158 - [test_withdraw.py-->line:103] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_withdraw.py", line 95, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2020-12-31 19:37:36,297 - [test_withdraw.py-->line:102] - ERROR: 用例--【提现金额-大于50万】---执行失败
2020-12-31 19:37:36,297 - [test_withdraw.py-->line:103] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_withdraw.py", line 95, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2020-12-31 19:37:36,404 - [test_withdraw.py-->line:106] - INFO: 用例--【提现金额-非数字】---执行通过
2020-12-31 20:29:04,323 - [test_add.py-->line:63] - ERROR: 用例--【加标成功】---执行失败
2020-12-31 20:29:04,334 - [test_add.py-->line:64] - ERROR: 0 != 1004
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_add.py", line 60, in test_add
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 0 != 1004
2020-12-31 20:29:04,380 - [test_add.py-->line:67] - INFO: 用例--【加标失败—借款人id为空】---执行成功
2020-12-31 20:29:04,422 - [test_add.py-->line:63] - ERROR: 用例--【加标失败—标题为空】---执行失败
2020-12-31 20:29:04,422 - [test_add.py-->line:64] - ERROR: 1 != 1004
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_add.py", line 60, in test_add
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 1004
2020-12-31 20:29:04,465 - [test_add.py-->line:63] - ERROR: 用例--【加标失败—借款金额为空】---执行失败
2020-12-31 20:29:04,466 - [test_add.py-->line:64] - ERROR: 1 != 1004
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_add.py", line 60, in test_add
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 1004
2020-12-31 20:29:04,522 - [test_add.py-->line:63] - ERROR: 用例--【加标失败—年利率为空】---执行失败
2020-12-31 20:29:04,522 - [test_add.py-->line:64] - ERROR: 1 != 1004
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_add.py", line 60, in test_add
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 1004
2020-12-31 20:29:04,569 - [test_add.py-->line:63] - ERROR: 用例--【加标失败—借款期限为空】---执行失败
2020-12-31 20:29:04,570 - [test_add.py-->line:64] - ERROR: 1 != 1004
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_add.py", line 60, in test_add
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 1004
2020-12-31 20:29:04,632 - [test_add.py-->line:63] - ERROR: 用例--【加标失败—借款期限类型为空】---执行失败
2020-12-31 20:29:04,633 - [test_add.py-->line:64] - ERROR: 1 != 1004
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_add.py", line 60, in test_add
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 1004
2020-12-31 20:29:04,685 - [test_add.py-->line:63] - ERROR: 用例--【加标失败—竞标天数为空】---执行失败
2020-12-31 20:29:04,685 - [test_add.py-->line:64] - ERROR: 1 != 1004
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_add.py", line 60, in test_add
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 1004
2020-12-31 20:29:04,733 - [test_add.py-->line:63] - ERROR: 用例--【加标失败—借款金额为负数】---执行失败
2020-12-31 20:29:04,733 - [test_add.py-->line:64] - ERROR: 2 != 1004
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_add.py", line 60, in test_add
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 1004
2020-12-31 20:29:04,792 - [test_add.py-->line:63] - ERROR: 用例--【加标失败—借款金额为小数】---执行失败
2020-12-31 20:29:04,793 - [test_add.py-->line:64] - ERROR: 2 != 1004
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_add.py", line 60, in test_add
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 1004
2020-12-31 20:29:04,855 - [test_login.py-->line:56] - INFO: 用例--【登录成功】---执行通过
2020-12-31 20:29:04,907 - [test_login.py-->line:56] - INFO: 用例--【手机号为空】---执行通过
2020-12-31 20:29:04,953 - [test_login.py-->line:56] - INFO: 用例--【密码为空】---执行通过
2020-12-31 20:29:04,999 - [test_login.py-->line:56] - INFO: 用例--【手机号未注册】---执行通过
2020-12-31 20:29:05,047 - [test_login.py-->line:56] - INFO: 用例--【密码错误】---执行通过
2020-12-31 20:29:05,090 - [test_login.py-->line:56] - INFO: 用例--【手机号格式错误】---执行通过
2020-12-31 20:29:05,311 - [test_recharge.py-->line:113] - INFO: 用例--【充值成功-整数】---执行通过
2020-12-31 20:29:05,486 - [test_recharge.py-->line:113] - INFO: 用例--【充值成功-1位小数】---执行通过
2020-12-31 20:29:05,655 - [test_recharge.py-->line:113] - INFO: 用例--【充值成功-2位小数】---执行通过
2020-12-31 20:29:05,820 - [test_recharge.py-->line:113] - INFO: 用例--【充值成功-50万】---执行通过
2020-12-31 20:29:05,978 - [test_recharge.py-->line:113] - INFO: 用例--【会员id为空】---执行通过
2020-12-31 20:29:06,136 - [test_recharge.py-->line:113] - INFO: 用例--【会员id为小数】---执行通过
2020-12-31 20:29:06,294 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额为0】---执行失败
2020-12-31 20:29:06,294 - [test_recharge.py-->line:110] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_recharge.py", line 98, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2020-12-31 20:29:06,460 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额为负数】---执行失败
2020-12-31 20:29:06,460 - [test_recharge.py-->line:110] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_recharge.py", line 99, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2020-12-31 20:29:06,639 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额为空】---执行失败
2020-12-31 20:29:06,641 - [test_recharge.py-->line:110] - ERROR: 1 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_recharge.py", line 98, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 2
2020-12-31 20:29:06,803 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额-3位小数】---执行失败
2020-12-31 20:29:06,803 - [test_recharge.py-->line:110] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_recharge.py", line 99, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2020-12-31 20:29:06,955 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额-大于50万】---执行失败
2020-12-31 20:29:06,957 - [test_recharge.py-->line:110] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_recharge.py", line 99, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2020-12-31 20:29:07,135 - [test_recharge.py-->line:113] - INFO: 用例--【充值金额-非数字】---执行通过
2020-12-31 20:29:07,250 - [test_register.py-->line:77] - INFO: 用例--【注册成功-带注册名】---执行通过
2020-12-31 20:29:07,367 - [test_register.py-->line:77] - INFO: 用例--【成功-不带用户名】---执行通过
2020-12-31 20:29:07,468 - [test_register.py-->line:77] - INFO: 用例--【不输入手机号】---执行通过
2020-12-31 20:29:07,584 - [test_register.py-->line:77] - INFO: 用例--【手机号长度10位】---执行通过
2020-12-31 20:29:07,689 - [test_register.py-->line:77] - INFO: 用例--【手机号长度12位】---执行通过
2020-12-31 20:29:07,803 - [test_register.py-->line:77] - INFO: 用例--【手机号含有非法字符】---执行通过
2020-12-31 20:29:07,918 - [test_register.py-->line:77] - INFO: 用例--【已注册过的手机号】---执行通过
2020-12-31 20:29:08,042 - [test_register.py-->line:77] - INFO: 用例--【密码7位】---执行通过
2020-12-31 20:29:08,152 - [test_register.py-->line:77] - INFO: 用例--【密码17位】---执行通过
2020-12-31 20:29:08,267 - [test_register.py-->line:77] - INFO: 用例--【不输入密码】---执行通过
2020-12-31 20:29:08,358 - [test_register.py-->line:77] - INFO: 用例--【注册名11位】---执行通过
2020-12-31 20:29:08,472 - [test_register.py-->line:77] - INFO: 用例--【类型输入非0，1内容】---执行通过
2020-12-31 20:29:08,588 - [test_register.py-->line:77] - INFO: 用例--【不输入类型】---执行通过
2020-12-31 20:29:08,841 - [test_withdraw.py-->line:106] - INFO: 用例--【提现成功-整数】---执行通过
2020-12-31 20:29:09,002 - [test_withdraw.py-->line:106] - INFO: 用例--【提现成功-1位小数】---执行通过
2020-12-31 20:29:09,154 - [test_withdraw.py-->line:106] - INFO: 用例--【提现成功-2位小数】---执行通过
2020-12-31 20:29:09,315 - [test_withdraw.py-->line:106] - INFO: 用例--【提现成功-50万】---执行通过
2020-12-31 20:29:09,481 - [test_withdraw.py-->line:106] - INFO: 用例--【会员id为空】---执行通过
2020-12-31 20:29:09,656 - [test_withdraw.py-->line:106] - INFO: 用例--【会员id为小数】---执行通过
2020-12-31 20:29:09,816 - [test_withdraw.py-->line:102] - ERROR: 用例--【提现金额为0】---执行失败
2020-12-31 20:29:09,816 - [test_withdraw.py-->line:103] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_withdraw.py", line 94, in test_withdraw
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2020-12-31 20:29:09,974 - [test_withdraw.py-->line:102] - ERROR: 用例--【提现金额为负数】---执行失败
2020-12-31 20:29:09,975 - [test_withdraw.py-->line:103] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_withdraw.py", line 95, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2020-12-31 20:29:10,131 - [test_withdraw.py-->line:102] - ERROR: 用例--【提现金额为空】---执行失败
2020-12-31 20:29:10,131 - [test_withdraw.py-->line:103] - ERROR: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_withdraw.py", line 95, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^

2020-12-31 20:29:10,307 - [test_withdraw.py-->line:102] - ERROR: 用例--【提现金额-3位小数】---执行失败
2020-12-31 20:29:10,307 - [test_withdraw.py-->line:103] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_withdraw.py", line 95, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2020-12-31 20:29:10,485 - [test_withdraw.py-->line:102] - ERROR: 用例--【提现金额-大于50万】---执行失败
2020-12-31 20:29:10,486 - [test_withdraw.py-->line:103] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_withdraw.py", line 95, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2020-12-31 20:29:10,635 - [test_withdraw.py-->line:106] - INFO: 用例--【提现金额-非数字】---执行通过
2020-12-31 20:32:44,304 - [test_add.py-->line:63] - ERROR: 用例--【加标成功】---执行失败
2020-12-31 20:32:44,305 - [test_add.py-->line:64] - ERROR: 0 != 1004
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_add.py", line 60, in test_add
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 0 != 1004
2020-12-31 20:32:46,877 - [test_add.py-->line:67] - INFO: 用例--【加标失败—借款人id为空】---执行成功
2020-12-31 20:32:46,922 - [test_add.py-->line:63] - ERROR: 用例--【加标失败—标题为空】---执行失败
2020-12-31 20:32:46,924 - [test_add.py-->line:64] - ERROR: 1 != 1004
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_add.py", line 60, in test_add
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 1004
2020-12-31 20:32:46,997 - [test_add.py-->line:63] - ERROR: 用例--【加标失败—借款金额为空】---执行失败
2020-12-31 20:32:46,998 - [test_add.py-->line:64] - ERROR: 1 != 1004
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_add.py", line 60, in test_add
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 1004
2020-12-31 20:32:47,061 - [test_add.py-->line:63] - ERROR: 用例--【加标失败—年利率为空】---执行失败
2020-12-31 20:32:47,061 - [test_add.py-->line:64] - ERROR: 1 != 1004
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_add.py", line 60, in test_add
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 1004
2020-12-31 20:32:47,109 - [test_add.py-->line:63] - ERROR: 用例--【加标失败—借款期限为空】---执行失败
2020-12-31 20:32:47,111 - [test_add.py-->line:64] - ERROR: 1 != 1004
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_add.py", line 60, in test_add
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 1004
2020-12-31 20:32:47,208 - [test_add.py-->line:63] - ERROR: 用例--【加标失败—借款期限类型为空】---执行失败
2020-12-31 20:32:47,209 - [test_add.py-->line:64] - ERROR: 1 != 1004
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_add.py", line 60, in test_add
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 1004
2020-12-31 20:32:47,278 - [test_add.py-->line:63] - ERROR: 用例--【加标失败—竞标天数为空】---执行失败
2020-12-31 20:32:47,278 - [test_add.py-->line:64] - ERROR: 1 != 1004
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_add.py", line 60, in test_add
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 1004
2020-12-31 20:32:47,333 - [test_add.py-->line:63] - ERROR: 用例--【加标失败—借款金额为负数】---执行失败
2020-12-31 20:32:47,333 - [test_add.py-->line:64] - ERROR: 2 != 1004
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_add.py", line 60, in test_add
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 1004
2020-12-31 20:32:47,383 - [test_add.py-->line:63] - ERROR: 用例--【加标失败—借款金额为小数】---执行失败
2020-12-31 20:32:47,383 - [test_add.py-->line:64] - ERROR: 2 != 1004
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_add.py", line 60, in test_add
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 1004
2020-12-31 20:32:47,440 - [test_login.py-->line:56] - INFO: 用例--【登录成功】---执行通过
2020-12-31 20:32:47,496 - [test_login.py-->line:56] - INFO: 用例--【手机号为空】---执行通过
2020-12-31 20:32:47,562 - [test_login.py-->line:56] - INFO: 用例--【密码为空】---执行通过
2020-12-31 20:32:47,632 - [test_login.py-->line:56] - INFO: 用例--【手机号未注册】---执行通过
2020-12-31 20:32:47,700 - [test_login.py-->line:56] - INFO: 用例--【密码错误】---执行通过
2020-12-31 20:32:47,765 - [test_login.py-->line:56] - INFO: 用例--【手机号格式错误】---执行通过
2020-12-31 20:32:47,985 - [test_recharge.py-->line:113] - INFO: 用例--【充值成功-整数】---执行通过
2020-12-31 20:32:48,156 - [test_recharge.py-->line:113] - INFO: 用例--【充值成功-1位小数】---执行通过
2020-12-31 20:32:48,325 - [test_recharge.py-->line:113] - INFO: 用例--【充值成功-2位小数】---执行通过
2020-12-31 20:32:48,490 - [test_recharge.py-->line:113] - INFO: 用例--【充值成功-50万】---执行通过
2020-12-31 20:32:48,656 - [test_recharge.py-->line:113] - INFO: 用例--【会员id为空】---执行通过
2020-12-31 20:32:48,827 - [test_recharge.py-->line:113] - INFO: 用例--【会员id为小数】---执行通过
2020-12-31 20:32:48,989 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额为0】---执行失败
2020-12-31 20:32:48,996 - [test_recharge.py-->line:110] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_recharge.py", line 98, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2020-12-31 20:32:49,192 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额为负数】---执行失败
2020-12-31 20:32:49,192 - [test_recharge.py-->line:110] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_recharge.py", line 99, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2020-12-31 20:32:49,365 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额为空】---执行失败
2020-12-31 20:32:49,366 - [test_recharge.py-->line:110] - ERROR: 1 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_recharge.py", line 98, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 2
2020-12-31 20:32:49,532 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额-3位小数】---执行失败
2020-12-31 20:32:49,533 - [test_recharge.py-->line:110] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_recharge.py", line 99, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2020-12-31 20:32:49,711 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额-大于50万】---执行失败
2020-12-31 20:32:49,711 - [test_recharge.py-->line:110] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_recharge.py", line 99, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2020-12-31 20:32:49,902 - [test_recharge.py-->line:113] - INFO: 用例--【充值金额-非数字】---执行通过
2020-12-31 20:32:50,022 - [test_register.py-->line:77] - INFO: 用例--【注册成功-带注册名】---执行通过
2020-12-31 20:32:50,168 - [test_register.py-->line:77] - INFO: 用例--【成功-不带用户名】---执行通过
2020-12-31 20:32:50,290 - [test_register.py-->line:77] - INFO: 用例--【不输入手机号】---执行通过
2020-12-31 20:32:50,392 - [test_register.py-->line:77] - INFO: 用例--【手机号长度10位】---执行通过
2020-12-31 20:32:50,516 - [test_register.py-->line:77] - INFO: 用例--【手机号长度12位】---执行通过
2020-12-31 20:32:50,648 - [test_register.py-->line:77] - INFO: 用例--【手机号含有非法字符】---执行通过
2020-12-31 20:32:50,766 - [test_register.py-->line:77] - INFO: 用例--【已注册过的手机号】---执行通过
2020-12-31 20:32:50,874 - [test_register.py-->line:77] - INFO: 用例--【密码7位】---执行通过
2020-12-31 20:32:50,976 - [test_register.py-->line:77] - INFO: 用例--【密码17位】---执行通过
2020-12-31 20:32:51,083 - [test_register.py-->line:77] - INFO: 用例--【不输入密码】---执行通过
2020-12-31 20:32:51,178 - [test_register.py-->line:77] - INFO: 用例--【注册名11位】---执行通过
2020-12-31 20:32:51,305 - [test_register.py-->line:77] - INFO: 用例--【类型输入非0，1内容】---执行通过
2020-12-31 20:32:54,831 - [test_add.py-->line:67] - INFO: 用例--【加标成功】---执行成功
2020-12-31 20:32:54,885 - [test_add.py-->line:67] - INFO: 用例--【加标失败—借款人id为空】---执行成功
2020-12-31 20:32:54,926 - [test_add.py-->line:67] - INFO: 用例--【加标失败—标题为空】---执行成功
2020-12-31 20:32:54,978 - [test_add.py-->line:67] - INFO: 用例--【加标失败—借款金额为空】---执行成功
2020-12-31 20:32:55,035 - [test_add.py-->line:67] - INFO: 用例--【加标失败—年利率为空】---执行成功
2020-12-31 20:32:55,081 - [test_add.py-->line:67] - INFO: 用例--【加标失败—借款期限为空】---执行成功
2020-12-31 20:32:55,136 - [test_add.py-->line:67] - INFO: 用例--【加标失败—借款期限类型为空】---执行成功
2020-12-31 20:32:55,191 - [test_add.py-->line:67] - INFO: 用例--【加标失败—竞标天数为空】---执行成功
2020-12-31 20:32:55,234 - [test_add.py-->line:67] - INFO: 用例--【加标失败—借款人id不是当前登录用户】---执行成功
2020-12-31 20:32:55,291 - [test_add.py-->line:67] - INFO: 用例--【加标失败—借款金额为负数】---执行成功
2020-12-31 20:32:55,338 - [test_add.py-->line:67] - INFO: 用例--【加标失败—借款金额为小数】---执行成功
2020-12-31 20:32:55,404 - [test_login.py-->line:56] - INFO: 用例--【登录成功】---执行通过
2020-12-31 20:32:55,445 - [test_login.py-->line:56] - INFO: 用例--【手机号为空】---执行通过
2020-12-31 20:32:55,495 - [test_login.py-->line:56] - INFO: 用例--【密码为空】---执行通过
2020-12-31 20:32:55,555 - [test_login.py-->line:56] - INFO: 用例--【手机号未注册】---执行通过
2020-12-31 20:32:55,616 - [test_login.py-->line:56] - INFO: 用例--【密码错误】---执行通过
2020-12-31 20:32:55,657 - [test_login.py-->line:56] - INFO: 用例--【手机号格式错误】---执行通过
2020-12-31 20:32:55,873 - [test_recharge.py-->line:113] - INFO: 用例--【充值成功-整数】---执行通过
2020-12-31 20:32:56,026 - [test_recharge.py-->line:113] - INFO: 用例--【充值成功-1位小数】---执行通过
2020-12-31 20:32:56,193 - [test_recharge.py-->line:113] - INFO: 用例--【充值成功-2位小数】---执行通过
2020-12-31 20:32:56,365 - [test_recharge.py-->line:113] - INFO: 用例--【充值成功-50万】---执行通过
2020-12-31 20:32:56,514 - [test_recharge.py-->line:113] - INFO: 用例--【会员id为空】---执行通过
2020-12-31 20:32:56,689 - [test_recharge.py-->line:113] - INFO: 用例--【会员id为小数】---执行通过
2020-12-31 20:32:56,882 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额为0】---执行失败
2020-12-31 20:32:56,882 - [test_recharge.py-->line:110] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_recharge.py", line 98, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2020-12-31 20:32:57,047 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额为负数】---执行失败
2020-12-31 20:32:57,048 - [test_recharge.py-->line:110] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_recharge.py", line 99, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2020-12-31 20:32:57,200 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额为空】---执行失败
2020-12-31 20:32:57,200 - [test_recharge.py-->line:110] - ERROR: 1 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_recharge.py", line 98, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 2
2020-12-31 20:32:57,357 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额-3位小数】---执行失败
2020-12-31 20:32:57,357 - [test_recharge.py-->line:110] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_recharge.py", line 99, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2020-12-31 20:32:57,509 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额-大于50万】---执行失败
2020-12-31 20:32:57,509 - [test_recharge.py-->line:110] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_recharge.py", line 99, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2020-12-31 20:32:57,671 - [test_recharge.py-->line:113] - INFO: 用例--【充值金额-非数字】---执行通过
2020-12-31 20:32:57,797 - [test_register.py-->line:77] - INFO: 用例--【注册成功-带注册名】---执行通过
2020-12-31 20:32:57,908 - [test_register.py-->line:77] - INFO: 用例--【成功-不带用户名】---执行通过
2020-12-31 20:32:58,006 - [test_register.py-->line:77] - INFO: 用例--【不输入手机号】---执行通过
2020-12-31 20:32:58,112 - [test_register.py-->line:77] - INFO: 用例--【手机号长度10位】---执行通过
2020-12-31 20:32:58,201 - [test_register.py-->line:77] - INFO: 用例--【手机号长度12位】---执行通过
2020-12-31 20:32:58,297 - [test_register.py-->line:77] - INFO: 用例--【手机号含有非法字符】---执行通过
2020-12-31 20:32:58,410 - [test_register.py-->line:77] - INFO: 用例--【已注册过的手机号】---执行通过
2020-12-31 20:32:58,507 - [test_register.py-->line:77] - INFO: 用例--【密码7位】---执行通过
2020-12-31 20:32:58,624 - [test_register.py-->line:77] - INFO: 用例--【密码17位】---执行通过
2020-12-31 20:32:58,738 - [test_register.py-->line:77] - INFO: 用例--【不输入密码】---执行通过
2020-12-31 20:32:58,850 - [test_register.py-->line:77] - INFO: 用例--【注册名11位】---执行通过
2020-12-31 20:32:58,945 - [test_register.py-->line:77] - INFO: 用例--【类型输入非0，1内容】---执行通过
2020-12-31 20:32:59,062 - [test_register.py-->line:77] - INFO: 用例--【不输入类型】---执行通过
2020-12-31 20:32:59,253 - [test_withdraw.py-->line:106] - INFO: 用例--【提现成功-整数】---执行通过
2020-12-31 20:32:59,391 - [test_withdraw.py-->line:106] - INFO: 用例--【提现成功-1位小数】---执行通过
2020-12-31 20:32:59,525 - [test_withdraw.py-->line:106] - INFO: 用例--【提现成功-2位小数】---执行通过
2020-12-31 20:32:59,664 - [test_withdraw.py-->line:106] - INFO: 用例--【提现成功-50万】---执行通过
2020-12-31 20:32:59,805 - [test_withdraw.py-->line:106] - INFO: 用例--【会员id为空】---执行通过
2020-12-31 20:32:59,937 - [test_withdraw.py-->line:106] - INFO: 用例--【会员id为小数】---执行通过
2020-12-31 20:33:00,088 - [test_withdraw.py-->line:102] - ERROR: 用例--【提现金额为0】---执行失败
2020-12-31 20:33:00,088 - [test_withdraw.py-->line:103] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_withdraw.py", line 94, in test_withdraw
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2020-12-31 20:33:00,230 - [test_withdraw.py-->line:102] - ERROR: 用例--【提现金额为负数】---执行失败
2020-12-31 20:33:00,230 - [test_withdraw.py-->line:103] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_withdraw.py", line 95, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2020-12-31 20:33:00,380 - [test_withdraw.py-->line:102] - ERROR: 用例--【提现金额为空】---执行失败
2020-12-31 20:33:00,381 - [test_withdraw.py-->line:103] - ERROR: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_withdraw.py", line 95, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^

2020-12-31 20:33:00,505 - [test_withdraw.py-->line:102] - ERROR: 用例--【提现金额-3位小数】---执行失败
2020-12-31 20:33:00,506 - [test_withdraw.py-->line:103] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_withdraw.py", line 95, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2020-12-31 20:33:00,659 - [test_withdraw.py-->line:102] - ERROR: 用例--【提现金额-大于50万】---执行失败
2020-12-31 20:33:00,660 - [test_withdraw.py-->line:103] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_withdraw.py", line 95, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2020-12-31 20:33:00,803 - [test_withdraw.py-->line:106] - INFO: 用例--【提现金额-非数字】---执行通过
2020-12-31 20:41:42,798 - [test_add.py-->line:85] - INFO: 用例--【加标成功】---执行成功
2020-12-31 20:41:42,925 - [test_add.py-->line:85] - INFO: 用例--【加标失败—借款人id为空】---执行成功
2020-12-31 20:41:43,070 - [test_add.py-->line:85] - INFO: 用例--【加标失败—标题为空】---执行成功
2020-12-31 20:41:43,192 - [test_add.py-->line:85] - INFO: 用例--【加标失败—借款金额为空】---执行成功
2020-12-31 20:41:43,323 - [test_add.py-->line:85] - INFO: 用例--【加标失败—年利率为空】---执行成功
2020-12-31 20:41:43,445 - [test_add.py-->line:85] - INFO: 用例--【加标失败—借款期限为空】---执行成功
2020-12-31 20:41:43,582 - [test_add.py-->line:85] - INFO: 用例--【加标失败—借款期限类型为空】---执行成功
2020-12-31 20:41:43,721 - [test_add.py-->line:85] - INFO: 用例--【加标失败—竞标天数为空】---执行成功
2020-12-31 20:41:43,840 - [test_add.py-->line:85] - INFO: 用例--【加标失败—借款人id不是当前登录用户】---执行成功
2020-12-31 20:41:43,969 - [test_add.py-->line:85] - INFO: 用例--【加标失败—借款金额为负数】---执行成功
2020-12-31 20:41:44,108 - [test_add.py-->line:85] - INFO: 用例--【加标失败—借款金额为小数】---执行成功
2020-12-31 21:43:32,030 - [test_audit.py-->line:119] - INFO: 用例--【审核通过】---执行通过
2020-12-31 21:43:32,137 - [test_audit.py-->line:119] - INFO: 用例--【审核不通过】---执行通过
2020-12-31 21:43:32,245 - [test_audit.py-->line:119] - INFO: 用例--【项目不待审核状态】---执行通过
2020-12-31 21:43:32,463 - [test_audit.py-->line:119] - INFO: 用例--【项目id为空】---执行通过
2020-12-31 21:43:32,563 - [test_audit.py-->line:119] - INFO: 用例--【项目id不存在】---执行通过
2020-12-31 21:45:26,173 - [test_audit.py-->line:119] - INFO: 用例--【审核通过】---执行通过
2020-12-31 21:45:26,299 - [test_audit.py-->line:119] - INFO: 用例--【审核不通过】---执行通过
2020-12-31 21:45:26,396 - [test_audit.py-->line:119] - INFO: 用例--【项目不待审核状态】---执行通过
2020-12-31 21:45:26,541 - [test_audit.py-->line:119] - INFO: 用例--【参数approved_or_not为空】---执行通过
2020-12-31 21:45:26,655 - [test_audit.py-->line:119] - INFO: 用例--【项目id为空】---执行通过
2020-12-31 21:45:26,756 - [test_audit.py-->line:119] - INFO: 用例--【项目id不存在】---执行通过
2020-12-31 21:49:23,625 - [test_audit.py-->line:121] - INFO: 用例--【审核通过】---执行通过
2020-12-31 21:49:23,727 - [test_audit.py-->line:121] - INFO: 用例--【审核不通过】---执行通过
2020-12-31 21:49:23,853 - [test_audit.py-->line:121] - INFO: 用例--【项目不待审核状态】---执行通过
2020-12-31 21:49:23,945 - [test_audit.py-->line:121] - INFO: 用例--【参数approved_or_not为空】---执行通过
2020-12-31 21:49:24,046 - [test_audit.py-->line:121] - INFO: 用例--【项目id为空】---执行通过
2020-12-31 21:49:24,146 - [test_audit.py-->line:121] - INFO: 用例--【项目id不存在】---执行通过
2020-12-31 22:00:46,300 - [test_audit.py-->line:127] - INFO: 用例--【审核通过】---执行通过
2020-12-31 22:00:46,481 - [test_audit.py-->line:127] - INFO: 用例--【审核不通过】---执行通过
2020-12-31 22:00:49,591 - [test_audit.py-->line:127] - INFO: 用例--【项目不待审核状态】---执行通过
2020-12-31 22:00:49,720 - [test_audit.py-->line:127] - INFO: 用例--【参数approved_or_not为空】---执行通过
2020-12-31 22:00:49,829 - [test_audit.py-->line:127] - INFO: 用例--【项目id为空】---执行通过
2020-12-31 22:00:49,945 - [test_audit.py-->line:127] - INFO: 用例--【项目id不存在】---执行通过
2020-12-31 22:01:52,710 - [test_add.py-->line:79] - INFO: 用例--【加标成功】---执行成功
2020-12-31 22:01:52,857 - [test_add.py-->line:79] - INFO: 用例--【加标失败—借款人id为空】---执行成功
2020-12-31 22:01:53,001 - [test_add.py-->line:79] - INFO: 用例--【加标失败—标题为空】---执行成功
2020-12-31 22:01:53,145 - [test_add.py-->line:79] - INFO: 用例--【加标失败—借款金额为空】---执行成功
2020-12-31 22:01:53,281 - [test_add.py-->line:79] - INFO: 用例--【加标失败—年利率为空】---执行成功
2020-12-31 22:01:53,415 - [test_add.py-->line:79] - INFO: 用例--【加标失败—借款期限为空】---执行成功
2020-12-31 22:01:53,550 - [test_add.py-->line:79] - INFO: 用例--【加标失败—借款期限类型为空】---执行成功
2020-12-31 22:01:53,672 - [test_add.py-->line:79] - INFO: 用例--【加标失败—竞标天数为空】---执行成功
2020-12-31 22:01:53,802 - [test_add.py-->line:79] - INFO: 用例--【加标失败—借款人id不是当前登录用户】---执行成功
2020-12-31 22:01:53,920 - [test_add.py-->line:79] - INFO: 用例--【加标失败—借款金额为负数】---执行成功
2020-12-31 22:01:54,051 - [test_add.py-->line:79] - INFO: 用例--【加标失败—借款金额为小数】---执行成功
2020-12-31 22:01:54,292 - [test_audit.py-->line:128] - INFO: 用例--【审核通过】---执行通过
2020-12-31 22:01:54,438 - [test_audit.py-->line:128] - INFO: 用例--【审核不通过】---执行通过
2020-12-31 22:01:54,559 - [test_audit.py-->line:128] - INFO: 用例--【项目不待审核状态】---执行通过
2020-12-31 22:01:54,647 - [test_audit.py-->line:128] - INFO: 用例--【参数approved_or_not为空】---执行通过
2020-12-31 22:01:54,766 - [test_audit.py-->line:128] - INFO: 用例--【项目id为空】---执行通过
2020-12-31 22:01:54,880 - [test_audit.py-->line:128] - INFO: 用例--【项目id不存在】---执行通过
2020-12-31 22:01:54,918 - [test_login.py-->line:56] - INFO: 用例--【登录成功】---执行通过
2020-12-31 22:01:54,959 - [test_login.py-->line:56] - INFO: 用例--【手机号为空】---执行通过
2020-12-31 22:01:54,998 - [test_login.py-->line:56] - INFO: 用例--【密码为空】---执行通过
2020-12-31 22:01:55,064 - [test_login.py-->line:56] - INFO: 用例--【手机号未注册】---执行通过
2020-12-31 22:01:55,128 - [test_login.py-->line:56] - INFO: 用例--【密码错误】---执行通过
2020-12-31 22:01:55,186 - [test_login.py-->line:56] - INFO: 用例--【手机号格式错误】---执行通过
2020-12-31 22:01:55,401 - [test_recharge.py-->line:113] - INFO: 用例--【充值成功-整数】---执行通过
2020-12-31 22:01:55,548 - [test_recharge.py-->line:113] - INFO: 用例--【充值成功-1位小数】---执行通过
2020-12-31 22:01:55,694 - [test_recharge.py-->line:113] - INFO: 用例--【充值成功-2位小数】---执行通过
2020-12-31 22:01:55,857 - [test_recharge.py-->line:113] - INFO: 用例--【充值成功-50万】---执行通过
2020-12-31 22:01:56,020 - [test_recharge.py-->line:113] - INFO: 用例--【会员id为空】---执行通过
2020-12-31 22:01:56,161 - [test_recharge.py-->line:113] - INFO: 用例--【会员id为小数】---执行通过
2020-12-31 22:01:56,307 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额为0】---执行失败
2020-12-31 22:01:56,307 - [test_recharge.py-->line:110] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_recharge.py", line 98, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2020-12-31 22:01:56,473 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额为负数】---执行失败
2020-12-31 22:01:56,473 - [test_recharge.py-->line:110] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_recharge.py", line 99, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2020-12-31 22:01:56,629 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额为空】---执行失败
2020-12-31 22:01:56,629 - [test_recharge.py-->line:110] - ERROR: 1 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_recharge.py", line 98, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 2
2020-12-31 22:01:56,795 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额-3位小数】---执行失败
2020-12-31 22:01:56,796 - [test_recharge.py-->line:110] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_recharge.py", line 99, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2020-12-31 22:01:56,969 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额-大于50万】---执行失败
2020-12-31 22:01:56,971 - [test_recharge.py-->line:110] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_recharge.py", line 99, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2020-12-31 22:01:57,119 - [test_recharge.py-->line:113] - INFO: 用例--【充值金额-非数字】---执行通过
2020-12-31 22:01:57,221 - [test_register.py-->line:77] - INFO: 用例--【注册成功-带注册名】---执行通过
2020-12-31 22:01:57,328 - [test_register.py-->line:77] - INFO: 用例--【成功-不带用户名】---执行通过
2020-12-31 22:01:57,411 - [test_register.py-->line:77] - INFO: 用例--【不输入手机号】---执行通过
2020-12-31 22:01:57,516 - [test_register.py-->line:77] - INFO: 用例--【手机号长度10位】---执行通过
2020-12-31 22:01:57,615 - [test_register.py-->line:77] - INFO: 用例--【手机号长度12位】---执行通过
2020-12-31 22:01:57,702 - [test_register.py-->line:77] - INFO: 用例--【手机号含有非法字符】---执行通过
2020-12-31 22:01:57,806 - [test_register.py-->line:77] - INFO: 用例--【已注册过的手机号】---执行通过
2020-12-31 22:01:57,897 - [test_register.py-->line:77] - INFO: 用例--【密码7位】---执行通过
2020-12-31 22:01:57,980 - [test_register.py-->line:77] - INFO: 用例--【密码17位】---执行通过
2020-12-31 22:01:58,068 - [test_register.py-->line:77] - INFO: 用例--【不输入密码】---执行通过
2020-12-31 22:01:58,153 - [test_register.py-->line:77] - INFO: 用例--【注册名11位】---执行通过
2020-12-31 22:01:58,240 - [test_register.py-->line:77] - INFO: 用例--【类型输入非0，1内容】---执行通过
2020-12-31 22:01:58,336 - [test_register.py-->line:77] - INFO: 用例--【不输入类型】---执行通过
2020-12-31 22:01:58,534 - [test_withdraw.py-->line:106] - INFO: 用例--【提现成功-整数】---执行通过
2020-12-31 22:01:58,690 - [test_withdraw.py-->line:106] - INFO: 用例--【提现成功-1位小数】---执行通过
2020-12-31 22:01:58,823 - [test_withdraw.py-->line:106] - INFO: 用例--【提现成功-2位小数】---执行通过
2020-12-31 22:01:58,952 - [test_withdraw.py-->line:106] - INFO: 用例--【提现成功-50万】---执行通过
2020-12-31 22:01:59,085 - [test_withdraw.py-->line:106] - INFO: 用例--【会员id为空】---执行通过
2020-12-31 22:01:59,210 - [test_withdraw.py-->line:106] - INFO: 用例--【会员id为小数】---执行通过
2020-12-31 22:01:59,344 - [test_withdraw.py-->line:102] - ERROR: 用例--【提现金额为0】---执行失败
2020-12-31 22:01:59,344 - [test_withdraw.py-->line:103] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_withdraw.py", line 94, in test_withdraw
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2020-12-31 22:01:59,480 - [test_withdraw.py-->line:102] - ERROR: 用例--【提现金额为负数】---执行失败
2020-12-31 22:01:59,481 - [test_withdraw.py-->line:103] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_withdraw.py", line 95, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2020-12-31 22:01:59,623 - [test_withdraw.py-->line:102] - ERROR: 用例--【提现金额为空】---执行失败
2020-12-31 22:01:59,623 - [test_withdraw.py-->line:103] - ERROR: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_withdraw.py", line 95, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^

2020-12-31 22:01:59,771 - [test_withdraw.py-->line:102] - ERROR: 用例--【提现金额-3位小数】---执行失败
2020-12-31 22:01:59,772 - [test_withdraw.py-->line:103] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_withdraw.py", line 95, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2020-12-31 22:01:59,912 - [test_withdraw.py-->line:102] - ERROR: 用例--【提现金额-大于50万】---执行失败
2020-12-31 22:01:59,912 - [test_withdraw.py-->line:103] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_26day_project\testcases\test_withdraw.py", line 95, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2020-12-31 22:02:00,059 - [test_withdraw.py-->line:106] - INFO: 用例--【提现金额-非数字】---执行通过
2021-01-05 19:49:00,484 - [test_add.py-->line:79] - INFO: 用例--【加标成功】---执行成功
2021-01-05 19:49:00,646 - [test_add.py-->line:79] - INFO: 用例--【加标失败—借款人id为空】---执行成功
2021-01-05 19:49:00,818 - [test_add.py-->line:79] - INFO: 用例--【加标失败—标题为空】---执行成功
2021-01-05 19:49:00,992 - [test_add.py-->line:79] - INFO: 用例--【加标失败—借款金额为空】---执行成功
2021-01-05 19:49:01,167 - [test_add.py-->line:79] - INFO: 用例--【加标失败—年利率为空】---执行成功
2021-01-05 19:49:01,344 - [test_add.py-->line:79] - INFO: 用例--【加标失败—借款期限为空】---执行成功
2021-01-05 19:49:01,526 - [test_add.py-->line:79] - INFO: 用例--【加标失败—借款期限类型为空】---执行成功
2021-01-05 19:49:01,716 - [test_add.py-->line:79] - INFO: 用例--【加标失败—竞标天数为空】---执行成功
2021-01-05 19:49:01,875 - [test_add.py-->line:79] - INFO: 用例--【加标失败—借款人id不是当前登录用户】---执行成功
2021-01-05 19:49:02,073 - [test_add.py-->line:79] - INFO: 用例--【加标失败—借款金额为负数】---执行成功
2021-01-05 19:49:02,251 - [test_add.py-->line:79] - INFO: 用例--【加标失败—借款金额为小数】---执行成功
2021-01-05 19:49:02,511 - [test_audit.py-->line:128] - INFO: 用例--【审核通过】---执行通过
2021-01-05 19:49:02,637 - [test_audit.py-->line:128] - INFO: 用例--【审核不通过】---执行通过
2021-01-05 19:49:02,732 - [test_audit.py-->line:128] - INFO: 用例--【项目不待审核状态】---执行通过
2021-01-05 19:49:02,819 - [test_audit.py-->line:128] - INFO: 用例--【参数approved_or_not为空】---执行通过
2021-01-05 19:49:02,911 - [test_audit.py-->line:128] - INFO: 用例--【项目id为空】---执行通过
2021-01-05 19:49:03,043 - [test_audit.py-->line:128] - INFO: 用例--【项目id不存在】---执行通过
2021-01-05 19:49:03,083 - [test_login.py-->line:56] - INFO: 用例--【登录成功】---执行通过
2021-01-05 19:49:03,122 - [test_login.py-->line:56] - INFO: 用例--【手机号为空】---执行通过
2021-01-05 19:49:03,175 - [test_login.py-->line:56] - INFO: 用例--【密码为空】---执行通过
2021-01-05 19:49:03,237 - [test_login.py-->line:56] - INFO: 用例--【手机号未注册】---执行通过
2021-01-05 19:49:03,312 - [test_login.py-->line:56] - INFO: 用例--【密码错误】---执行通过
2021-01-05 19:49:03,364 - [test_login.py-->line:56] - INFO: 用例--【手机号格式错误】---执行通过
2021-01-05 19:49:03,544 - [test_recharge.py-->line:113] - INFO: 用例--【充值成功-整数】---执行通过
2021-01-05 19:49:03,681 - [test_recharge.py-->line:113] - INFO: 用例--【充值成功-1位小数】---执行通过
2021-01-05 19:49:03,808 - [test_recharge.py-->line:113] - INFO: 用例--【充值成功-2位小数】---执行通过
2021-01-05 19:49:03,938 - [test_recharge.py-->line:113] - INFO: 用例--【充值成功-50万】---执行通过
2021-01-05 19:49:04,067 - [test_recharge.py-->line:113] - INFO: 用例--【会员id为空】---执行通过
2021-01-05 19:49:04,205 - [test_recharge.py-->line:113] - INFO: 用例--【会员id为小数】---执行通过
2021-01-05 19:49:04,336 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额为0】---执行失败
2021-01-05 19:49:04,337 - [test_recharge.py-->line:110] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_recharge.py", line 98, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2021-01-05 19:49:04,474 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额为负数】---执行失败
2021-01-05 19:49:04,475 - [test_recharge.py-->line:110] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_recharge.py", line 99, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2021-01-05 19:49:04,606 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额为空】---执行失败
2021-01-05 19:49:04,606 - [test_recharge.py-->line:110] - ERROR: 1 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_recharge.py", line 98, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 2
2021-01-05 19:49:04,730 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额-3位小数】---执行失败
2021-01-05 19:49:04,730 - [test_recharge.py-->line:110] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_recharge.py", line 99, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2021-01-05 19:49:04,862 - [test_recharge.py-->line:109] - ERROR: 用例--【充值金额-大于50万】---执行失败
2021-01-05 19:49:04,862 - [test_recharge.py-->line:110] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_recharge.py", line 99, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2021-01-05 19:49:04,999 - [test_recharge.py-->line:113] - INFO: 用例--【充值金额-非数字】---执行通过
2021-01-05 19:49:05,107 - [test_register.py-->line:77] - INFO: 用例--【注册成功-带注册名】---执行通过
2021-01-05 19:49:05,221 - [test_register.py-->line:77] - INFO: 用例--【成功-不带用户名】---执行通过
2021-01-05 19:49:05,308 - [test_register.py-->line:77] - INFO: 用例--【不输入手机号】---执行通过
2021-01-05 19:49:05,395 - [test_register.py-->line:77] - INFO: 用例--【手机号长度10位】---执行通过
2021-01-05 19:49:05,503 - [test_register.py-->line:77] - INFO: 用例--【手机号长度12位】---执行通过
2021-01-05 19:49:05,606 - [test_register.py-->line:77] - INFO: 用例--【手机号含有非法字符】---执行通过
2021-01-05 19:49:05,710 - [test_register.py-->line:77] - INFO: 用例--【已注册过的手机号】---执行通过
2021-01-05 19:49:05,814 - [test_register.py-->line:77] - INFO: 用例--【密码7位】---执行通过
2021-01-05 19:49:05,899 - [test_register.py-->line:77] - INFO: 用例--【密码17位】---执行通过
2021-01-05 19:49:05,987 - [test_register.py-->line:77] - INFO: 用例--【不输入密码】---执行通过
2021-01-05 19:49:06,084 - [test_register.py-->line:77] - INFO: 用例--【注册名11位】---执行通过
2021-01-05 19:49:06,175 - [test_register.py-->line:77] - INFO: 用例--【类型输入非0，1内容】---执行通过
2021-01-05 19:49:06,275 - [test_register.py-->line:77] - INFO: 用例--【不输入类型】---执行通过
2021-01-05 19:49:06,461 - [test_withdraw.py-->line:106] - INFO: 用例--【提现成功-整数】---执行通过
2021-01-05 19:49:06,605 - [test_withdraw.py-->line:106] - INFO: 用例--【提现成功-1位小数】---执行通过
2021-01-05 19:49:06,740 - [test_withdraw.py-->line:106] - INFO: 用例--【提现成功-2位小数】---执行通过
2021-01-05 19:49:06,878 - [test_withdraw.py-->line:106] - INFO: 用例--【提现成功-50万】---执行通过
2021-01-05 19:49:07,019 - [test_withdraw.py-->line:106] - INFO: 用例--【会员id为空】---执行通过
2021-01-05 19:49:07,144 - [test_withdraw.py-->line:106] - INFO: 用例--【会员id为小数】---执行通过
2021-01-05 19:49:07,282 - [test_withdraw.py-->line:102] - ERROR: 用例--【提现金额为0】---执行失败
2021-01-05 19:49:07,283 - [test_withdraw.py-->line:103] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_withdraw.py", line 94, in test_withdraw
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2021-01-05 19:49:07,408 - [test_withdraw.py-->line:102] - ERROR: 用例--【提现金额为负数】---执行失败
2021-01-05 19:49:07,409 - [test_withdraw.py-->line:103] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_withdraw.py", line 95, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2021-01-05 19:49:07,535 - [test_withdraw.py-->line:102] - ERROR: 用例--【提现金额为空】---执行失败
2021-01-05 19:49:07,535 - [test_withdraw.py-->line:103] - ERROR: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_withdraw.py", line 95, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^

2021-01-05 19:49:07,672 - [test_withdraw.py-->line:102] - ERROR: 用例--【提现金额-3位小数】---执行失败
2021-01-05 19:49:07,672 - [test_withdraw.py-->line:103] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_withdraw.py", line 95, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2021-01-05 19:49:07,812 - [test_withdraw.py-->line:102] - ERROR: 用例--【提现金额-大于50万】---执行失败
2021-01-05 19:49:07,813 - [test_withdraw.py-->line:103] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_withdraw.py", line 95, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2021-01-05 19:49:07,939 - [test_withdraw.py-->line:106] - INFO: 用例--【提现金额-非数字】---执行通过
2021-01-05 21:01:51,104 - [test_invest.py-->line:66] - INFO: 用例--【投资人id为空】---执行成功
2021-01-05 21:02:53,285 - [test_invest.py-->line:66] - INFO: 用例--【投资人id为空】---执行成功
2021-01-05 21:07:14,504 - [test_invest.py-->line:66] - INFO: 用例--【投资人id为空】---执行成功
2021-01-05 21:07:24,710 - [test_invest.py-->line:62] - ERROR: 用例--【投资人正常投资】---执行失败
2021-01-05 21:07:24,711 - [test_invest.py-->line:63] - ERROR:  :: 0 != 2
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 0 != 2

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_invest.py", line 59, in test_invest
    self.assertEqual(expected['code'], res['code'])
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 0 != 2
2021-01-05 21:07:24,759 - [test_invest.py-->line:66] - INFO: 用例--【投资人id为空】---执行成功
2021-01-05 21:07:24,817 - [test_invest.py-->line:66] - INFO: 用例--【标id为空】---执行成功
2021-01-05 21:07:24,874 - [test_invest.py-->line:62] - ERROR: 用例--【投资金额为空】---执行失败
2021-01-05 21:07:24,875 - [test_invest.py-->line:63] - ERROR:  :: 金额为空 != 余额为空
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_invest.py", line 60, in test_invest
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 金额为空 != 余额为空
2021-01-05 21:07:24,922 - [test_invest.py-->line:62] - ERROR: 用例--【投资金额为非100的整数倍】---执行失败
2021-01-05 21:07:24,922 - [test_invest.py-->line:63] - ERROR:  :: 投资金额必须大于100，并且可以被100整除 != 充值金额必须大于100，并且可以被100整除
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '投资金额必须大于100，并且可以被100整除' != '充值金额必须大于100，并且可以被100整除'
- 投资金额必须大于100，并且可以被100整除
? ^^
+ 充值金额必须大于100，并且可以被100整除
? ^^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_invest.py", line 60, in test_invest
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 投资金额必须大于100，并且可以被100整除 != 充值金额必须大于100，并且可以被100整除
2021-01-05 21:07:24,971 - [test_invest.py-->line:62] - ERROR: 用例--【投资金额大于可投余额】---执行失败
2021-01-05 21:07:24,971 - [test_invest.py-->line:63] - ERROR:  :: 该标可投金额不足 != 该项目不在竞标中状态
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '该标可投金额不足' != '该项目不在竞标中状态'
- 该标可投金额不足
+ 该项目不在竞标中状态


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_invest.py", line 60, in test_invest
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 该标可投金额不足 != 该项目不在竞标中状态
2021-01-05 21:07:25,033 - [test_invest.py-->line:62] - ERROR: 用例--【投资金额超过用户余额】---执行失败
2021-01-05 21:07:25,033 - [test_invest.py-->line:63] - ERROR:  :: 1002 != 2
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1002 != 2

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_invest.py", line 59, in test_invest
    self.assertEqual(expected['code'], res['code'])
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 1002 != 2
2021-01-05 21:08:07,057 - [test_add.py-->line:65] - INFO: 用例--【加标成功】---执行成功
2021-01-05 21:08:07,202 - [test_add.py-->line:65] - INFO: 用例--【加标失败—借款人id为空】---执行成功
2021-01-05 21:08:07,358 - [test_add.py-->line:65] - INFO: 用例--【加标失败—标题为空】---执行成功
2021-01-05 21:08:07,506 - [test_add.py-->line:65] - INFO: 用例--【加标失败—借款金额为空】---执行成功
2021-01-05 21:08:07,648 - [test_add.py-->line:65] - INFO: 用例--【加标失败—年利率为空】---执行成功
2021-01-05 21:08:07,784 - [test_add.py-->line:65] - INFO: 用例--【加标失败—借款期限为空】---执行成功
2021-01-05 21:08:07,937 - [test_add.py-->line:65] - INFO: 用例--【加标失败—借款期限类型为空】---执行成功
2021-01-05 21:08:08,088 - [test_add.py-->line:65] - INFO: 用例--【加标失败—竞标天数为空】---执行成功
2021-01-05 21:08:08,245 - [test_add.py-->line:65] - INFO: 用例--【加标失败—借款人id不是当前登录用户】---执行成功
2021-01-05 21:08:08,386 - [test_add.py-->line:65] - INFO: 用例--【加标失败—借款金额为负数】---执行成功
2021-01-05 21:08:08,541 - [test_add.py-->line:65] - INFO: 用例--【加标失败—借款金额为小数】---执行成功
2021-01-05 21:08:08,787 - [test_audit.py-->line:80] - INFO: 用例--【审核通过】---执行通过
2021-01-05 21:08:08,929 - [test_audit.py-->line:80] - INFO: 用例--【审核不通过】---执行通过
2021-01-05 21:08:09,035 - [test_audit.py-->line:80] - INFO: 用例--【项目不待审核状态】---执行通过
2021-01-05 21:08:09,138 - [test_audit.py-->line:80] - INFO: 用例--【参数approved_or_not为空】---执行通过
2021-01-05 21:08:09,234 - [test_audit.py-->line:80] - INFO: 用例--【项目id为空】---执行通过
2021-01-05 21:08:09,333 - [test_audit.py-->line:80] - INFO: 用例--【项目id不存在】---执行通过
2021-01-05 21:08:09,609 - [test_invest.py-->line:62] - ERROR: 用例--【投资人正常投资】---执行失败
2021-01-05 21:08:09,609 - [test_invest.py-->line:63] - ERROR: 0 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_invest.py", line 59, in test_invest
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 0 != 2
2021-01-05 21:08:09,664 - [test_invest.py-->line:66] - INFO: 用例--【投资人id为空】---执行成功
2021-01-05 21:08:09,723 - [test_invest.py-->line:66] - INFO: 用例--【标id为空】---执行成功
2021-01-05 21:08:09,776 - [test_invest.py-->line:62] - ERROR: 用例--【投资金额为空】---执行失败
2021-01-05 21:08:09,776 - [test_invest.py-->line:63] - ERROR: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_invest.py", line 60, in test_invest
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^

2021-01-05 21:08:09,832 - [test_invest.py-->line:62] - ERROR: 用例--【投资金额为非100的整数倍】---执行失败
2021-01-05 21:08:09,832 - [test_invest.py-->line:63] - ERROR: '投资金额必须大于100，并且可以被100整除' != '充值金额必须大于100，并且可以被100整除'
- 投资金额必须大于100，并且可以被100整除
? ^^
+ 充值金额必须大于100，并且可以被100整除
? ^^
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_invest.py", line 60, in test_invest
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '投资金额必须大于100，并且可以被100整除' != '充值金额必须大于100，并且可以被100整除'
- 投资金额必须大于100，并且可以被100整除
? ^^
+ 充值金额必须大于100，并且可以被100整除
? ^^

2021-01-05 21:08:09,895 - [test_invest.py-->line:62] - ERROR: 用例--【投资金额大于可投余额】---执行失败
2021-01-05 21:08:09,895 - [test_invest.py-->line:63] - ERROR: '该标可投金额不足' != '该项目不在竞标中状态'
- 该标可投金额不足
+ 该项目不在竞标中状态
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_invest.py", line 60, in test_invest
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '该标可投金额不足' != '该项目不在竞标中状态'
- 该标可投金额不足
+ 该项目不在竞标中状态

2021-01-05 21:08:09,939 - [test_invest.py-->line:62] - ERROR: 用例--【投资金额超过用户余额】---执行失败
2021-01-05 21:08:09,940 - [test_invest.py-->line:63] - ERROR: 1002 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_invest.py", line 59, in test_invest
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1002 != 2
2021-01-05 21:08:09,993 - [test_login.py-->line:56] - INFO: 用例--【登录成功】---执行通过
2021-01-05 21:08:10,031 - [test_login.py-->line:56] - INFO: 用例--【手机号为空】---执行通过
2021-01-05 21:08:10,085 - [test_login.py-->line:56] - INFO: 用例--【密码为空】---执行通过
2021-01-05 21:08:10,155 - [test_login.py-->line:56] - INFO: 用例--【手机号未注册】---执行通过
2021-01-05 21:08:10,229 - [test_login.py-->line:56] - INFO: 用例--【密码错误】---执行通过
2021-01-05 21:08:10,292 - [test_login.py-->line:56] - INFO: 用例--【手机号格式错误】---执行通过
2021-01-05 21:08:10,524 - [test_recharge.py-->line:95] - INFO: 用例--【充值成功-整数】---执行通过
2021-01-05 21:08:10,689 - [test_recharge.py-->line:95] - INFO: 用例--【充值成功-1位小数】---执行通过
2021-01-05 21:08:10,859 - [test_recharge.py-->line:95] - INFO: 用例--【充值成功-2位小数】---执行通过
2021-01-05 21:08:11,015 - [test_recharge.py-->line:95] - INFO: 用例--【充值成功-50万】---执行通过
2021-01-05 21:08:11,191 - [test_recharge.py-->line:95] - INFO: 用例--【会员id为空】---执行通过
2021-01-05 21:08:11,361 - [test_recharge.py-->line:95] - INFO: 用例--【会员id为小数】---执行通过
2021-01-05 21:08:11,532 - [test_recharge.py-->line:91] - ERROR: 用例--【充值金额为0】---执行失败
2021-01-05 21:08:11,532 - [test_recharge.py-->line:92] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_recharge.py", line 80, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2021-01-05 21:08:11,689 - [test_recharge.py-->line:91] - ERROR: 用例--【充值金额为负数】---执行失败
2021-01-05 21:08:11,689 - [test_recharge.py-->line:92] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_recharge.py", line 81, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2021-01-05 21:08:11,851 - [test_recharge.py-->line:91] - ERROR: 用例--【充值金额为空】---执行失败
2021-01-05 21:08:11,852 - [test_recharge.py-->line:92] - ERROR: 1 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_recharge.py", line 80, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 2
2021-01-05 21:08:12,002 - [test_recharge.py-->line:91] - ERROR: 用例--【充值金额-3位小数】---执行失败
2021-01-05 21:08:12,002 - [test_recharge.py-->line:92] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_recharge.py", line 81, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2021-01-05 21:08:12,178 - [test_recharge.py-->line:91] - ERROR: 用例--【充值金额-大于50万】---执行失败
2021-01-05 21:08:12,178 - [test_recharge.py-->line:92] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_recharge.py", line 81, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2021-01-05 21:08:12,333 - [test_recharge.py-->line:95] - INFO: 用例--【充值金额-非数字】---执行通过
2021-01-05 21:08:12,461 - [test_register.py-->line:77] - INFO: 用例--【注册成功-带注册名】---执行通过
2021-01-05 21:08:12,602 - [test_register.py-->line:77] - INFO: 用例--【成功-不带用户名】---执行通过
2021-01-05 21:08:12,712 - [test_register.py-->line:77] - INFO: 用例--【不输入手机号】---执行通过
2021-01-05 21:08:12,821 - [test_register.py-->line:77] - INFO: 用例--【手机号长度10位】---执行通过
2021-01-05 21:08:12,928 - [test_register.py-->line:77] - INFO: 用例--【手机号长度12位】---执行通过
2021-01-05 21:08:13,040 - [test_register.py-->line:77] - INFO: 用例--【手机号含有非法字符】---执行通过
2021-01-05 21:08:13,168 - [test_register.py-->line:77] - INFO: 用例--【已注册过的手机号】---执行通过
2021-01-05 21:08:13,285 - [test_register.py-->line:77] - INFO: 用例--【密码7位】---执行通过
2021-01-05 21:08:13,407 - [test_register.py-->line:77] - INFO: 用例--【密码17位】---执行通过
2021-01-05 21:08:13,520 - [test_register.py-->line:77] - INFO: 用例--【不输入密码】---执行通过
2021-01-05 21:08:13,623 - [test_register.py-->line:77] - INFO: 用例--【注册名11位】---执行通过
2021-01-05 21:08:13,724 - [test_register.py-->line:77] - INFO: 用例--【类型输入非0，1内容】---执行通过
2021-01-05 21:08:13,857 - [test_register.py-->line:77] - INFO: 用例--【不输入类型】---执行通过
2021-01-05 21:08:14,115 - [test_withdraw.py-->line:89] - INFO: 用例--【提现成功-整数】---执行通过
2021-01-05 21:08:14,316 - [test_withdraw.py-->line:89] - INFO: 用例--【提现成功-1位小数】---执行通过
2021-01-05 21:08:14,517 - [test_withdraw.py-->line:89] - INFO: 用例--【提现成功-2位小数】---执行通过
2021-01-05 21:08:14,725 - [test_withdraw.py-->line:89] - INFO: 用例--【提现成功-50万】---执行通过
2021-01-05 21:08:14,908 - [test_withdraw.py-->line:89] - INFO: 用例--【会员id为空】---执行通过
2021-01-05 21:08:15,097 - [test_withdraw.py-->line:89] - INFO: 用例--【会员id为小数】---执行通过
2021-01-05 21:08:15,306 - [test_withdraw.py-->line:85] - ERROR: 用例--【提现金额为0】---执行失败
2021-01-05 21:08:15,306 - [test_withdraw.py-->line:86] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_withdraw.py", line 77, in test_withdraw
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2021-01-05 21:08:15,504 - [test_withdraw.py-->line:85] - ERROR: 用例--【提现金额为负数】---执行失败
2021-01-05 21:08:15,505 - [test_withdraw.py-->line:86] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_withdraw.py", line 78, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2021-01-05 21:08:15,694 - [test_withdraw.py-->line:85] - ERROR: 用例--【提现金额为空】---执行失败
2021-01-05 21:08:15,694 - [test_withdraw.py-->line:86] - ERROR: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_withdraw.py", line 78, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^

2021-01-05 21:08:15,880 - [test_withdraw.py-->line:85] - ERROR: 用例--【提现金额-3位小数】---执行失败
2021-01-05 21:08:15,880 - [test_withdraw.py-->line:86] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_withdraw.py", line 78, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2021-01-05 21:08:16,077 - [test_withdraw.py-->line:85] - ERROR: 用例--【提现金额-大于50万】---执行失败
2021-01-05 21:08:16,078 - [test_withdraw.py-->line:86] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_withdraw.py", line 78, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2021-01-05 21:08:16,268 - [test_withdraw.py-->line:89] - INFO: 用例--【提现金额-非数字】---执行通过
2021-01-05 21:10:52,468 - [test_add.py-->line:65] - INFO: 用例--【加标成功】---执行成功
2021-01-05 21:10:52,612 - [test_add.py-->line:65] - INFO: 用例--【加标失败—借款人id为空】---执行成功
2021-01-05 21:10:52,782 - [test_add.py-->line:65] - INFO: 用例--【加标失败—标题为空】---执行成功
2021-01-05 21:10:52,928 - [test_add.py-->line:65] - INFO: 用例--【加标失败—借款金额为空】---执行成功
2021-01-05 21:10:53,071 - [test_add.py-->line:65] - INFO: 用例--【加标失败—年利率为空】---执行成功
2021-01-05 21:10:53,261 - [test_add.py-->line:65] - INFO: 用例--【加标失败—借款期限为空】---执行成功
2021-01-05 21:10:53,420 - [test_add.py-->line:65] - INFO: 用例--【加标失败—借款期限类型为空】---执行成功
2021-01-05 21:10:53,583 - [test_add.py-->line:65] - INFO: 用例--【加标失败—竞标天数为空】---执行成功
2021-01-05 21:10:53,745 - [test_add.py-->line:65] - INFO: 用例--【加标失败—借款人id不是当前登录用户】---执行成功
2021-01-05 21:10:53,923 - [test_add.py-->line:65] - INFO: 用例--【加标失败—借款金额为负数】---执行成功
2021-01-05 21:10:54,089 - [test_add.py-->line:65] - INFO: 用例--【加标失败—借款金额为小数】---执行成功
2021-01-05 21:10:54,385 - [test_audit.py-->line:80] - INFO: 用例--【审核通过】---执行通过
2021-01-05 21:10:54,529 - [test_audit.py-->line:80] - INFO: 用例--【审核不通过】---执行通过
2021-01-05 21:10:54,640 - [test_audit.py-->line:80] - INFO: 用例--【项目不待审核状态】---执行通过
2021-01-05 21:10:54,726 - [test_audit.py-->line:80] - INFO: 用例--【参数approved_or_not为空】---执行通过
2021-01-05 21:10:54,821 - [test_audit.py-->line:80] - INFO: 用例--【项目id为空】---执行通过
2021-01-05 21:10:54,931 - [test_audit.py-->line:80] - INFO: 用例--【项目id不存在】---执行通过
2021-01-05 21:10:55,170 - [test_invest.py-->line:63] - ERROR: 用例--【投资人正常投资】---执行失败
2021-01-05 21:10:55,170 - [test_invest.py-->line:64] - ERROR: 0 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_invest.py", line 60, in test_invest
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 0 != 2
2021-01-05 21:10:55,239 - [test_invest.py-->line:67] - INFO: 用例--【投资人id为空】---执行成功
2021-01-05 21:10:55,288 - [test_invest.py-->line:67] - INFO: 用例--【标id为空】---执行成功
2021-01-05 21:10:55,340 - [test_invest.py-->line:63] - ERROR: 用例--【投资金额为空】---执行失败
2021-01-05 21:10:55,340 - [test_invest.py-->line:64] - ERROR: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_invest.py", line 61, in test_invest
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^

2021-01-05 21:10:55,398 - [test_invest.py-->line:63] - ERROR: 用例--【投资金额为非100的整数倍】---执行失败
2021-01-05 21:10:55,398 - [test_invest.py-->line:64] - ERROR: '投资金额必须大于100，并且可以被100整除' != '充值金额必须大于100，并且可以被100整除'
- 投资金额必须大于100，并且可以被100整除
? ^^
+ 充值金额必须大于100，并且可以被100整除
? ^^
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_invest.py", line 61, in test_invest
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '投资金额必须大于100，并且可以被100整除' != '充值金额必须大于100，并且可以被100整除'
- 投资金额必须大于100，并且可以被100整除
? ^^
+ 充值金额必须大于100，并且可以被100整除
? ^^

2021-01-05 21:10:55,443 - [test_invest.py-->line:63] - ERROR: 用例--【投资金额大于可投余额】---执行失败
2021-01-05 21:10:55,444 - [test_invest.py-->line:64] - ERROR: '该标可投金额不足' != '该项目不在竞标中状态'
- 该标可投金额不足
+ 该项目不在竞标中状态
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_invest.py", line 61, in test_invest
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '该标可投金额不足' != '该项目不在竞标中状态'
- 该标可投金额不足
+ 该项目不在竞标中状态

2021-01-05 21:10:55,509 - [test_invest.py-->line:63] - ERROR: 用例--【投资金额超过用户余额】---执行失败
2021-01-05 21:10:55,509 - [test_invest.py-->line:64] - ERROR: 1002 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_invest.py", line 60, in test_invest
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1002 != 2
2021-01-05 21:10:55,562 - [test_login.py-->line:56] - INFO: 用例--【登录成功】---执行通过
2021-01-05 21:10:55,619 - [test_login.py-->line:56] - INFO: 用例--【手机号为空】---执行通过
2021-01-05 21:10:55,659 - [test_login.py-->line:56] - INFO: 用例--【密码为空】---执行通过
2021-01-05 21:10:55,739 - [test_login.py-->line:56] - INFO: 用例--【手机号未注册】---执行通过
2021-01-05 21:10:55,793 - [test_login.py-->line:56] - INFO: 用例--【密码错误】---执行通过
2021-01-05 21:10:55,839 - [test_login.py-->line:56] - INFO: 用例--【手机号格式错误】---执行通过
2021-01-05 21:10:56,029 - [test_recharge.py-->line:95] - INFO: 用例--【充值成功-整数】---执行通过
2021-01-05 21:10:56,167 - [test_recharge.py-->line:95] - INFO: 用例--【充值成功-1位小数】---执行通过
2021-01-05 21:10:56,322 - [test_recharge.py-->line:95] - INFO: 用例--【充值成功-2位小数】---执行通过
2021-01-05 21:10:56,455 - [test_recharge.py-->line:95] - INFO: 用例--【充值成功-50万】---执行通过
2021-01-05 21:10:56,602 - [test_recharge.py-->line:95] - INFO: 用例--【会员id为空】---执行通过
2021-01-05 21:10:56,738 - [test_recharge.py-->line:95] - INFO: 用例--【会员id为小数】---执行通过
2021-01-05 21:10:56,867 - [test_recharge.py-->line:91] - ERROR: 用例--【充值金额为0】---执行失败
2021-01-05 21:10:56,867 - [test_recharge.py-->line:92] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_recharge.py", line 80, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2021-01-05 21:10:57,002 - [test_recharge.py-->line:91] - ERROR: 用例--【充值金额为负数】---执行失败
2021-01-05 21:10:57,002 - [test_recharge.py-->line:92] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_recharge.py", line 81, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2021-01-05 21:10:57,137 - [test_recharge.py-->line:91] - ERROR: 用例--【充值金额为空】---执行失败
2021-01-05 21:10:57,137 - [test_recharge.py-->line:92] - ERROR: 1 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_recharge.py", line 80, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 2
2021-01-05 21:10:57,262 - [test_recharge.py-->line:91] - ERROR: 用例--【充值金额-3位小数】---执行失败
2021-01-05 21:10:57,263 - [test_recharge.py-->line:92] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_recharge.py", line 81, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2021-01-05 21:10:57,402 - [test_recharge.py-->line:91] - ERROR: 用例--【充值金额-大于50万】---执行失败
2021-01-05 21:10:57,403 - [test_recharge.py-->line:92] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_recharge.py", line 81, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2021-01-05 21:10:57,545 - [test_recharge.py-->line:95] - INFO: 用例--【充值金额-非数字】---执行通过
2021-01-05 21:10:57,675 - [test_register.py-->line:77] - INFO: 用例--【注册成功-带注册名】---执行通过
2021-01-05 21:10:57,810 - [test_register.py-->line:77] - INFO: 用例--【成功-不带用户名】---执行通过
2021-01-05 21:10:57,912 - [test_register.py-->line:77] - INFO: 用例--【不输入手机号】---执行通过
2021-01-05 21:10:58,027 - [test_register.py-->line:77] - INFO: 用例--【手机号长度10位】---执行通过
2021-01-05 21:10:58,129 - [test_register.py-->line:77] - INFO: 用例--【手机号长度12位】---执行通过
2021-01-05 21:10:58,243 - [test_register.py-->line:77] - INFO: 用例--【手机号含有非法字符】---执行通过
2021-01-05 21:10:58,371 - [test_register.py-->line:77] - INFO: 用例--【已注册过的手机号】---执行通过
2021-01-05 21:10:58,495 - [test_register.py-->line:77] - INFO: 用例--【密码7位】---执行通过
2021-01-05 21:10:58,609 - [test_register.py-->line:77] - INFO: 用例--【密码17位】---执行通过
2021-01-05 21:10:58,714 - [test_register.py-->line:77] - INFO: 用例--【不输入密码】---执行通过
2021-01-05 21:10:58,825 - [test_register.py-->line:77] - INFO: 用例--【注册名11位】---执行通过
2021-01-05 21:10:58,945 - [test_register.py-->line:77] - INFO: 用例--【类型输入非0，1内容】---执行通过
2021-01-05 21:10:59,083 - [test_register.py-->line:77] - INFO: 用例--【不输入类型】---执行通过
2021-01-05 21:10:59,314 - [test_withdraw.py-->line:89] - INFO: 用例--【提现成功-整数】---执行通过
2021-01-05 21:10:59,483 - [test_withdraw.py-->line:89] - INFO: 用例--【提现成功-1位小数】---执行通过
2021-01-05 21:10:59,663 - [test_withdraw.py-->line:89] - INFO: 用例--【提现成功-2位小数】---执行通过
2021-01-05 21:10:59,849 - [test_withdraw.py-->line:89] - INFO: 用例--【提现成功-50万】---执行通过
2021-01-05 21:11:00,004 - [test_withdraw.py-->line:89] - INFO: 用例--【会员id为空】---执行通过
2021-01-05 21:11:00,172 - [test_withdraw.py-->line:89] - INFO: 用例--【会员id为小数】---执行通过
2021-01-05 21:11:00,329 - [test_withdraw.py-->line:85] - ERROR: 用例--【提现金额为0】---执行失败
2021-01-05 21:11:00,329 - [test_withdraw.py-->line:86] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_withdraw.py", line 77, in test_withdraw
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2021-01-05 21:11:00,502 - [test_withdraw.py-->line:85] - ERROR: 用例--【提现金额为负数】---执行失败
2021-01-05 21:11:00,504 - [test_withdraw.py-->line:86] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_withdraw.py", line 78, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2021-01-05 21:11:00,664 - [test_withdraw.py-->line:85] - ERROR: 用例--【提现金额为空】---执行失败
2021-01-05 21:11:00,664 - [test_withdraw.py-->line:86] - ERROR: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_withdraw.py", line 78, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^

2021-01-05 21:11:00,823 - [test_withdraw.py-->line:85] - ERROR: 用例--【提现金额-3位小数】---执行失败
2021-01-05 21:11:00,823 - [test_withdraw.py-->line:86] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_withdraw.py", line 78, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2021-01-05 21:11:00,977 - [test_withdraw.py-->line:85] - ERROR: 用例--【提现金额-大于50万】---执行失败
2021-01-05 21:11:00,978 - [test_withdraw.py-->line:86] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_withdraw.py", line 78, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2021-01-05 21:11:01,141 - [test_withdraw.py-->line:89] - INFO: 用例--【提现金额-非数字】---执行通过
2021-01-05 21:15:09,543 - [test_add.py-->line:65] - INFO: 用例--【加标成功】---执行成功
2021-01-05 21:15:09,723 - [test_add.py-->line:65] - INFO: 用例--【加标失败—借款人id为空】---执行成功
2021-01-05 21:15:09,896 - [test_add.py-->line:65] - INFO: 用例--【加标失败—标题为空】---执行成功
2021-01-05 21:15:10,077 - [test_add.py-->line:65] - INFO: 用例--【加标失败—借款金额为空】---执行成功
2021-01-05 21:15:10,247 - [test_add.py-->line:65] - INFO: 用例--【加标失败—年利率为空】---执行成功
2021-01-05 21:15:10,428 - [test_add.py-->line:65] - INFO: 用例--【加标失败—借款期限为空】---执行成功
2021-01-05 21:15:10,613 - [test_add.py-->line:65] - INFO: 用例--【加标失败—借款期限类型为空】---执行成功
2021-01-05 21:15:10,781 - [test_add.py-->line:65] - INFO: 用例--【加标失败—竞标天数为空】---执行成功
2021-01-05 21:15:10,955 - [test_add.py-->line:65] - INFO: 用例--【加标失败—借款人id不是当前登录用户】---执行成功
2021-01-05 21:15:11,131 - [test_add.py-->line:65] - INFO: 用例--【加标失败—借款金额为负数】---执行成功
2021-01-05 21:15:11,325 - [test_add.py-->line:65] - INFO: 用例--【加标失败—借款金额为小数】---执行成功
2021-01-05 21:15:11,553 - [test_audit.py-->line:80] - INFO: 用例--【审核通过】---执行通过
2021-01-05 21:15:11,709 - [test_audit.py-->line:80] - INFO: 用例--【审核不通过】---执行通过
2021-01-05 21:15:11,809 - [test_audit.py-->line:80] - INFO: 用例--【项目不待审核状态】---执行通过
2021-01-05 21:15:11,928 - [test_audit.py-->line:80] - INFO: 用例--【参数approved_or_not为空】---执行通过
2021-01-05 21:15:12,029 - [test_audit.py-->line:80] - INFO: 用例--【项目id为空】---执行通过
2021-01-05 21:15:12,147 - [test_audit.py-->line:80] - INFO: 用例--【项目id不存在】---执行通过
2021-01-05 21:15:12,388 - [test_invest.py-->line:67] - INFO: 用例--【投资人正常投资】---执行成功
2021-01-05 21:15:12,435 - [test_invest.py-->line:67] - INFO: 用例--【投资人id为空】---执行成功
2021-01-05 21:15:12,501 - [test_invest.py-->line:67] - INFO: 用例--【标id为空】---执行成功
2021-01-05 21:15:12,546 - [test_invest.py-->line:63] - ERROR: 用例--【投资金额为空】---执行失败
2021-01-05 21:15:12,546 - [test_invest.py-->line:64] - ERROR: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_invest.py", line 61, in test_invest
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^

2021-01-05 21:15:12,594 - [test_invest.py-->line:63] - ERROR: 用例--【投资金额为非100的整数倍】---执行失败
2021-01-05 21:15:12,595 - [test_invest.py-->line:64] - ERROR: '投资金额必须大于100，并且可以被100整除' != '充值金额必须大于100，并且可以被100整除'
- 投资金额必须大于100，并且可以被100整除
? ^^
+ 充值金额必须大于100，并且可以被100整除
? ^^
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_invest.py", line 61, in test_invest
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '投资金额必须大于100，并且可以被100整除' != '充值金额必须大于100，并且可以被100整除'
- 投资金额必须大于100，并且可以被100整除
? ^^
+ 充值金额必须大于100，并且可以被100整除
? ^^

2021-01-05 21:15:12,655 - [test_invest.py-->line:63] - ERROR: 用例--【投资金额大于可投余额】---执行失败
2021-01-05 21:15:12,655 - [test_invest.py-->line:64] - ERROR: '该标可投金额不足' != '该标可投金额不足,可投金额：1700.0'
- 该标可投金额不足
+ 该标可投金额不足,可投金额：1700.0
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_invest.py", line 61, in test_invest
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '该标可投金额不足' != '该标可投金额不足,可投金额：1700.0'
- 该标可投金额不足
+ 该标可投金额不足,可投金额：1700.0

2021-01-05 21:15:12,707 - [test_invest.py-->line:63] - ERROR: 用例--【投资金额超过用户余额】---执行失败
2021-01-05 21:15:12,707 - [test_invest.py-->line:64] - ERROR: 1002 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_invest.py", line 60, in test_invest
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1002 != 0
2021-01-05 21:15:12,768 - [test_login.py-->line:56] - INFO: 用例--【登录成功】---执行通过
2021-01-05 21:15:12,823 - [test_login.py-->line:56] - INFO: 用例--【手机号为空】---执行通过
2021-01-05 21:15:12,878 - [test_login.py-->line:56] - INFO: 用例--【密码为空】---执行通过
2021-01-05 21:15:12,948 - [test_login.py-->line:56] - INFO: 用例--【手机号未注册】---执行通过
2021-01-05 21:15:13,002 - [test_login.py-->line:56] - INFO: 用例--【密码错误】---执行通过
2021-01-05 21:15:13,059 - [test_login.py-->line:56] - INFO: 用例--【手机号格式错误】---执行通过
2021-01-05 21:15:13,237 - [test_recharge.py-->line:95] - INFO: 用例--【充值成功-整数】---执行通过
2021-01-05 21:15:13,384 - [test_recharge.py-->line:95] - INFO: 用例--【充值成功-1位小数】---执行通过
2021-01-05 21:15:13,533 - [test_recharge.py-->line:95] - INFO: 用例--【充值成功-2位小数】---执行通过
2021-01-05 21:15:13,673 - [test_recharge.py-->line:95] - INFO: 用例--【充值成功-50万】---执行通过
2021-01-05 21:15:13,808 - [test_recharge.py-->line:95] - INFO: 用例--【会员id为空】---执行通过
2021-01-05 21:15:13,945 - [test_recharge.py-->line:95] - INFO: 用例--【会员id为小数】---执行通过
2021-01-05 21:15:14,079 - [test_recharge.py-->line:91] - ERROR: 用例--【充值金额为0】---执行失败
2021-01-05 21:15:14,080 - [test_recharge.py-->line:92] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_recharge.py", line 80, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2021-01-05 21:15:14,222 - [test_recharge.py-->line:91] - ERROR: 用例--【充值金额为负数】---执行失败
2021-01-05 21:15:14,222 - [test_recharge.py-->line:92] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_recharge.py", line 81, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2021-01-05 21:15:14,359 - [test_recharge.py-->line:91] - ERROR: 用例--【充值金额为空】---执行失败
2021-01-05 21:15:14,359 - [test_recharge.py-->line:92] - ERROR: 1 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_recharge.py", line 80, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 2
2021-01-05 21:15:14,505 - [test_recharge.py-->line:91] - ERROR: 用例--【充值金额-3位小数】---执行失败
2021-01-05 21:15:14,505 - [test_recharge.py-->line:92] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_recharge.py", line 81, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2021-01-05 21:15:14,642 - [test_recharge.py-->line:91] - ERROR: 用例--【充值金额-大于50万】---执行失败
2021-01-05 21:15:14,643 - [test_recharge.py-->line:92] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_recharge.py", line 81, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2021-01-05 21:15:14,771 - [test_recharge.py-->line:95] - INFO: 用例--【充值金额-非数字】---执行通过
2021-01-05 21:15:14,902 - [test_register.py-->line:77] - INFO: 用例--【注册成功-带注册名】---执行通过
2021-01-05 21:15:15,032 - [test_register.py-->line:77] - INFO: 用例--【成功-不带用户名】---执行通过
2021-01-05 21:15:15,137 - [test_register.py-->line:77] - INFO: 用例--【不输入手机号】---执行通过
2021-01-05 21:15:15,237 - [test_register.py-->line:77] - INFO: 用例--【手机号长度10位】---执行通过
2021-01-05 21:15:15,327 - [test_register.py-->line:77] - INFO: 用例--【手机号长度12位】---执行通过
2021-01-05 21:15:15,430 - [test_register.py-->line:77] - INFO: 用例--【手机号含有非法字符】---执行通过
2021-01-05 21:15:15,530 - [test_register.py-->line:77] - INFO: 用例--【已注册过的手机号】---执行通过
2021-01-05 21:15:15,628 - [test_register.py-->line:77] - INFO: 用例--【密码7位】---执行通过
2021-01-05 21:15:15,733 - [test_register.py-->line:77] - INFO: 用例--【密码17位】---执行通过
2021-01-05 21:15:15,843 - [test_register.py-->line:77] - INFO: 用例--【不输入密码】---执行通过
2021-01-05 21:15:15,936 - [test_register.py-->line:77] - INFO: 用例--【注册名11位】---执行通过
2021-01-05 21:15:16,029 - [test_register.py-->line:77] - INFO: 用例--【类型输入非0，1内容】---执行通过
2021-01-05 21:15:16,159 - [test_register.py-->line:77] - INFO: 用例--【不输入类型】---执行通过
2021-01-05 21:15:16,347 - [test_withdraw.py-->line:89] - INFO: 用例--【提现成功-整数】---执行通过
2021-01-05 21:15:16,493 - [test_withdraw.py-->line:89] - INFO: 用例--【提现成功-1位小数】---执行通过
2021-01-05 21:15:16,625 - [test_withdraw.py-->line:89] - INFO: 用例--【提现成功-2位小数】---执行通过
2021-01-05 21:15:16,771 - [test_withdraw.py-->line:89] - INFO: 用例--【提现成功-50万】---执行通过
2021-01-05 21:15:16,902 - [test_withdraw.py-->line:89] - INFO: 用例--【会员id为空】---执行通过
2021-01-05 21:15:17,035 - [test_withdraw.py-->line:89] - INFO: 用例--【会员id为小数】---执行通过
2021-01-05 21:15:17,165 - [test_withdraw.py-->line:85] - ERROR: 用例--【提现金额为0】---执行失败
2021-01-05 21:15:17,165 - [test_withdraw.py-->line:86] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_withdraw.py", line 77, in test_withdraw
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2021-01-05 21:15:17,288 - [test_withdraw.py-->line:85] - ERROR: 用例--【提现金额为负数】---执行失败
2021-01-05 21:15:17,289 - [test_withdraw.py-->line:86] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_withdraw.py", line 78, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2021-01-05 21:15:17,419 - [test_withdraw.py-->line:85] - ERROR: 用例--【提现金额为空】---执行失败
2021-01-05 21:15:17,419 - [test_withdraw.py-->line:86] - ERROR: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_withdraw.py", line 78, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^

2021-01-05 21:15:17,557 - [test_withdraw.py-->line:85] - ERROR: 用例--【提现金额-3位小数】---执行失败
2021-01-05 21:15:17,557 - [test_withdraw.py-->line:86] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_withdraw.py", line 78, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2021-01-05 21:15:17,701 - [test_withdraw.py-->line:85] - ERROR: 用例--【提现金额-大于50万】---执行失败
2021-01-05 21:15:17,701 - [test_withdraw.py-->line:86] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_withdraw.py", line 78, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2021-01-05 21:15:17,840 - [test_withdraw.py-->line:89] - INFO: 用例--【提现金额-非数字】---执行通过
2021-01-05 21:53:41,151 - [test_add.py-->line:65] - INFO: 用例--【加标成功】---执行成功
2021-01-05 21:53:41,297 - [test_add.py-->line:65] - INFO: 用例--【加标失败—借款人id为空】---执行成功
2021-01-05 21:53:41,446 - [test_add.py-->line:65] - INFO: 用例--【加标失败—标题为空】---执行成功
2021-01-05 21:53:41,596 - [test_add.py-->line:65] - INFO: 用例--【加标失败—借款金额为空】---执行成功
2021-01-05 21:53:41,746 - [test_add.py-->line:65] - INFO: 用例--【加标失败—年利率为空】---执行成功
2021-01-05 21:53:41,915 - [test_add.py-->line:65] - INFO: 用例--【加标失败—借款期限为空】---执行成功
2021-01-05 21:53:42,064 - [test_add.py-->line:65] - INFO: 用例--【加标失败—借款期限类型为空】---执行成功
2021-01-05 21:53:42,237 - [test_add.py-->line:65] - INFO: 用例--【加标失败—竞标天数为空】---执行成功
2021-01-05 21:53:42,405 - [test_add.py-->line:65] - INFO: 用例--【加标失败—借款人id不是当前登录用户】---执行成功
2021-01-05 21:53:42,550 - [test_add.py-->line:65] - INFO: 用例--【加标失败—借款金额为负数】---执行成功
2021-01-05 21:53:42,707 - [test_add.py-->line:65] - INFO: 用例--【加标失败—借款金额为小数】---执行成功
2021-01-05 21:53:42,964 - [test_audit.py-->line:80] - INFO: 用例--【审核通过】---执行通过
2021-01-05 21:53:43,113 - [test_audit.py-->line:80] - INFO: 用例--【审核不通过】---执行通过
2021-01-05 21:53:43,230 - [test_audit.py-->line:80] - INFO: 用例--【项目不待审核状态】---执行通过
2021-01-05 21:53:43,320 - [test_audit.py-->line:80] - INFO: 用例--【参数approved_or_not为空】---执行通过
2021-01-05 21:53:43,415 - [test_audit.py-->line:80] - INFO: 用例--【项目id为空】---执行通过
2021-01-05 21:53:43,497 - [test_audit.py-->line:80] - INFO: 用例--【项目id不存在】---执行通过
2021-01-05 21:53:43,988 - [test_invest.py-->line:119] - ERROR: 用例--【投资人正常投资】---执行失败
2021-01-05 21:53:43,989 - [test_invest.py-->line:120] - ERROR: 300 != -300.0
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_invest.py", line 111, in test_invest
    self.assertEqual(params['amount'], float(e_amount - s_amount))
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 300 != -300.0
2021-01-05 21:53:44,029 - [test_invest.py-->line:123] - INFO: 用例--【投资人id为空】---执行成功
2021-01-05 21:53:44,085 - [test_invest.py-->line:123] - INFO: 用例--【标id为空】---执行成功
2021-01-05 21:53:44,124 - [test_invest.py-->line:119] - ERROR: 用例--【投资金额为空】---执行失败
2021-01-05 21:53:44,124 - [test_invest.py-->line:120] - ERROR: '金额为空' not found in '余额为空'
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_invest.py", line 107, in test_invest
    self.assertIn(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额为空' not found in '余额为空'
2021-01-05 21:53:44,168 - [test_invest.py-->line:119] - ERROR: 用例--【投资金额为非100的整数倍】---执行失败
2021-01-05 21:53:44,169 - [test_invest.py-->line:120] - ERROR: '投资金额必须大于100，并且可以被100整除' not found in '充值金额必须大于100，并且可以被100整除'
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_invest.py", line 107, in test_invest
    self.assertIn(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '投资金额必须大于100，并且可以被100整除' not found in '充值金额必须大于100，并且可以被100整除'
2021-01-05 21:53:44,216 - [test_invest.py-->line:123] - INFO: 用例--【投资金额大于可投余额】---执行成功
2021-01-05 21:53:44,273 - [test_login.py-->line:56] - INFO: 用例--【登录成功】---执行通过
2021-01-05 21:53:44,325 - [test_login.py-->line:56] - INFO: 用例--【手机号为空】---执行通过
2021-01-05 21:53:44,385 - [test_login.py-->line:56] - INFO: 用例--【密码为空】---执行通过
2021-01-05 21:53:44,441 - [test_login.py-->line:56] - INFO: 用例--【手机号未注册】---执行通过
2021-01-05 21:53:44,506 - [test_login.py-->line:56] - INFO: 用例--【密码错误】---执行通过
2021-01-05 21:53:44,567 - [test_login.py-->line:56] - INFO: 用例--【手机号格式错误】---执行通过
2021-01-05 21:53:44,762 - [test_recharge.py-->line:95] - INFO: 用例--【充值成功-整数】---执行通过
2021-01-05 21:53:44,920 - [test_recharge.py-->line:95] - INFO: 用例--【充值成功-1位小数】---执行通过
2021-01-05 21:53:45,052 - [test_recharge.py-->line:95] - INFO: 用例--【充值成功-2位小数】---执行通过
2021-01-05 21:53:45,191 - [test_recharge.py-->line:95] - INFO: 用例--【充值成功-50万】---执行通过
2021-01-05 21:53:45,363 - [test_recharge.py-->line:95] - INFO: 用例--【会员id为空】---执行通过
2021-01-05 21:53:45,511 - [test_recharge.py-->line:95] - INFO: 用例--【会员id为小数】---执行通过
2021-01-05 21:53:45,646 - [test_recharge.py-->line:91] - ERROR: 用例--【充值金额为0】---执行失败
2021-01-05 21:53:45,646 - [test_recharge.py-->line:92] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_recharge.py", line 80, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2021-01-05 21:53:45,781 - [test_recharge.py-->line:91] - ERROR: 用例--【充值金额为负数】---执行失败
2021-01-05 21:53:45,782 - [test_recharge.py-->line:92] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_recharge.py", line 81, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2021-01-05 21:53:45,908 - [test_recharge.py-->line:91] - ERROR: 用例--【充值金额为空】---执行失败
2021-01-05 21:53:45,908 - [test_recharge.py-->line:92] - ERROR: 1 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_recharge.py", line 80, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 2
2021-01-05 21:53:46,059 - [test_recharge.py-->line:91] - ERROR: 用例--【充值金额-3位小数】---执行失败
2021-01-05 21:53:46,062 - [test_recharge.py-->line:92] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_recharge.py", line 81, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2021-01-05 21:53:46,215 - [test_recharge.py-->line:91] - ERROR: 用例--【充值金额-大于50万】---执行失败
2021-01-05 21:53:46,216 - [test_recharge.py-->line:92] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_recharge.py", line 81, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2021-01-05 21:53:46,354 - [test_recharge.py-->line:95] - INFO: 用例--【充值金额-非数字】---执行通过
2021-01-05 21:53:46,496 - [test_register.py-->line:77] - INFO: 用例--【注册成功-带注册名】---执行通过
2021-01-05 21:53:46,627 - [test_register.py-->line:77] - INFO: 用例--【成功-不带用户名】---执行通过
2021-01-05 21:53:46,746 - [test_register.py-->line:77] - INFO: 用例--【不输入手机号】---执行通过
2021-01-05 21:53:46,868 - [test_register.py-->line:77] - INFO: 用例--【手机号长度10位】---执行通过
2021-01-05 21:53:46,971 - [test_register.py-->line:77] - INFO: 用例--【手机号长度12位】---执行通过
2021-01-05 21:53:47,097 - [test_register.py-->line:77] - INFO: 用例--【手机号含有非法字符】---执行通过
2021-01-05 21:53:47,217 - [test_register.py-->line:77] - INFO: 用例--【已注册过的手机号】---执行通过
2021-01-05 21:53:47,324 - [test_register.py-->line:77] - INFO: 用例--【密码7位】---执行通过
2021-01-05 21:53:47,447 - [test_register.py-->line:77] - INFO: 用例--【密码17位】---执行通过
2021-01-05 21:53:47,575 - [test_register.py-->line:77] - INFO: 用例--【不输入密码】---执行通过
2021-01-05 21:53:47,686 - [test_register.py-->line:77] - INFO: 用例--【注册名11位】---执行通过
2021-01-05 21:53:47,792 - [test_register.py-->line:77] - INFO: 用例--【类型输入非0，1内容】---执行通过
2021-01-05 21:53:47,914 - [test_register.py-->line:77] - INFO: 用例--【不输入类型】---执行通过
2021-01-05 21:53:48,137 - [test_withdraw.py-->line:89] - INFO: 用例--【提现成功-整数】---执行通过
2021-01-05 21:53:48,268 - [test_withdraw.py-->line:89] - INFO: 用例--【提现成功-1位小数】---执行通过
2021-01-05 21:53:48,411 - [test_withdraw.py-->line:89] - INFO: 用例--【提现成功-2位小数】---执行通过
2021-01-05 21:53:48,559 - [test_withdraw.py-->line:89] - INFO: 用例--【提现成功-50万】---执行通过
2021-01-05 21:53:48,690 - [test_withdraw.py-->line:89] - INFO: 用例--【会员id为空】---执行通过
2021-01-05 21:53:48,826 - [test_withdraw.py-->line:89] - INFO: 用例--【会员id为小数】---执行通过
2021-01-05 21:53:48,953 - [test_withdraw.py-->line:85] - ERROR: 用例--【提现金额为0】---执行失败
2021-01-05 21:53:48,955 - [test_withdraw.py-->line:86] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_withdraw.py", line 77, in test_withdraw
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2021-01-05 21:53:49,084 - [test_withdraw.py-->line:85] - ERROR: 用例--【提现金额为负数】---执行失败
2021-01-05 21:53:49,084 - [test_withdraw.py-->line:86] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_withdraw.py", line 78, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2021-01-05 21:53:49,231 - [test_withdraw.py-->line:85] - ERROR: 用例--【提现金额为空】---执行失败
2021-01-05 21:53:49,232 - [test_withdraw.py-->line:86] - ERROR: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_withdraw.py", line 78, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^

2021-01-05 21:53:49,387 - [test_withdraw.py-->line:85] - ERROR: 用例--【提现金额-3位小数】---执行失败
2021-01-05 21:53:49,387 - [test_withdraw.py-->line:86] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_withdraw.py", line 78, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2021-01-05 21:53:49,527 - [test_withdraw.py-->line:85] - ERROR: 用例--【提现金额-大于50万】---执行失败
2021-01-05 21:53:49,527 - [test_withdraw.py-->line:86] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_withdraw.py", line 78, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2021-01-05 21:53:49,667 - [test_withdraw.py-->line:89] - INFO: 用例--【提现金额-非数字】---执行通过
2021-01-05 21:55:14,172 - [test_add.py-->line:65] - INFO: 用例--【加标成功】---执行成功
2021-01-05 21:55:14,383 - [test_add.py-->line:65] - INFO: 用例--【加标失败—借款人id为空】---执行成功
2021-01-05 21:55:14,550 - [test_add.py-->line:65] - INFO: 用例--【加标失败—标题为空】---执行成功
2021-01-05 21:55:14,721 - [test_add.py-->line:65] - INFO: 用例--【加标失败—借款金额为空】---执行成功
2021-01-05 21:55:14,888 - [test_add.py-->line:65] - INFO: 用例--【加标失败—年利率为空】---执行成功
2021-01-05 21:55:15,093 - [test_add.py-->line:65] - INFO: 用例--【加标失败—借款期限为空】---执行成功
2021-01-05 21:55:15,285 - [test_add.py-->line:65] - INFO: 用例--【加标失败—借款期限类型为空】---执行成功
2021-01-05 21:55:15,499 - [test_add.py-->line:65] - INFO: 用例--【加标失败—竞标天数为空】---执行成功
2021-01-05 21:55:15,681 - [test_add.py-->line:65] - INFO: 用例--【加标失败—借款人id不是当前登录用户】---执行成功
2021-01-05 21:55:15,888 - [test_add.py-->line:65] - INFO: 用例--【加标失败—借款金额为负数】---执行成功
2021-01-05 21:55:16,067 - [test_add.py-->line:65] - INFO: 用例--【加标失败—借款金额为小数】---执行成功
2021-01-05 21:55:16,322 - [test_audit.py-->line:80] - INFO: 用例--【审核通过】---执行通过
2021-01-05 21:55:16,479 - [test_audit.py-->line:80] - INFO: 用例--【审核不通过】---执行通过
2021-01-05 21:55:16,584 - [test_audit.py-->line:80] - INFO: 用例--【项目不待审核状态】---执行通过
2021-01-05 21:55:16,684 - [test_audit.py-->line:80] - INFO: 用例--【参数approved_or_not为空】---执行通过
2021-01-05 21:55:16,782 - [test_audit.py-->line:80] - INFO: 用例--【项目id为空】---执行通过
2021-01-05 21:55:16,911 - [test_audit.py-->line:80] - INFO: 用例--【项目id不存在】---执行通过
2021-01-05 21:55:17,482 - [test_invest.py-->line:123] - INFO: 用例--【投资人正常投资】---执行成功
2021-01-05 21:55:17,525 - [test_invest.py-->line:123] - INFO: 用例--【投资人id为空】---执行成功
2021-01-05 21:55:17,579 - [test_invest.py-->line:123] - INFO: 用例--【标id为空】---执行成功
2021-01-05 21:55:17,632 - [test_invest.py-->line:119] - ERROR: 用例--【投资金额为空】---执行失败
2021-01-05 21:55:17,632 - [test_invest.py-->line:120] - ERROR: '金额为空' not found in '余额为空'
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_invest.py", line 107, in test_invest
    self.assertIn(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额为空' not found in '余额为空'
2021-01-05 21:55:17,671 - [test_invest.py-->line:119] - ERROR: 用例--【投资金额为非100的整数倍】---执行失败
2021-01-05 21:55:17,671 - [test_invest.py-->line:120] - ERROR: '投资金额必须大于100，并且可以被100整除' not found in '充值金额必须大于100，并且可以被100整除'
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_invest.py", line 107, in test_invest
    self.assertIn(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '投资金额必须大于100，并且可以被100整除' not found in '充值金额必须大于100，并且可以被100整除'
2021-01-05 21:55:17,717 - [test_invest.py-->line:123] - INFO: 用例--【投资金额大于可投余额】---执行成功
2021-01-05 21:55:17,773 - [test_login.py-->line:56] - INFO: 用例--【登录成功】---执行通过
2021-01-05 21:55:17,828 - [test_login.py-->line:56] - INFO: 用例--【手机号为空】---执行通过
2021-01-05 21:55:17,870 - [test_login.py-->line:56] - INFO: 用例--【密码为空】---执行通过
2021-01-05 21:55:17,936 - [test_login.py-->line:56] - INFO: 用例--【手机号未注册】---执行通过
2021-01-05 21:55:17,989 - [test_login.py-->line:56] - INFO: 用例--【密码错误】---执行通过
2021-01-05 21:55:18,042 - [test_login.py-->line:56] - INFO: 用例--【手机号格式错误】---执行通过
2021-01-05 21:55:18,258 - [test_recharge.py-->line:95] - INFO: 用例--【充值成功-整数】---执行通过
2021-01-05 21:55:18,434 - [test_recharge.py-->line:95] - INFO: 用例--【充值成功-1位小数】---执行通过
2021-01-05 21:55:18,592 - [test_recharge.py-->line:95] - INFO: 用例--【充值成功-2位小数】---执行通过
2021-01-05 21:55:18,776 - [test_recharge.py-->line:95] - INFO: 用例--【充值成功-50万】---执行通过
2021-01-05 21:55:18,948 - [test_recharge.py-->line:95] - INFO: 用例--【会员id为空】---执行通过
2021-01-05 21:55:19,114 - [test_recharge.py-->line:95] - INFO: 用例--【会员id为小数】---执行通过
2021-01-05 21:55:19,278 - [test_recharge.py-->line:91] - ERROR: 用例--【充值金额为0】---执行失败
2021-01-05 21:55:19,278 - [test_recharge.py-->line:92] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_recharge.py", line 80, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2021-01-05 21:55:19,440 - [test_recharge.py-->line:91] - ERROR: 用例--【充值金额为负数】---执行失败
2021-01-05 21:55:19,440 - [test_recharge.py-->line:92] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_recharge.py", line 81, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2021-01-05 21:55:19,606 - [test_recharge.py-->line:91] - ERROR: 用例--【充值金额为空】---执行失败
2021-01-05 21:55:19,607 - [test_recharge.py-->line:92] - ERROR: 1 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_recharge.py", line 80, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 2
2021-01-05 21:55:19,773 - [test_recharge.py-->line:91] - ERROR: 用例--【充值金额-3位小数】---执行失败
2021-01-05 21:55:19,773 - [test_recharge.py-->line:92] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_recharge.py", line 81, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2021-01-05 21:55:19,940 - [test_recharge.py-->line:91] - ERROR: 用例--【充值金额-大于50万】---执行失败
2021-01-05 21:55:19,940 - [test_recharge.py-->line:92] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_recharge.py", line 81, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2021-01-05 21:55:20,117 - [test_recharge.py-->line:95] - INFO: 用例--【充值金额-非数字】---执行通过
2021-01-05 21:55:20,238 - [test_register.py-->line:77] - INFO: 用例--【注册成功-带注册名】---执行通过
2021-01-05 21:55:20,364 - [test_register.py-->line:77] - INFO: 用例--【成功-不带用户名】---执行通过
2021-01-05 21:55:20,471 - [test_register.py-->line:77] - INFO: 用例--【不输入手机号】---执行通过
2021-01-05 21:55:20,570 - [test_register.py-->line:77] - INFO: 用例--【手机号长度10位】---执行通过
2021-01-05 21:55:20,687 - [test_register.py-->line:77] - INFO: 用例--【手机号长度12位】---执行通过
2021-01-05 21:55:20,795 - [test_register.py-->line:77] - INFO: 用例--【手机号含有非法字符】---执行通过
2021-01-05 21:55:20,918 - [test_register.py-->line:77] - INFO: 用例--【已注册过的手机号】---执行通过
2021-01-05 21:55:21,034 - [test_register.py-->line:77] - INFO: 用例--【密码7位】---执行通过
2021-01-05 21:55:21,148 - [test_register.py-->line:77] - INFO: 用例--【密码17位】---执行通过
2021-01-05 21:55:21,273 - [test_register.py-->line:77] - INFO: 用例--【不输入密码】---执行通过
2021-01-05 21:55:21,371 - [test_register.py-->line:77] - INFO: 用例--【注册名11位】---执行通过
2021-01-05 21:55:21,491 - [test_register.py-->line:77] - INFO: 用例--【类型输入非0，1内容】---执行通过
2021-01-05 21:55:21,629 - [test_register.py-->line:77] - INFO: 用例--【不输入类型】---执行通过
2021-01-05 21:55:21,831 - [test_withdraw.py-->line:89] - INFO: 用例--【提现成功-整数】---执行通过
2021-01-05 21:55:21,974 - [test_withdraw.py-->line:89] - INFO: 用例--【提现成功-1位小数】---执行通过
2021-01-05 21:55:22,127 - [test_withdraw.py-->line:89] - INFO: 用例--【提现成功-2位小数】---执行通过
2021-01-05 21:55:22,275 - [test_withdraw.py-->line:89] - INFO: 用例--【提现成功-50万】---执行通过
2021-01-05 21:55:22,429 - [test_withdraw.py-->line:89] - INFO: 用例--【会员id为空】---执行通过
2021-01-05 21:55:22,561 - [test_withdraw.py-->line:89] - INFO: 用例--【会员id为小数】---执行通过
2021-01-05 21:55:22,694 - [test_withdraw.py-->line:85] - ERROR: 用例--【提现金额为0】---执行失败
2021-01-05 21:55:22,695 - [test_withdraw.py-->line:86] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_withdraw.py", line 77, in test_withdraw
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2021-01-05 21:55:22,833 - [test_withdraw.py-->line:85] - ERROR: 用例--【提现金额为负数】---执行失败
2021-01-05 21:55:22,834 - [test_withdraw.py-->line:86] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_withdraw.py", line 78, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2021-01-05 21:55:22,981 - [test_withdraw.py-->line:85] - ERROR: 用例--【提现金额为空】---执行失败
2021-01-05 21:55:22,981 - [test_withdraw.py-->line:86] - ERROR: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_withdraw.py", line 78, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^

2021-01-05 21:55:23,112 - [test_withdraw.py-->line:85] - ERROR: 用例--【提现金额-3位小数】---执行失败
2021-01-05 21:55:23,112 - [test_withdraw.py-->line:86] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_withdraw.py", line 78, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2021-01-05 21:55:23,257 - [test_withdraw.py-->line:85] - ERROR: 用例--【提现金额-大于50万】---执行失败
2021-01-05 21:55:23,257 - [test_withdraw.py-->line:86] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_27day_project\testcases\test_withdraw.py", line 78, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2021-01-05 21:55:23,390 - [test_withdraw.py-->line:89] - INFO: 用例--【提现金额-非数字】---执行通过
2021-01-07 20:15:08,919 - [test_01register.py-->line:75] - INFO: 用例--【注册成功-带注册名】---执行通过
2021-01-07 20:15:09,055 - [test_01register.py-->line:75] - INFO: 用例--【成功-不带用户名】---执行通过
2021-01-07 20:15:09,174 - [test_01register.py-->line:75] - INFO: 用例--【不输入手机号】---执行通过
2021-01-07 20:15:09,306 - [test_01register.py-->line:75] - INFO: 用例--【手机号长度10位】---执行通过
2021-01-07 20:15:09,411 - [test_01register.py-->line:75] - INFO: 用例--【手机号长度12位】---执行通过
2021-01-07 20:15:09,531 - [test_01register.py-->line:75] - INFO: 用例--【手机号含有非法字符】---执行通过
2021-01-07 20:15:09,682 - [test_01register.py-->line:75] - INFO: 用例--【已注册过的手机号】---执行通过
2021-01-07 20:15:09,804 - [test_01register.py-->line:75] - INFO: 用例--【密码7位】---执行通过
2021-01-07 20:15:09,935 - [test_01register.py-->line:75] - INFO: 用例--【密码17位】---执行通过
2021-01-07 20:15:10,052 - [test_01register.py-->line:75] - INFO: 用例--【不输入密码】---执行通过
2021-01-07 20:15:10,192 - [test_01register.py-->line:75] - INFO: 用例--【注册名11位】---执行通过
2021-01-07 20:15:10,313 - [test_01register.py-->line:75] - INFO: 用例--【类型输入非0，1内容】---执行通过
2021-01-07 20:15:10,466 - [test_01register.py-->line:75] - INFO: 用例--【不输入类型】---执行通过
2021-01-07 20:15:10,541 - [test_02login.py-->line:56] - INFO: 用例--【登录成功】---执行通过
2021-01-07 20:15:10,580 - [test_02login.py-->line:56] - INFO: 用例--【手机号为空】---执行通过
2021-01-07 20:15:10,623 - [test_02login.py-->line:56] - INFO: 用例--【密码为空】---执行通过
2021-01-07 20:15:10,710 - [test_02login.py-->line:56] - INFO: 用例--【手机号未注册】---执行通过
2021-01-07 20:15:10,774 - [test_02login.py-->line:56] - INFO: 用例--【密码错误】---执行通过
2021-01-07 20:15:10,831 - [test_02login.py-->line:56] - INFO: 用例--【手机号格式错误】---执行通过
2021-01-07 20:15:11,052 - [test_03recharge.py-->line:95] - INFO: 用例--【充值成功-整数】---执行通过
2021-01-07 20:15:11,241 - [test_03recharge.py-->line:95] - INFO: 用例--【充值成功-1位小数】---执行通过
2021-01-07 20:15:11,411 - [test_03recharge.py-->line:95] - INFO: 用例--【充值成功-2位小数】---执行通过
2021-01-07 20:15:11,593 - [test_03recharge.py-->line:95] - INFO: 用例--【充值成功-50万】---执行通过
2021-01-07 20:15:11,766 - [test_03recharge.py-->line:95] - INFO: 用例--【会员id为空】---执行通过
2021-01-07 20:15:11,953 - [test_03recharge.py-->line:95] - INFO: 用例--【会员id为小数】---执行通过
2021-01-07 20:15:12,123 - [test_03recharge.py-->line:91] - ERROR: 用例--【充值金额为0】---执行失败
2021-01-07 20:15:12,123 - [test_03recharge.py-->line:92] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_03recharge.py", line 80, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2021-01-07 20:15:12,300 - [test_03recharge.py-->line:91] - ERROR: 用例--【充值金额为负数】---执行失败
2021-01-07 20:15:12,300 - [test_03recharge.py-->line:92] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_03recharge.py", line 81, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2021-01-07 20:15:12,458 - [test_03recharge.py-->line:91] - ERROR: 用例--【充值金额为空】---执行失败
2021-01-07 20:15:12,459 - [test_03recharge.py-->line:92] - ERROR: 1 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_03recharge.py", line 80, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 2
2021-01-07 20:15:12,644 - [test_03recharge.py-->line:91] - ERROR: 用例--【充值金额-3位小数】---执行失败
2021-01-07 20:15:12,644 - [test_03recharge.py-->line:92] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_03recharge.py", line 81, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2021-01-07 20:15:12,805 - [test_03recharge.py-->line:91] - ERROR: 用例--【充值金额-大于50万】---执行失败
2021-01-07 20:15:12,806 - [test_03recharge.py-->line:92] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_03recharge.py", line 81, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2021-01-07 20:15:12,969 - [test_03recharge.py-->line:95] - INFO: 用例--【充值金额-非数字】---执行通过
2021-01-07 20:15:13,227 - [test_04withdraw.py-->line:89] - INFO: 用例--【提现成功-整数】---执行通过
2021-01-07 20:15:13,407 - [test_04withdraw.py-->line:89] - INFO: 用例--【提现成功-1位小数】---执行通过
2021-01-07 20:15:13,593 - [test_04withdraw.py-->line:89] - INFO: 用例--【提现成功-2位小数】---执行通过
2021-01-07 20:15:13,766 - [test_04withdraw.py-->line:89] - INFO: 用例--【提现成功-50万】---执行通过
2021-01-07 20:15:13,945 - [test_04withdraw.py-->line:89] - INFO: 用例--【会员id为空】---执行通过
2021-01-07 20:15:14,127 - [test_04withdraw.py-->line:89] - INFO: 用例--【会员id为小数】---执行通过
2021-01-07 20:15:14,313 - [test_04withdraw.py-->line:85] - ERROR: 用例--【提现金额为0】---执行失败
2021-01-07 20:15:14,314 - [test_04withdraw.py-->line:86] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_04withdraw.py", line 77, in test_withdraw
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2021-01-07 20:15:14,498 - [test_04withdraw.py-->line:85] - ERROR: 用例--【提现金额为负数】---执行失败
2021-01-07 20:15:14,498 - [test_04withdraw.py-->line:86] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_04withdraw.py", line 78, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2021-01-07 20:15:14,681 - [test_04withdraw.py-->line:85] - ERROR: 用例--【提现金额为空】---执行失败
2021-01-07 20:15:14,681 - [test_04withdraw.py-->line:86] - ERROR: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_04withdraw.py", line 78, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^

2021-01-07 20:15:14,852 - [test_04withdraw.py-->line:85] - ERROR: 用例--【提现金额-3位小数】---执行失败
2021-01-07 20:15:14,853 - [test_04withdraw.py-->line:86] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_04withdraw.py", line 78, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2021-01-07 20:15:15,025 - [test_04withdraw.py-->line:85] - ERROR: 用例--【提现金额-大于50万】---执行失败
2021-01-07 20:15:15,026 - [test_04withdraw.py-->line:86] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_04withdraw.py", line 78, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2021-01-07 20:15:15,195 - [test_04withdraw.py-->line:89] - INFO: 用例--【提现金额-非数字】---执行通过
2021-01-07 20:15:15,498 - [test_05add.py-->line:65] - INFO: 用例--【加标成功】---执行成功
2021-01-07 20:15:15,680 - [test_05add.py-->line:65] - INFO: 用例--【加标失败—借款人id为空】---执行成功
2021-01-07 20:15:15,885 - [test_05add.py-->line:65] - INFO: 用例--【加标失败—标题为空】---执行成功
2021-01-07 20:15:16,064 - [test_05add.py-->line:65] - INFO: 用例--【加标失败—借款金额为空】---执行成功
2021-01-07 20:15:16,255 - [test_05add.py-->line:65] - INFO: 用例--【加标失败—年利率为空】---执行成功
2021-01-07 20:15:16,486 - [test_05add.py-->line:65] - INFO: 用例--【加标失败—借款期限为空】---执行成功
2021-01-07 20:15:16,709 - [test_05add.py-->line:65] - INFO: 用例--【加标失败—借款期限类型为空】---执行成功
2021-01-07 20:15:16,904 - [test_05add.py-->line:65] - INFO: 用例--【加标失败—竞标天数为空】---执行成功
2021-01-07 20:15:17,092 - [test_05add.py-->line:65] - INFO: 用例--【加标失败—借款人id不是当前登录用户】---执行成功
2021-01-07 20:15:17,279 - [test_05add.py-->line:65] - INFO: 用例--【加标失败—借款金额为负数】---执行成功
2021-01-07 20:15:17,448 - [test_05add.py-->line:65] - INFO: 用例--【加标失败—借款金额为小数】---执行成功
2021-01-07 20:15:17,712 - [test_06audit.py-->line:80] - INFO: 用例--【审核通过】---执行通过
2021-01-07 20:15:17,849 - [test_06audit.py-->line:80] - INFO: 用例--【审核不通过】---执行通过
2021-01-07 20:15:17,962 - [test_06audit.py-->line:80] - INFO: 用例--【项目不待审核状态】---执行通过
2021-01-07 20:15:18,058 - [test_06audit.py-->line:80] - INFO: 用例--【参数approved_or_not为空】---执行通过
2021-01-07 20:15:18,158 - [test_06audit.py-->line:80] - INFO: 用例--【项目id为空】---执行通过
2021-01-07 20:15:18,257 - [test_06audit.py-->line:80] - INFO: 用例--【项目id不存在】---执行通过
2021-01-07 20:15:18,811 - [test_07invest.py-->line:123] - INFO: 用例--【投资人正常投资】---执行成功
2021-01-07 20:15:18,870 - [test_07invest.py-->line:123] - INFO: 用例--【投资人id为空】---执行成功
2021-01-07 20:15:18,928 - [test_07invest.py-->line:123] - INFO: 用例--【标id为空】---执行成功
2021-01-07 20:15:18,985 - [test_07invest.py-->line:119] - ERROR: 用例--【投资金额为空】---执行失败
2021-01-07 20:15:18,985 - [test_07invest.py-->line:120] - ERROR: '金额为空' not found in '余额为空'
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_07invest.py", line 108, in test_invest
    self.assertIn(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额为空' not found in '余额为空'
2021-01-07 20:15:19,032 - [test_07invest.py-->line:119] - ERROR: 用例--【投资金额为非100的整数倍】---执行失败
2021-01-07 20:15:19,032 - [test_07invest.py-->line:120] - ERROR: '投资金额必须大于100，并且可以被100整除' not found in '充值金额必须大于100，并且可以被100整除'
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_07invest.py", line 108, in test_invest
    self.assertIn(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '投资金额必须大于100，并且可以被100整除' not found in '充值金额必须大于100，并且可以被100整除'
2021-01-07 20:15:19,077 - [test_07invest.py-->line:123] - INFO: 用例--【投资金额大于可投余额】---执行成功
2021-01-07 20:17:28,677 - [test_01register.py-->line:75] - INFO: 用例--【注册成功-带注册名】---执行通过
2021-01-07 20:17:28,794 - [test_01register.py-->line:75] - INFO: 用例--【成功-不带用户名】---执行通过
2021-01-07 20:17:28,892 - [test_01register.py-->line:75] - INFO: 用例--【不输入手机号】---执行通过
2021-01-07 20:17:28,990 - [test_01register.py-->line:75] - INFO: 用例--【手机号长度10位】---执行通过
2021-01-07 20:17:29,083 - [test_01register.py-->line:75] - INFO: 用例--【手机号长度12位】---执行通过
2021-01-07 20:17:29,193 - [test_01register.py-->line:75] - INFO: 用例--【手机号含有非法字符】---执行通过
2021-01-07 20:17:29,326 - [test_01register.py-->line:75] - INFO: 用例--【已注册过的手机号】---执行通过
2021-01-07 20:17:29,429 - [test_01register.py-->line:75] - INFO: 用例--【密码7位】---执行通过
2021-01-07 20:17:29,543 - [test_01register.py-->line:75] - INFO: 用例--【密码17位】---执行通过
2021-01-07 20:17:29,654 - [test_01register.py-->line:75] - INFO: 用例--【不输入密码】---执行通过
2021-01-07 20:17:29,763 - [test_01register.py-->line:75] - INFO: 用例--【注册名11位】---执行通过
2021-01-07 20:17:29,876 - [test_01register.py-->line:75] - INFO: 用例--【类型输入非0，1内容】---执行通过
2021-01-07 20:17:30,019 - [test_01register.py-->line:75] - INFO: 用例--【不输入类型】---执行通过
2021-01-07 20:17:30,096 - [test_02login.py-->line:56] - INFO: 用例--【登录成功】---执行通过
2021-01-07 20:17:30,154 - [test_02login.py-->line:56] - INFO: 用例--【手机号为空】---执行通过
2021-01-07 20:17:30,197 - [test_02login.py-->line:56] - INFO: 用例--【密码为空】---执行通过
2021-01-07 20:17:30,261 - [test_02login.py-->line:56] - INFO: 用例--【手机号未注册】---执行通过
2021-01-07 20:17:30,335 - [test_02login.py-->line:56] - INFO: 用例--【密码错误】---执行通过
2021-01-07 20:17:30,390 - [test_02login.py-->line:56] - INFO: 用例--【手机号格式错误】---执行通过
2021-01-07 20:17:30,616 - [test_03recharge.py-->line:95] - INFO: 用例--【充值成功-整数】---执行通过
2021-01-07 20:17:30,775 - [test_03recharge.py-->line:95] - INFO: 用例--【充值成功-1位小数】---执行通过
2021-01-07 20:17:30,979 - [test_03recharge.py-->line:95] - INFO: 用例--【充值成功-2位小数】---执行通过
2021-01-07 20:17:31,151 - [test_03recharge.py-->line:95] - INFO: 用例--【充值成功-50万】---执行通过
2021-01-07 20:17:31,316 - [test_03recharge.py-->line:95] - INFO: 用例--【会员id为空】---执行通过
2021-01-07 20:17:31,485 - [test_03recharge.py-->line:95] - INFO: 用例--【会员id为小数】---执行通过
2021-01-07 20:17:31,661 - [test_03recharge.py-->line:91] - ERROR: 用例--【充值金额为0】---执行失败
2021-01-07 20:17:31,661 - [test_03recharge.py-->line:92] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_03recharge.py", line 80, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2021-01-07 20:17:31,820 - [test_03recharge.py-->line:91] - ERROR: 用例--【充值金额为负数】---执行失败
2021-01-07 20:17:31,821 - [test_03recharge.py-->line:92] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_03recharge.py", line 81, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2021-01-07 20:17:32,000 - [test_03recharge.py-->line:91] - ERROR: 用例--【充值金额为空】---执行失败
2021-01-07 20:17:32,000 - [test_03recharge.py-->line:92] - ERROR: 1 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_03recharge.py", line 80, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 2
2021-01-07 20:17:32,180 - [test_03recharge.py-->line:91] - ERROR: 用例--【充值金额-3位小数】---执行失败
2021-01-07 20:17:32,182 - [test_03recharge.py-->line:92] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_03recharge.py", line 81, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2021-01-07 20:17:32,363 - [test_03recharge.py-->line:91] - ERROR: 用例--【充值金额-大于50万】---执行失败
2021-01-07 20:17:32,363 - [test_03recharge.py-->line:92] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_03recharge.py", line 81, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2021-01-07 20:17:32,540 - [test_03recharge.py-->line:95] - INFO: 用例--【充值金额-非数字】---执行通过
2021-01-07 20:17:32,767 - [test_04withdraw.py-->line:89] - INFO: 用例--【提现成功-整数】---执行通过
2021-01-07 20:17:32,942 - [test_04withdraw.py-->line:89] - INFO: 用例--【提现成功-1位小数】---执行通过
2021-01-07 20:17:33,097 - [test_04withdraw.py-->line:89] - INFO: 用例--【提现成功-2位小数】---执行通过
2021-01-07 20:17:33,259 - [test_04withdraw.py-->line:89] - INFO: 用例--【提现成功-50万】---执行通过
2021-01-07 20:17:33,417 - [test_04withdraw.py-->line:89] - INFO: 用例--【会员id为空】---执行通过
2021-01-07 20:17:33,582 - [test_04withdraw.py-->line:89] - INFO: 用例--【会员id为小数】---执行通过
2021-01-07 20:17:33,748 - [test_04withdraw.py-->line:85] - ERROR: 用例--【提现金额为0】---执行失败
2021-01-07 20:17:33,748 - [test_04withdraw.py-->line:86] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_04withdraw.py", line 77, in test_withdraw
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2021-01-07 20:17:33,897 - [test_04withdraw.py-->line:85] - ERROR: 用例--【提现金额为负数】---执行失败
2021-01-07 20:17:33,897 - [test_04withdraw.py-->line:86] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_04withdraw.py", line 78, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2021-01-07 20:17:34,066 - [test_04withdraw.py-->line:85] - ERROR: 用例--【提现金额为空】---执行失败
2021-01-07 20:17:34,066 - [test_04withdraw.py-->line:86] - ERROR: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_04withdraw.py", line 78, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^

2021-01-07 20:17:34,234 - [test_04withdraw.py-->line:85] - ERROR: 用例--【提现金额-3位小数】---执行失败
2021-01-07 20:17:34,234 - [test_04withdraw.py-->line:86] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_04withdraw.py", line 78, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2021-01-07 20:17:34,380 - [test_04withdraw.py-->line:85] - ERROR: 用例--【提现金额-大于50万】---执行失败
2021-01-07 20:17:34,380 - [test_04withdraw.py-->line:86] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_04withdraw.py", line 78, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2021-01-07 20:17:34,545 - [test_04withdraw.py-->line:89] - INFO: 用例--【提现金额-非数字】---执行通过
2021-01-07 20:17:34,820 - [test_05add.py-->line:65] - INFO: 用例--【加标成功】---执行成功
2021-01-07 20:17:34,998 - [test_05add.py-->line:65] - INFO: 用例--【加标失败—借款人id为空】---执行成功
2021-01-07 20:17:35,166 - [test_05add.py-->line:65] - INFO: 用例--【加标失败—标题为空】---执行成功
2021-01-07 20:17:35,341 - [test_05add.py-->line:65] - INFO: 用例--【加标失败—借款金额为空】---执行成功
2021-01-07 20:17:35,549 - [test_05add.py-->line:65] - INFO: 用例--【加标失败—年利率为空】---执行成功
2021-01-07 20:17:35,741 - [test_05add.py-->line:65] - INFO: 用例--【加标失败—借款期限为空】---执行成功
2021-01-07 20:17:35,935 - [test_05add.py-->line:65] - INFO: 用例--【加标失败—借款期限类型为空】---执行成功
2021-01-07 20:17:36,136 - [test_05add.py-->line:65] - INFO: 用例--【加标失败—竞标天数为空】---执行成功
2021-01-07 20:17:36,665 - [test_05add.py-->line:65] - INFO: 用例--【加标失败—借款人id不是当前登录用户】---执行成功
2021-01-07 20:17:36,891 - [test_05add.py-->line:65] - INFO: 用例--【加标失败—借款金额为负数】---执行成功
2021-01-07 20:17:37,080 - [test_05add.py-->line:65] - INFO: 用例--【加标失败—借款金额为小数】---执行成功
2021-01-07 20:17:37,364 - [test_06audit.py-->line:80] - INFO: 用例--【审核通过】---执行通过
2021-01-07 20:17:37,504 - [test_06audit.py-->line:80] - INFO: 用例--【审核不通过】---执行通过
2021-01-07 20:17:37,590 - [test_06audit.py-->line:80] - INFO: 用例--【项目不待审核状态】---执行通过
2021-01-07 20:17:37,697 - [test_06audit.py-->line:80] - INFO: 用例--【参数approved_or_not为空】---执行通过
2021-01-07 20:17:37,784 - [test_06audit.py-->line:80] - INFO: 用例--【项目id为空】---执行通过
2021-01-07 20:17:37,885 - [test_06audit.py-->line:80] - INFO: 用例--【项目id不存在】---执行通过
2021-01-07 20:17:38,400 - [test_07invest.py-->line:123] - INFO: 用例--【投资人正常投资】---执行成功
2021-01-07 20:17:38,441 - [test_07invest.py-->line:123] - INFO: 用例--【投资人id为空】---执行成功
2021-01-07 20:17:38,494 - [test_07invest.py-->line:123] - INFO: 用例--【标id为空】---执行成功
2021-01-07 20:17:38,538 - [test_07invest.py-->line:119] - ERROR: 用例--【投资金额为空】---执行失败
2021-01-07 20:17:38,538 - [test_07invest.py-->line:120] - ERROR: '金额为空' not found in '余额为空'
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_07invest.py", line 108, in test_invest
    self.assertIn(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额为空' not found in '余额为空'
2021-01-07 20:17:38,592 - [test_07invest.py-->line:119] - ERROR: 用例--【投资金额为非100的整数倍】---执行失败
2021-01-07 20:17:38,593 - [test_07invest.py-->line:120] - ERROR: '投资金额必须大于100，并且可以被100整除' not found in '充值金额必须大于100，并且可以被100整除'
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_07invest.py", line 108, in test_invest
    self.assertIn(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '投资金额必须大于100，并且可以被100整除' not found in '充值金额必须大于100，并且可以被100整除'
2021-01-07 20:17:38,641 - [test_07invest.py-->line:123] - INFO: 用例--【投资金额大于可投余额】---执行成功
2021-01-07 20:18:47,252 - [test_01register.py-->line:75] - INFO: 用例--【注册成功-带注册名】---执行通过
2021-01-07 20:18:47,392 - [test_01register.py-->line:75] - INFO: 用例--【成功-不带用户名】---执行通过
2021-01-07 20:18:47,514 - [test_01register.py-->line:75] - INFO: 用例--【不输入手机号】---执行通过
2021-01-07 20:18:47,617 - [test_01register.py-->line:75] - INFO: 用例--【手机号长度10位】---执行通过
2021-01-07 20:18:47,726 - [test_01register.py-->line:75] - INFO: 用例--【手机号长度12位】---执行通过
2021-01-07 20:18:47,845 - [test_01register.py-->line:75] - INFO: 用例--【手机号含有非法字符】---执行通过
2021-01-07 20:18:47,984 - [test_01register.py-->line:75] - INFO: 用例--【已注册过的手机号】---执行通过
2021-01-07 20:18:48,111 - [test_01register.py-->line:75] - INFO: 用例--【密码7位】---执行通过
2021-01-07 20:18:48,220 - [test_01register.py-->line:75] - INFO: 用例--【密码17位】---执行通过
2021-01-07 20:18:48,339 - [test_01register.py-->line:75] - INFO: 用例--【不输入密码】---执行通过
2021-01-07 20:18:48,460 - [test_01register.py-->line:75] - INFO: 用例--【注册名11位】---执行通过
2021-01-07 20:18:48,576 - [test_01register.py-->line:75] - INFO: 用例--【类型输入非0，1内容】---执行通过
2021-01-07 20:18:48,727 - [test_01register.py-->line:75] - INFO: 用例--【不输入类型】---执行通过
2021-01-07 20:18:48,808 - [test_02login.py-->line:56] - INFO: 用例--【登录成功】---执行通过
2021-01-07 20:18:48,848 - [test_02login.py-->line:56] - INFO: 用例--【手机号为空】---执行通过
2021-01-07 20:18:48,903 - [test_02login.py-->line:56] - INFO: 用例--【密码为空】---执行通过
2021-01-07 20:18:48,973 - [test_02login.py-->line:56] - INFO: 用例--【手机号未注册】---执行通过
2021-01-07 20:18:49,037 - [test_02login.py-->line:56] - INFO: 用例--【密码错误】---执行通过
2021-01-07 20:18:49,077 - [test_02login.py-->line:56] - INFO: 用例--【手机号格式错误】---执行通过
2021-01-07 20:18:49,310 - [test_03recharge.py-->line:95] - INFO: 用例--【充值成功-整数】---执行通过
2021-01-07 20:18:49,482 - [test_03recharge.py-->line:95] - INFO: 用例--【充值成功-1位小数】---执行通过
2021-01-07 20:18:49,651 - [test_03recharge.py-->line:95] - INFO: 用例--【充值成功-2位小数】---执行通过
2021-01-07 20:18:49,832 - [test_03recharge.py-->line:95] - INFO: 用例--【充值成功-50万】---执行通过
2021-01-07 20:18:50,012 - [test_03recharge.py-->line:95] - INFO: 用例--【会员id为空】---执行通过
2021-01-07 20:18:50,186 - [test_03recharge.py-->line:95] - INFO: 用例--【会员id为小数】---执行通过
2021-01-07 20:18:50,371 - [test_03recharge.py-->line:91] - ERROR: 用例--【充值金额为0】---执行失败
2021-01-07 20:18:50,371 - [test_03recharge.py-->line:92] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_03recharge.py", line 80, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2021-01-07 20:18:50,543 - [test_03recharge.py-->line:91] - ERROR: 用例--【充值金额为负数】---执行失败
2021-01-07 20:18:50,544 - [test_03recharge.py-->line:92] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_03recharge.py", line 81, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2021-01-07 20:18:50,709 - [test_03recharge.py-->line:91] - ERROR: 用例--【充值金额为空】---执行失败
2021-01-07 20:18:50,709 - [test_03recharge.py-->line:92] - ERROR: 1 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_03recharge.py", line 80, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 2
2021-01-07 20:18:50,878 - [test_03recharge.py-->line:91] - ERROR: 用例--【充值金额-3位小数】---执行失败
2021-01-07 20:18:50,878 - [test_03recharge.py-->line:92] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_03recharge.py", line 81, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2021-01-07 20:18:51,043 - [test_03recharge.py-->line:91] - ERROR: 用例--【充值金额-大于50万】---执行失败
2021-01-07 20:18:51,043 - [test_03recharge.py-->line:92] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_03recharge.py", line 81, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2021-01-07 20:18:51,220 - [test_03recharge.py-->line:95] - INFO: 用例--【充值金额-非数字】---执行通过
2021-01-07 20:18:51,460 - [test_04withdraw.py-->line:89] - INFO: 用例--【提现成功-整数】---执行通过
2021-01-07 20:18:51,619 - [test_04withdraw.py-->line:89] - INFO: 用例--【提现成功-1位小数】---执行通过
2021-01-07 20:18:51,779 - [test_04withdraw.py-->line:89] - INFO: 用例--【提现成功-2位小数】---执行通过
2021-01-07 20:18:51,938 - [test_04withdraw.py-->line:89] - INFO: 用例--【提现成功-50万】---执行通过
2021-01-07 20:18:52,094 - [test_04withdraw.py-->line:89] - INFO: 用例--【会员id为空】---执行通过
2021-01-07 20:18:52,233 - [test_04withdraw.py-->line:89] - INFO: 用例--【会员id为小数】---执行通过
2021-01-07 20:18:52,390 - [test_04withdraw.py-->line:85] - ERROR: 用例--【提现金额为0】---执行失败
2021-01-07 20:18:52,390 - [test_04withdraw.py-->line:86] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_04withdraw.py", line 77, in test_withdraw
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2021-01-07 20:18:52,553 - [test_04withdraw.py-->line:85] - ERROR: 用例--【提现金额为负数】---执行失败
2021-01-07 20:18:52,554 - [test_04withdraw.py-->line:86] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_04withdraw.py", line 78, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2021-01-07 20:18:52,696 - [test_04withdraw.py-->line:85] - ERROR: 用例--【提现金额为空】---执行失败
2021-01-07 20:18:52,696 - [test_04withdraw.py-->line:86] - ERROR: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_04withdraw.py", line 78, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^

2021-01-07 20:18:52,832 - [test_04withdraw.py-->line:85] - ERROR: 用例--【提现金额-3位小数】---执行失败
2021-01-07 20:18:52,833 - [test_04withdraw.py-->line:86] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_04withdraw.py", line 78, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2021-01-07 20:18:52,978 - [test_04withdraw.py-->line:85] - ERROR: 用例--【提现金额-大于50万】---执行失败
2021-01-07 20:18:52,979 - [test_04withdraw.py-->line:86] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_04withdraw.py", line 78, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2021-01-07 20:18:53,130 - [test_04withdraw.py-->line:89] - INFO: 用例--【提现金额-非数字】---执行通过
2021-01-07 20:18:53,389 - [test_05add.py-->line:65] - INFO: 用例--【加标成功】---执行成功
2021-01-07 20:18:53,564 - [test_05add.py-->line:65] - INFO: 用例--【加标失败—借款人id为空】---执行成功
2021-01-07 20:18:53,738 - [test_05add.py-->line:65] - INFO: 用例--【加标失败—标题为空】---执行成功
2021-01-07 20:18:53,922 - [test_05add.py-->line:65] - INFO: 用例--【加标失败—借款金额为空】---执行成功
2021-01-07 20:18:54,112 - [test_05add.py-->line:65] - INFO: 用例--【加标失败—年利率为空】---执行成功
2021-01-07 20:18:54,305 - [test_05add.py-->line:65] - INFO: 用例--【加标失败—借款期限为空】---执行成功
2021-01-07 20:18:54,482 - [test_05add.py-->line:65] - INFO: 用例--【加标失败—借款期限类型为空】---执行成功
2021-01-07 20:18:54,661 - [test_05add.py-->line:65] - INFO: 用例--【加标失败—竞标天数为空】---执行成功
2021-01-07 20:18:54,848 - [test_05add.py-->line:65] - INFO: 用例--【加标失败—借款人id不是当前登录用户】---执行成功
2021-01-07 20:18:55,037 - [test_05add.py-->line:65] - INFO: 用例--【加标失败—借款金额为负数】---执行成功
2021-01-07 20:18:55,220 - [test_05add.py-->line:65] - INFO: 用例--【加标失败—借款金额为小数】---执行成功
2021-01-07 20:18:55,468 - [test_06audit.py-->line:80] - INFO: 用例--【审核通过】---执行通过
2021-01-07 20:18:55,601 - [test_06audit.py-->line:80] - INFO: 用例--【审核不通过】---执行通过
2021-01-07 20:18:55,705 - [test_06audit.py-->line:80] - INFO: 用例--【项目不待审核状态】---执行通过
2021-01-07 20:18:55,815 - [test_06audit.py-->line:80] - INFO: 用例--【参数approved_or_not为空】---执行通过
2021-01-07 20:18:55,930 - [test_06audit.py-->line:80] - INFO: 用例--【项目id为空】---执行通过
2021-01-07 20:18:56,033 - [test_06audit.py-->line:80] - INFO: 用例--【项目id不存在】---执行通过
2021-01-07 20:18:56,725 - [test_07invest.py-->line:123] - INFO: 用例--【投资人正常投资】---执行成功
2021-01-07 20:18:56,786 - [test_07invest.py-->line:123] - INFO: 用例--【投资人id为空】---执行成功
2021-01-07 20:18:56,847 - [test_07invest.py-->line:123] - INFO: 用例--【标id为空】---执行成功
2021-01-07 20:18:56,887 - [test_07invest.py-->line:119] - ERROR: 用例--【投资金额为空】---执行失败
2021-01-07 20:18:56,887 - [test_07invest.py-->line:120] - ERROR: '金额为空' not found in '余额为空'
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_07invest.py", line 108, in test_invest
    self.assertIn(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额为空' not found in '余额为空'
2021-01-07 20:18:56,930 - [test_07invest.py-->line:119] - ERROR: 用例--【投资金额为非100的整数倍】---执行失败
2021-01-07 20:18:56,931 - [test_07invest.py-->line:120] - ERROR: '投资金额必须大于100，并且可以被100整除' not found in '充值金额必须大于100，并且可以被100整除'
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_07invest.py", line 108, in test_invest
    self.assertIn(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '投资金额必须大于100，并且可以被100整除' not found in '充值金额必须大于100，并且可以被100整除'
2021-01-07 20:18:56,982 - [test_07invest.py-->line:123] - INFO: 用例--【投资金额大于可投余额】---执行成功
2021-01-07 20:33:48,389 - [test_01register.py-->line:75] - INFO: 用例--【注册成功-带注册名】---执行通过
2021-01-07 20:33:48,533 - [test_01register.py-->line:75] - INFO: 用例--【成功-不带用户名】---执行通过
2021-01-07 20:33:48,652 - [test_01register.py-->line:75] - INFO: 用例--【不输入手机号】---执行通过
2021-01-07 20:33:48,773 - [test_01register.py-->line:75] - INFO: 用例--【手机号长度10位】---执行通过
2021-01-07 20:33:48,879 - [test_01register.py-->line:75] - INFO: 用例--【手机号长度12位】---执行通过
2021-01-07 20:33:48,999 - [test_01register.py-->line:75] - INFO: 用例--【手机号含有非法字符】---执行通过
2021-01-07 20:33:49,138 - [test_01register.py-->line:75] - INFO: 用例--【已注册过的手机号】---执行通过
2021-01-07 20:33:49,248 - [test_01register.py-->line:75] - INFO: 用例--【密码7位】---执行通过
2021-01-07 20:33:49,351 - [test_01register.py-->line:75] - INFO: 用例--【密码17位】---执行通过
2021-01-07 20:33:49,454 - [test_01register.py-->line:75] - INFO: 用例--【不输入密码】---执行通过
2021-01-07 20:33:49,575 - [test_01register.py-->line:75] - INFO: 用例--【注册名11位】---执行通过
2021-01-07 20:33:49,705 - [test_01register.py-->line:75] - INFO: 用例--【类型输入非0，1内容】---执行通过
2021-01-07 20:33:49,839 - [test_01register.py-->line:75] - INFO: 用例--【不输入类型】---执行通过
2021-01-07 20:33:49,918 - [test_02login.py-->line:56] - INFO: 用例--【登录成功】---执行通过
2021-01-07 20:33:49,956 - [test_02login.py-->line:56] - INFO: 用例--【手机号为空】---执行通过
2021-01-07 20:33:50,011 - [test_02login.py-->line:56] - INFO: 用例--【密码为空】---执行通过
2021-01-07 20:33:50,085 - [test_02login.py-->line:56] - INFO: 用例--【手机号未注册】---执行通过
2021-01-07 20:33:50,145 - [test_02login.py-->line:56] - INFO: 用例--【密码错误】---执行通过
2021-01-07 20:33:50,190 - [test_02login.py-->line:56] - INFO: 用例--【手机号格式错误】---执行通过
2021-01-07 20:33:50,461 - [test_03recharge.py-->line:95] - INFO: 用例--【充值成功-整数】---执行通过
2021-01-07 20:33:50,670 - [test_03recharge.py-->line:95] - INFO: 用例--【充值成功-1位小数】---执行通过
2021-01-07 20:33:50,872 - [test_03recharge.py-->line:95] - INFO: 用例--【充值成功-2位小数】---执行通过
2021-01-07 20:33:51,073 - [test_03recharge.py-->line:95] - INFO: 用例--【充值成功-50万】---执行通过
2021-01-07 20:33:51,276 - [test_03recharge.py-->line:95] - INFO: 用例--【会员id为空】---执行通过
2021-01-07 20:33:51,475 - [test_03recharge.py-->line:95] - INFO: 用例--【会员id为小数】---执行通过
2021-01-07 20:33:51,689 - [test_03recharge.py-->line:91] - ERROR: 用例--【充值金额为0】---执行失败
2021-01-07 20:33:51,689 - [test_03recharge.py-->line:92] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_03recharge.py", line 80, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2021-01-07 20:33:51,898 - [test_03recharge.py-->line:91] - ERROR: 用例--【充值金额为负数】---执行失败
2021-01-07 20:33:51,898 - [test_03recharge.py-->line:92] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_03recharge.py", line 81, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2021-01-07 20:33:52,097 - [test_03recharge.py-->line:91] - ERROR: 用例--【充值金额为空】---执行失败
2021-01-07 20:33:52,097 - [test_03recharge.py-->line:92] - ERROR: 1 != 2
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_03recharge.py", line 80, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 2
2021-01-07 20:33:52,299 - [test_03recharge.py-->line:91] - ERROR: 用例--【充值金额-3位小数】---执行失败
2021-01-07 20:33:52,299 - [test_03recharge.py-->line:92] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_03recharge.py", line 81, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2021-01-07 20:33:52,490 - [test_03recharge.py-->line:91] - ERROR: 用例--【充值金额-大于50万】---执行失败
2021-01-07 20:33:52,490 - [test_03recharge.py-->line:92] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_03recharge.py", line 81, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^

2021-01-07 20:33:52,697 - [test_03recharge.py-->line:95] - INFO: 用例--【充值金额-非数字】---执行通过
2021-01-07 20:33:52,905 - [test_04withdraw.py-->line:89] - INFO: 用例--【提现成功-整数】---执行通过
2021-01-07 20:33:53,069 - [test_04withdraw.py-->line:89] - INFO: 用例--【提现成功-1位小数】---执行通过
2021-01-07 20:33:53,226 - [test_04withdraw.py-->line:89] - INFO: 用例--【提现成功-2位小数】---执行通过
2021-01-07 20:33:53,390 - [test_04withdraw.py-->line:89] - INFO: 用例--【提现成功-50万】---执行通过
2021-01-07 20:33:53,524 - [test_04withdraw.py-->line:89] - INFO: 用例--【会员id为空】---执行通过
2021-01-07 20:33:53,689 - [test_04withdraw.py-->line:89] - INFO: 用例--【会员id为小数】---执行通过
2021-01-07 20:33:53,844 - [test_04withdraw.py-->line:85] - ERROR: 用例--【提现金额为0】---执行失败
2021-01-07 20:33:53,844 - [test_04withdraw.py-->line:86] - ERROR: 2 != 0
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_04withdraw.py", line 77, in test_withdraw
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0
2021-01-07 20:33:54,001 - [test_04withdraw.py-->line:85] - ERROR: 用例--【提现金额为负数】---执行失败
2021-01-07 20:33:54,001 - [test_04withdraw.py-->line:86] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_04withdraw.py", line 78, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2021-01-07 20:33:54,171 - [test_04withdraw.py-->line:85] - ERROR: 用例--【提现金额为空】---执行失败
2021-01-07 20:33:54,171 - [test_04withdraw.py-->line:86] - ERROR: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_04withdraw.py", line 78, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额为空' != '余额为空'
- 金额为空
? ^
+ 余额为空
? ^

2021-01-07 20:33:54,359 - [test_04withdraw.py-->line:85] - ERROR: 用例--【提现金额-3位小数】---执行失败
2021-01-07 20:33:54,359 - [test_04withdraw.py-->line:86] - ERROR: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_04withdraw.py", line 78, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^

2021-01-07 20:33:54,516 - [test_04withdraw.py-->line:85] - ERROR: 用例--【提现金额-大于50万】---执行失败
2021-01-07 20:33:54,516 - [test_04withdraw.py-->line:86] - ERROR: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_04withdraw.py", line 78, in test_withdraw
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于5000000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于5000000
? ^                    +

2021-01-07 20:33:54,673 - [test_04withdraw.py-->line:89] - INFO: 用例--【提现金额-非数字】---执行通过
2021-01-07 20:33:54,955 - [test_05add.py-->line:65] - INFO: 用例--【加标成功】---执行成功
2021-01-07 20:33:55,172 - [test_05add.py-->line:65] - INFO: 用例--【加标失败—借款人id为空】---执行成功
2021-01-07 20:33:55,380 - [test_05add.py-->line:65] - INFO: 用例--【加标失败—标题为空】---执行成功
2021-01-07 20:33:55,558 - [test_05add.py-->line:65] - INFO: 用例--【加标失败—借款金额为空】---执行成功
2021-01-07 20:33:55,745 - [test_05add.py-->line:65] - INFO: 用例--【加标失败—年利率为空】---执行成功
2021-01-07 20:33:55,959 - [test_05add.py-->line:65] - INFO: 用例--【加标失败—借款期限为空】---执行成功
2021-01-07 20:33:56,172 - [test_05add.py-->line:65] - INFO: 用例--【加标失败—借款期限类型为空】---执行成功
2021-01-07 20:33:56,376 - [test_05add.py-->line:65] - INFO: 用例--【加标失败—竞标天数为空】---执行成功
2021-01-07 20:33:56,580 - [test_05add.py-->line:65] - INFO: 用例--【加标失败—借款人id不是当前登录用户】---执行成功
2021-01-07 20:33:56,762 - [test_05add.py-->line:65] - INFO: 用例--【加标失败—借款金额为负数】---执行成功
2021-01-07 20:33:56,956 - [test_05add.py-->line:65] - INFO: 用例--【加标失败—借款金额为小数】---执行成功
2021-01-07 20:33:57,263 - [test_06audit.py-->line:80] - INFO: 用例--【审核通过】---执行通过
2021-01-07 20:33:57,427 - [test_06audit.py-->line:80] - INFO: 用例--【审核不通过】---执行通过
2021-01-07 20:33:57,549 - [test_06audit.py-->line:80] - INFO: 用例--【项目不待审核状态】---执行通过
2021-01-07 20:33:57,675 - [test_06audit.py-->line:80] - INFO: 用例--【参数approved_or_not为空】---执行通过
2021-01-07 20:33:57,787 - [test_06audit.py-->line:80] - INFO: 用例--【项目id为空】---执行通过
2021-01-07 20:33:57,887 - [test_06audit.py-->line:80] - INFO: 用例--【项目id不存在】---执行通过
2021-01-07 20:33:58,427 - [test_07invest.py-->line:123] - INFO: 用例--【投资人正常投资】---执行成功
2021-01-07 20:33:58,491 - [test_07invest.py-->line:123] - INFO: 用例--【投资人id为空】---执行成功
2021-01-07 20:33:58,544 - [test_07invest.py-->line:123] - INFO: 用例--【标id为空】---执行成功
2021-01-07 20:33:58,601 - [test_07invest.py-->line:119] - ERROR: 用例--【投资金额为空】---执行失败
2021-01-07 20:33:58,602 - [test_07invest.py-->line:120] - ERROR: '金额为空' not found in '余额为空'
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_07invest.py", line 108, in test_invest
    self.assertIn(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额为空' not found in '余额为空'
2021-01-07 20:33:58,667 - [test_07invest.py-->line:119] - ERROR: 用例--【投资金额为非100的整数倍】---执行失败
2021-01-07 20:33:58,668 - [test_07invest.py-->line:120] - ERROR: '投资金额必须大于100，并且可以被100整除' not found in '充值金额必须大于100，并且可以被100整除'
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_07invest.py", line 108, in test_invest
    self.assertIn(expected['msg'], res['msg'])
  File "C:\python37\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '投资金额必须大于100，并且可以被100整除' not found in '充值金额必须大于100，并且可以被100整除'
2021-01-07 20:33:58,734 - [test_07invest.py-->line:123] - INFO: 用例--【投资金额大于可投余额】---执行成功
2021-01-07 20:47:44,683 - [test_01register.py-->line:75] - INFO: 用例--【注册成功-带注册名】---执行通过
2021-01-07 20:47:44,823 - [test_01register.py-->line:75] - INFO: 用例--【成功-不带用户名】---执行通过
2021-01-07 20:47:44,938 - [test_01register.py-->line:75] - INFO: 用例--【不输入手机号】---执行通过
2021-01-07 20:47:45,062 - [test_01register.py-->line:75] - INFO: 用例--【手机号长度10位】---执行通过
2021-01-07 20:47:45,171 - [test_01register.py-->line:75] - INFO: 用例--【手机号长度12位】---执行通过
2021-01-07 20:47:45,284 - [test_01register.py-->line:75] - INFO: 用例--【手机号含有非法字符】---执行通过
2021-01-07 20:47:45,430 - [test_01register.py-->line:75] - INFO: 用例--【已注册过的手机号】---执行通过
2021-01-07 20:47:45,556 - [test_01register.py-->line:75] - INFO: 用例--【密码7位】---执行通过
2021-01-07 20:47:45,684 - [test_01register.py-->line:75] - INFO: 用例--【密码17位】---执行通过
2021-01-07 20:47:45,799 - [test_01register.py-->line:75] - INFO: 用例--【不输入密码】---执行通过
2021-01-07 20:47:45,936 - [test_01register.py-->line:75] - INFO: 用例--【注册名11位】---执行通过
2021-01-07 20:47:46,053 - [test_01register.py-->line:75] - INFO: 用例--【类型输入非0，1内容】---执行通过
2021-01-07 20:47:46,194 - [test_01register.py-->line:75] - INFO: 用例--【不输入类型】---执行通过
2021-01-07 20:47:46,259 - [test_02login.py-->line:56] - INFO: 用例--【登录成功】---执行通过
2021-01-07 20:47:46,317 - [test_02login.py-->line:56] - INFO: 用例--【手机号为空】---执行通过
2021-01-07 20:47:46,371 - [test_02login.py-->line:56] - INFO: 用例--【密码为空】---执行通过
2021-01-07 20:47:46,440 - [test_02login.py-->line:56] - INFO: 用例--【手机号未注册】---执行通过
2021-01-07 20:47:46,517 - [test_02login.py-->line:56] - INFO: 用例--【密码错误】---执行通过
2021-01-07 20:47:46,572 - [test_02login.py-->line:56] - INFO: 用例--【手机号格式错误】---执行通过
2021-01-07 20:47:46,812 - [test_03recharge.py-->line:91] - ERROR: 用例--【充值成功-整数】---执行失败
2021-01-07 20:47:46,813 - [test_03recharge.py-->line:92] - ERROR: 0 != 1003
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_03recharge.py", line 80, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 0 != 1003
2021-01-07 20:47:47,001 - [test_03recharge.py-->line:91] - ERROR: 用例--【充值成功-1位小数】---执行失败
2021-01-07 20:47:47,002 - [test_03recharge.py-->line:92] - ERROR: 0 != 1003
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_03recharge.py", line 80, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 0 != 1003
2021-01-07 20:47:47,194 - [test_03recharge.py-->line:91] - ERROR: 用例--【充值成功-2位小数】---执行失败
2021-01-07 20:47:47,195 - [test_03recharge.py-->line:92] - ERROR: 0 != 1003
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_03recharge.py", line 80, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 0 != 1003
2021-01-07 20:47:47,384 - [test_03recharge.py-->line:91] - ERROR: 用例--【充值成功-50万】---执行失败
2021-01-07 20:47:47,384 - [test_03recharge.py-->line:92] - ERROR: 0 != 1003
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_03recharge.py", line 80, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 0 != 1003
2021-01-07 20:47:47,583 - [test_03recharge.py-->line:91] - ERROR: 用例--【会员id为空】---执行失败
2021-01-07 20:47:47,583 - [test_03recharge.py-->line:92] - ERROR: 1 != 1003
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_03recharge.py", line 80, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 1003
2021-01-07 20:47:47,769 - [test_03recharge.py-->line:91] - ERROR: 用例--【会员id为小数】---执行失败
2021-01-07 20:47:47,771 - [test_03recharge.py-->line:92] - ERROR: 2 != 1003
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_03recharge.py", line 80, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 1003
2021-01-07 20:47:47,949 - [test_03recharge.py-->line:91] - ERROR: 用例--【充值金额为0】---执行失败
2021-01-07 20:47:47,949 - [test_03recharge.py-->line:92] - ERROR: 2 != 1003
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_03recharge.py", line 80, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 1003
2021-01-07 20:47:48,124 - [test_03recharge.py-->line:91] - ERROR: 用例--【充值金额为负数】---执行失败
2021-01-07 20:47:48,125 - [test_03recharge.py-->line:92] - ERROR: 2 != 1003
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_03recharge.py", line 80, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 1003
2021-01-07 20:47:48,299 - [test_03recharge.py-->line:91] - ERROR: 用例--【充值金额为空】---执行失败
2021-01-07 20:47:48,299 - [test_03recharge.py-->line:92] - ERROR: 1 != 1003
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_03recharge.py", line 80, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 1003
2021-01-07 20:47:48,473 - [test_03recharge.py-->line:91] - ERROR: 用例--【充值金额-3位小数】---执行失败
2021-01-07 20:47:48,473 - [test_03recharge.py-->line:92] - ERROR: 2 != 1003
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_03recharge.py", line 80, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 1003
2021-01-07 20:47:48,657 - [test_03recharge.py-->line:91] - ERROR: 用例--【充值金额-大于50万】---执行失败
2021-01-07 20:47:48,658 - [test_03recharge.py-->line:92] - ERROR: 2 != 1003
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_03recharge.py", line 80, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 1003
2021-01-07 20:47:48,823 - [test_03recharge.py-->line:91] - ERROR: 用例--【充值金额-非数字】---执行失败
2021-01-07 20:47:48,824 - [test_03recharge.py-->line:92] - ERROR: 2 != 1003
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_03recharge.py", line 80, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 1003
2021-01-07 20:47:49,094 - [test_04withdraw.py-->line:85] - ERROR: 用例--【提现成功-整数】---执行失败
2021-01-07 20:47:49,094 - [test_04withdraw.py-->line:86] - ERROR: 0 != 1003
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_04withdraw.py", line 77, in test_withdraw
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 0 != 1003
2021-01-07 20:47:49,309 - [test_04withdraw.py-->line:85] - ERROR: 用例--【提现成功-1位小数】---执行失败
2021-01-07 20:47:49,309 - [test_04withdraw.py-->line:86] - ERROR: 0 != 1003
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_04withdraw.py", line 77, in test_withdraw
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 0 != 1003
2021-01-07 20:47:49,519 - [test_04withdraw.py-->line:85] - ERROR: 用例--【提现成功-2位小数】---执行失败
2021-01-07 20:47:49,519 - [test_04withdraw.py-->line:86] - ERROR: 0 != 1003
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_04withdraw.py", line 77, in test_withdraw
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 0 != 1003
2021-01-07 20:47:49,739 - [test_04withdraw.py-->line:85] - ERROR: 用例--【提现成功-50万】---执行失败
2021-01-07 20:47:49,739 - [test_04withdraw.py-->line:86] - ERROR: 0 != 1003
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_04withdraw.py", line 77, in test_withdraw
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 0 != 1003
2021-01-07 20:47:49,933 - [test_04withdraw.py-->line:85] - ERROR: 用例--【会员id为空】---执行失败
2021-01-07 20:47:49,933 - [test_04withdraw.py-->line:86] - ERROR: 1 != 1003
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_04withdraw.py", line 77, in test_withdraw
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 1003
2021-01-07 20:47:50,125 - [test_04withdraw.py-->line:85] - ERROR: 用例--【会员id为小数】---执行失败
2021-01-07 20:47:50,125 - [test_04withdraw.py-->line:86] - ERROR: 2 != 1003
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_04withdraw.py", line 77, in test_withdraw
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 1003
2021-01-07 20:47:50,344 - [test_04withdraw.py-->line:85] - ERROR: 用例--【提现金额为0】---执行失败
2021-01-07 20:47:50,345 - [test_04withdraw.py-->line:86] - ERROR: 2 != 1003
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_04withdraw.py", line 77, in test_withdraw
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 1003
2021-01-07 20:47:50,551 - [test_04withdraw.py-->line:85] - ERROR: 用例--【提现金额为负数】---执行失败
2021-01-07 20:47:50,552 - [test_04withdraw.py-->line:86] - ERROR: 2 != 1003
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_04withdraw.py", line 77, in test_withdraw
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 1003
2021-01-07 20:47:50,751 - [test_04withdraw.py-->line:85] - ERROR: 用例--【提现金额为空】---执行失败
2021-01-07 20:47:50,751 - [test_04withdraw.py-->line:86] - ERROR: 1 != 1003
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_04withdraw.py", line 77, in test_withdraw
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 1003
2021-01-07 20:47:50,951 - [test_04withdraw.py-->line:85] - ERROR: 用例--【提现金额-3位小数】---执行失败
2021-01-07 20:47:50,952 - [test_04withdraw.py-->line:86] - ERROR: 2 != 1003
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_04withdraw.py", line 77, in test_withdraw
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 1003
2021-01-07 20:47:51,147 - [test_04withdraw.py-->line:85] - ERROR: 用例--【提现金额-大于50万】---执行失败
2021-01-07 20:47:51,147 - [test_04withdraw.py-->line:86] - ERROR: 2 != 1003
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_04withdraw.py", line 77, in test_withdraw
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 1003
2021-01-07 20:47:51,361 - [test_04withdraw.py-->line:85] - ERROR: 用例--【提现金额-非数字】---执行失败
2021-01-07 20:47:51,361 - [test_04withdraw.py-->line:86] - ERROR: 2 != 1003
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_04withdraw.py", line 77, in test_withdraw
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 1003
2021-01-07 20:47:51,648 - [test_05add.py-->line:61] - ERROR: 用例--【加标成功】---执行失败
2021-01-07 20:47:51,649 - [test_05add.py-->line:62] - ERROR: 0 != 1003
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_05add.py", line 53, in test_add
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 0 != 1003
2021-01-07 20:47:51,898 - [test_05add.py-->line:61] - ERROR: 用例--【加标失败—借款人id为空】---执行失败
2021-01-07 20:47:51,898 - [test_05add.py-->line:62] - ERROR: 1 != 1003
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_05add.py", line 53, in test_add
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 1003
2021-01-07 20:47:52,126 - [test_05add.py-->line:61] - ERROR: 用例--【加标失败—标题为空】---执行失败
2021-01-07 20:47:52,127 - [test_05add.py-->line:62] - ERROR: 1 != 1003
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_05add.py", line 53, in test_add
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 1003
2021-01-07 20:47:52,359 - [test_05add.py-->line:61] - ERROR: 用例--【加标失败—借款金额为空】---执行失败
2021-01-07 20:47:52,359 - [test_05add.py-->line:62] - ERROR: 1 != 1003
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_05add.py", line 53, in test_add
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 1003
2021-01-07 20:47:52,596 - [test_05add.py-->line:61] - ERROR: 用例--【加标失败—年利率为空】---执行失败
2021-01-07 20:47:52,596 - [test_05add.py-->line:62] - ERROR: 1 != 1003
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_05add.py", line 53, in test_add
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 1003
2021-01-07 20:47:52,791 - [test_05add.py-->line:61] - ERROR: 用例--【加标失败—借款期限为空】---执行失败
2021-01-07 20:47:52,791 - [test_05add.py-->line:62] - ERROR: 1 != 1003
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_05add.py", line 53, in test_add
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 1003
2021-01-07 20:47:52,991 - [test_05add.py-->line:61] - ERROR: 用例--【加标失败—借款期限类型为空】---执行失败
2021-01-07 20:47:52,993 - [test_05add.py-->line:62] - ERROR: 1 != 1003
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_05add.py", line 53, in test_add
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 1003
2021-01-07 20:47:53,206 - [test_05add.py-->line:61] - ERROR: 用例--【加标失败—竞标天数为空】---执行失败
2021-01-07 20:47:53,207 - [test_05add.py-->line:62] - ERROR: 1 != 1003
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_05add.py", line 53, in test_add
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 1003
2021-01-07 20:47:53,406 - [test_05add.py-->line:61] - ERROR: 用例--【加标失败—借款人id不是当前登录用户】---执行失败
2021-01-07 20:47:53,406 - [test_05add.py-->line:62] - ERROR: 1007 != 1003
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_05add.py", line 53, in test_add
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1007 != 1003
2021-01-07 20:47:53,625 - [test_05add.py-->line:61] - ERROR: 用例--【加标失败—借款金额为负数】---执行失败
2021-01-07 20:47:53,625 - [test_05add.py-->line:62] - ERROR: 2 != 1003
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_05add.py", line 53, in test_add
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 1003
2021-01-07 20:47:53,845 - [test_05add.py-->line:61] - ERROR: 用例--【加标失败—借款金额为小数】---执行失败
2021-01-07 20:47:53,846 - [test_05add.py-->line:62] - ERROR: 2 != 1003
Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_05add.py", line 53, in test_add
    self.assertEqual(expected['code'], res['code'])
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 1003
2021-01-07 21:08:03,965 - [test_03recharge.py-->line:93] - ERROR: 用例--【充值成功-整数】---执行失败
2021-01-07 21:08:03,965 - [test_03recharge.py-->line:94] - ERROR:  :: 0 != 1003
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 0 != 1003

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_03recharge.py", line 82, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 0 != 1003
2021-01-07 21:08:04,336 - [test_03recharge.py-->line:93] - ERROR: 用例--【充值成功-1位小数】---执行失败
2021-01-07 21:08:04,336 - [test_03recharge.py-->line:94] - ERROR:  :: 0 != 1003
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 0 != 1003

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_03recharge.py", line 82, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 0 != 1003
2021-01-07 21:08:04,584 - [test_03recharge.py-->line:93] - ERROR: 用例--【充值成功-2位小数】---执行失败
2021-01-07 21:08:04,585 - [test_03recharge.py-->line:94] - ERROR:  :: 0 != 1003
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 0 != 1003

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_03recharge.py", line 82, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 0 != 1003
2021-01-07 21:08:04,868 - [test_03recharge.py-->line:93] - ERROR: 用例--【充值成功-50万】---执行失败
2021-01-07 21:08:04,868 - [test_03recharge.py-->line:94] - ERROR:  :: 0 != 1003
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 0 != 1003

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_03recharge.py", line 82, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 0 != 1003
2021-01-07 21:08:05,130 - [test_03recharge.py-->line:93] - ERROR: 用例--【会员id为空】---执行失败
2021-01-07 21:08:05,131 - [test_03recharge.py-->line:94] - ERROR:  :: 1 != 1003
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 1003

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_03recharge.py", line 82, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 1 != 1003
2021-01-07 21:08:05,394 - [test_03recharge.py-->line:93] - ERROR: 用例--【会员id为小数】---执行失败
2021-01-07 21:08:05,394 - [test_03recharge.py-->line:94] - ERROR:  :: 2 != 1003
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 1003

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_03recharge.py", line 82, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 2 != 1003
2021-01-07 21:08:05,671 - [test_03recharge.py-->line:93] - ERROR: 用例--【充值金额为0】---执行失败
2021-01-07 21:08:05,672 - [test_03recharge.py-->line:94] - ERROR:  :: 2 != 1003
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 1003

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_03recharge.py", line 82, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 2 != 1003
2021-01-07 21:08:05,931 - [test_03recharge.py-->line:93] - ERROR: 用例--【充值金额为负数】---执行失败
2021-01-07 21:08:05,932 - [test_03recharge.py-->line:94] - ERROR:  :: 2 != 1003
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 1003

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_03recharge.py", line 82, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 2 != 1003
2021-01-07 21:08:06,214 - [test_03recharge.py-->line:93] - ERROR: 用例--【充值金额为空】---执行失败
2021-01-07 21:08:06,214 - [test_03recharge.py-->line:94] - ERROR:  :: 1 != 1003
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 1003

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_03recharge.py", line 82, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 1 != 1003
2021-01-07 21:08:06,464 - [test_03recharge.py-->line:93] - ERROR: 用例--【充值金额-3位小数】---执行失败
2021-01-07 21:08:06,466 - [test_03recharge.py-->line:94] - ERROR:  :: 2 != 1003
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 1003

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_03recharge.py", line 82, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 2 != 1003
2021-01-07 21:08:06,718 - [test_03recharge.py-->line:93] - ERROR: 用例--【充值金额-大于50万】---执行失败
2021-01-07 21:08:06,719 - [test_03recharge.py-->line:94] - ERROR:  :: 2 != 1003
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 1003

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_03recharge.py", line 82, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 2 != 1003
2021-01-07 21:08:07,015 - [test_03recharge.py-->line:93] - ERROR: 用例--【充值金额-非数字】---执行失败
2021-01-07 21:08:07,016 - [test_03recharge.py-->line:94] - ERROR:  :: 2 != 1003
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 1003

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_03recharge.py", line 82, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 2 != 1003
2021-01-07 21:09:16,096 - [test_03recharge.py-->line:99] - INFO: 用例--【充值成功-整数】---执行通过
2021-01-07 21:09:16,287 - [test_03recharge.py-->line:99] - INFO: 用例--【充值成功-1位小数】---执行通过
2021-01-07 21:09:16,472 - [test_03recharge.py-->line:99] - INFO: 用例--【充值成功-2位小数】---执行通过
2021-01-07 21:09:16,632 - [test_03recharge.py-->line:99] - INFO: 用例--【充值成功-50万】---执行通过
2021-01-07 21:09:16,783 - [test_03recharge.py-->line:99] - INFO: 用例--【会员id为空】---执行通过
2021-01-07 21:09:16,947 - [test_03recharge.py-->line:99] - INFO: 用例--【会员id为小数】---执行通过
2021-01-07 21:09:17,096 - [test_03recharge.py-->line:95] - ERROR: 用例--【充值金额为0】---执行失败
2021-01-07 21:09:17,096 - [test_03recharge.py-->line:96] - ERROR:  :: 2 != 0
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 0

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_03recharge.py", line 84, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 2 != 0
2021-01-07 21:09:17,424 - [test_03recharge.py-->line:95] - ERROR: 用例--【充值金额为负数】---执行失败
2021-01-07 21:09:17,426 - [test_03recharge.py-->line:96] - ERROR:  :: 金额必须大于0并且小于或者等于500000 != 余额必须大于0并且小于或者等于500000
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_03recharge.py", line 85, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 金额必须大于0并且小于或者等于500000 != 余额必须大于0并且小于或者等于500000
2021-01-07 21:09:17,676 - [test_03recharge.py-->line:95] - ERROR: 用例--【充值金额为空】---执行失败
2021-01-07 21:09:17,677 - [test_03recharge.py-->line:96] - ERROR:  :: 1 != 2
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 2

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_03recharge.py", line 84, in test_recharge
    self.assertEqual(expected['code'], res['code'])
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 1 != 2
2021-01-07 21:09:17,958 - [test_03recharge.py-->line:95] - ERROR: 用例--【充值金额-3位小数】---执行失败
2021-01-07 21:09:17,960 - [test_03recharge.py-->line:96] - ERROR:  :: 金额小数超过两位 != 余额小数超过两位
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额小数超过两位' != '余额小数超过两位'
- 金额小数超过两位
? ^
+ 余额小数超过两位
? ^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_03recharge.py", line 85, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 金额小数超过两位 != 余额小数超过两位
2021-01-07 21:09:18,210 - [test_03recharge.py-->line:95] - ERROR: 用例--【充值金额-大于50万】---执行失败
2021-01-07 21:09:18,211 - [test_03recharge.py-->line:96] - ERROR:  :: 金额必须大于0并且小于或者等于500000 != 余额必须大于0并且小于或者等于500000
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\python37\lib\unittest\case.py", line 1220, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\python37\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '金额必须大于0并且小于或者等于500000' != '余额必须大于0并且小于或者等于500000'
- 金额必须大于0并且小于或者等于500000
? ^
+ 余额必须大于0并且小于或者等于500000
? ^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\project\python_35\py35_28day_apiV3\testcases\test_03recharge.py", line 85, in test_recharge
    self.assertEqual(expected['msg'], res['msg'])
  File "C:\Program Files\JetBrains\PyCharm 2019.1.1\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 金额必须大于0并且小于或者等于500000 != 余额必须大于0并且小于或者等于500000
2021-01-07 21:09:18,434 - [test_03recharge.py-->line:99] - INFO: 用例--【充值金额-非数字】---执行通过
2021-01-09 22:58:49,936 - [test_01register.py-->line:75] - INFO: 用例--【注册成功-带注册名】---执行通过
2021-01-09 22:58:50,144 - [test_01register.py-->line:75] - INFO: 用例--【成功-不带用户名】---执行通过
2021-01-09 22:58:50,319 - [test_01register.py-->line:75] - INFO: 用例--【不输入手机号】---执行通过
2021-01-09 22:58:50,492 - [test_01register.py-->line:75] - INFO: 用例--【手机号长度10位】---执行通过
2021-01-09 22:58:50,668 - [test_01register.py-->line:75] - INFO: 用例--【手机号长度12位】---执行通过
2021-01-09 22:58:50,848 - [test_01register.py-->line:75] - INFO: 用例--【手机号含有非法字符】---执行通过
2021-01-09 22:58:51,063 - [test_01register.py-->line:75] - INFO: 用例--【已注册过的手机号】---执行通过
2021-01-09 22:58:51,240 - [test_01register.py-->line:75] - INFO: 用例--【密码7位】---执行通过
2021-01-09 22:58:51,414 - [test_01register.py-->line:75] - INFO: 用例--【密码17位】---执行通过
2021-01-09 22:58:51,596 - [test_01register.py-->line:75] - INFO: 用例--【不输入密码】---执行通过
2021-01-09 22:58:51,772 - [test_01register.py-->line:75] - INFO: 用例--【注册名11位】---执行通过
2021-01-09 22:58:51,959 - [test_01register.py-->line:75] - INFO: 用例--【类型输入非0，1内容】---执行通过
2021-01-09 22:58:52,159 - [test_01register.py-->line:75] - INFO: 用例--【不输入类型】---执行通过
2021-01-09 22:58:52,288 - [test_02login.py-->line:56] - INFO: 用例--【登录成功】---执行通过
2021-01-09 22:58:52,374 - [test_02login.py-->line:56] - INFO: 用例--【手机号为空】---执行通过
2021-01-09 22:58:52,453 - [test_02login.py-->line:56] - INFO: 用例--【密码为空】---执行通过
2021-01-09 22:58:52,558 - [test_02login.py-->line:56] - INFO: 用例--【手机号未注册】---执行通过
2021-01-09 22:58:52,663 - [test_02login.py-->line:56] - INFO: 用例--【密码错误】---执行通过
2021-01-09 22:58:52,746 - [test_02login.py-->line:56] - INFO: 用例--【手机号格式错误】---执行通过
2021-01-09 23:00:44,414 - [test_01register.py-->line:75] - INFO: 用例--【注册成功-带注册名】---执行通过
2021-01-09 23:00:44,609 - [test_01register.py-->line:75] - INFO: 用例--【成功-不带用户名】---执行通过
2021-01-09 23:00:44,789 - [test_01register.py-->line:75] - INFO: 用例--【不输入手机号】---执行通过
2021-01-09 23:00:44,985 - [test_01register.py-->line:75] - INFO: 用例--【手机号长度10位】---执行通过
2021-01-09 23:00:45,157 - [test_01register.py-->line:75] - INFO: 用例--【手机号长度12位】---执行通过
2021-01-09 23:00:45,330 - [test_01register.py-->line:75] - INFO: 用例--【手机号含有非法字符】---执行通过
2021-01-09 23:00:45,520 - [test_01register.py-->line:75] - INFO: 用例--【已注册过的手机号】---执行通过
2021-01-09 23:00:45,703 - [test_01register.py-->line:75] - INFO: 用例--【密码7位】---执行通过
2021-01-09 23:00:45,870 - [test_01register.py-->line:75] - INFO: 用例--【密码17位】---执行通过
2021-01-09 23:00:46,043 - [test_01register.py-->line:75] - INFO: 用例--【不输入密码】---执行通过
2021-01-09 23:00:46,218 - [test_01register.py-->line:75] - INFO: 用例--【注册名11位】---执行通过
2021-01-09 23:00:46,402 - [test_01register.py-->line:75] - INFO: 用例--【类型输入非0，1内容】---执行通过
2021-01-09 23:00:46,617 - [test_01register.py-->line:75] - INFO: 用例--【不输入类型】---执行通过
2021-01-09 23:00:46,740 - [test_02login.py-->line:56] - INFO: 用例--【登录成功】---执行通过
2021-01-09 23:00:46,823 - [test_02login.py-->line:56] - INFO: 用例--【手机号为空】---执行通过
2021-01-09 23:00:46,907 - [test_02login.py-->line:56] - INFO: 用例--【密码为空】---执行通过
2021-01-09 23:00:47,010 - [test_02login.py-->line:56] - INFO: 用例--【手机号未注册】---执行通过
2021-01-09 23:00:47,113 - [test_02login.py-->line:56] - INFO: 用例--【密码错误】---执行通过
2021-01-09 23:00:47,193 - [test_02login.py-->line:56] - INFO: 用例--【手机号格式错误】---执行通过
2021-01-09 23:00:47,762 - [test_05add.py-->line:61] - ERROR: 用例--【加标成功】---执行失败
2021-01-09 23:00:47,762 - [test_05add.py-->line:62] - ERROR: 0 != 1003
Traceback (most recent call last):
  File "F:\86-code\mushen\py35_28day_apiV3\testcases\test_05add.py", line 53, in test_add
    self.assertEqual(expected['code'], res['code'])
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 0 != 1003
2021-01-09 23:00:48,130 - [test_05add.py-->line:61] - ERROR: 用例--【加标失败—借款人id为空】---执行失败
2021-01-09 23:00:48,130 - [test_05add.py-->line:62] - ERROR: 1 != 1003
Traceback (most recent call last):
  File "F:\86-code\mushen\py35_28day_apiV3\testcases\test_05add.py", line 53, in test_add
    self.assertEqual(expected['code'], res['code'])
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 1003
2021-01-09 23:00:48,498 - [test_05add.py-->line:61] - ERROR: 用例--【加标失败—标题为空】---执行失败
2021-01-09 23:00:48,498 - [test_05add.py-->line:62] - ERROR: 1 != 1003
Traceback (most recent call last):
  File "F:\86-code\mushen\py35_28day_apiV3\testcases\test_05add.py", line 53, in test_add
    self.assertEqual(expected['code'], res['code'])
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 1003
2021-01-09 23:00:48,812 - [test_05add.py-->line:61] - ERROR: 用例--【加标失败—借款金额为空】---执行失败
2021-01-09 23:00:48,813 - [test_05add.py-->line:62] - ERROR: 1 != 1003
Traceback (most recent call last):
  File "F:\86-code\mushen\py35_28day_apiV3\testcases\test_05add.py", line 53, in test_add
    self.assertEqual(expected['code'], res['code'])
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 1003
2021-01-09 23:00:49,114 - [test_05add.py-->line:61] - ERROR: 用例--【加标失败—年利率为空】---执行失败
2021-01-09 23:00:49,114 - [test_05add.py-->line:62] - ERROR: 1 != 1003
Traceback (most recent call last):
  File "F:\86-code\mushen\py35_28day_apiV3\testcases\test_05add.py", line 53, in test_add
    self.assertEqual(expected['code'], res['code'])
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 1003
2021-01-09 23:00:49,436 - [test_05add.py-->line:61] - ERROR: 用例--【加标失败—借款期限为空】---执行失败
2021-01-09 23:00:49,436 - [test_05add.py-->line:62] - ERROR: 1 != 1003
Traceback (most recent call last):
  File "F:\86-code\mushen\py35_28day_apiV3\testcases\test_05add.py", line 53, in test_add
    self.assertEqual(expected['code'], res['code'])
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 1003
2021-01-09 23:00:49,741 - [test_05add.py-->line:61] - ERROR: 用例--【加标失败—借款期限类型为空】---执行失败
2021-01-09 23:00:49,741 - [test_05add.py-->line:62] - ERROR: 1 != 1003
Traceback (most recent call last):
  File "F:\86-code\mushen\py35_28day_apiV3\testcases\test_05add.py", line 53, in test_add
    self.assertEqual(expected['code'], res['code'])
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 1003
2021-01-09 23:00:50,033 - [test_05add.py-->line:61] - ERROR: 用例--【加标失败—竞标天数为空】---执行失败
2021-01-09 23:00:50,033 - [test_05add.py-->line:62] - ERROR: 1 != 1003
Traceback (most recent call last):
  File "F:\86-code\mushen\py35_28day_apiV3\testcases\test_05add.py", line 53, in test_add
    self.assertEqual(expected['code'], res['code'])
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 1003
2021-01-09 23:00:50,339 - [test_05add.py-->line:61] - ERROR: 用例--【加标失败—借款人id不是当前登录用户】---执行失败
2021-01-09 23:00:50,339 - [test_05add.py-->line:62] - ERROR: 1007 != 1003
Traceback (most recent call last):
  File "F:\86-code\mushen\py35_28day_apiV3\testcases\test_05add.py", line 53, in test_add
    self.assertEqual(expected['code'], res['code'])
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1007 != 1003
2021-01-09 23:00:50,636 - [test_05add.py-->line:61] - ERROR: 用例--【加标失败—借款金额为负数】---执行失败
2021-01-09 23:00:50,636 - [test_05add.py-->line:62] - ERROR: 2 != 1003
Traceback (most recent call last):
  File "F:\86-code\mushen\py35_28day_apiV3\testcases\test_05add.py", line 53, in test_add
    self.assertEqual(expected['code'], res['code'])
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 1003
2021-01-09 23:00:50,937 - [test_05add.py-->line:61] - ERROR: 用例--【加标失败—借款金额为小数】---执行失败
2021-01-09 23:00:50,937 - [test_05add.py-->line:62] - ERROR: 2 != 1003
Traceback (most recent call last):
  File "F:\86-code\mushen\py35_28day_apiV3\testcases\test_05add.py", line 53, in test_add
    self.assertEqual(expected['code'], res['code'])
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 1003
2021-01-17 22:16:59,963 - [test_01register.py-->line:75] - INFO: 用例--【注册成功-带注册名】---执行通过
2021-01-17 22:17:00,260 - [test_01register.py-->line:75] - INFO: 用例--【成功-不带用户名】---执行通过
2021-01-17 22:17:00,479 - [test_01register.py-->line:75] - INFO: 用例--【不输入手机号】---执行通过
2021-01-17 22:17:00,697 - [test_01register.py-->line:75] - INFO: 用例--【手机号长度10位】---执行通过
2021-01-17 22:17:00,932 - [test_01register.py-->line:75] - INFO: 用例--【手机号长度12位】---执行通过
2021-01-17 22:17:01,135 - [test_01register.py-->line:75] - INFO: 用例--【手机号含有非法字符】---执行通过
2021-01-17 22:17:01,447 - [test_01register.py-->line:75] - INFO: 用例--【已注册过的手机号】---执行通过
2021-01-17 22:17:01,697 - [test_01register.py-->line:75] - INFO: 用例--【密码7位】---执行通过
2021-01-17 22:17:01,916 - [test_01register.py-->line:75] - INFO: 用例--【密码17位】---执行通过
2021-01-17 22:17:02,166 - [test_01register.py-->line:75] - INFO: 用例--【不输入密码】---执行通过
2021-01-17 22:17:02,416 - [test_01register.py-->line:75] - INFO: 用例--【注册名11位】---执行通过
2021-01-17 22:17:02,634 - [test_01register.py-->line:75] - INFO: 用例--【类型输入非0，1内容】---执行通过
2021-01-17 22:17:02,947 - [test_01register.py-->line:75] - INFO: 用例--【不输入类型】---执行通过
2021-01-17 22:17:03,087 - [test_02login.py-->line:56] - INFO: 用例--【登录成功】---执行通过
2021-01-17 22:17:03,181 - [test_02login.py-->line:56] - INFO: 用例--【手机号为空】---执行通过
2021-01-17 22:17:03,259 - [test_02login.py-->line:56] - INFO: 用例--【密码为空】---执行通过
2021-01-17 22:17:03,400 - [test_02login.py-->line:56] - INFO: 用例--【手机号未注册】---执行通过
2021-01-17 22:17:03,558 - [test_02login.py-->line:56] - INFO: 用例--【密码错误】---执行通过
2021-01-17 22:17:03,620 - [test_02login.py-->line:56] - INFO: 用例--【手机号格式错误】---执行通过
2021-01-17 22:17:04,339 - [test_05add.py-->line:61] - ERROR: 用例--【加标成功】---执行失败
2021-01-17 22:17:04,339 - [test_05add.py-->line:62] - ERROR: 0 != 1003
Traceback (most recent call last):
  File "F:\86-code\suoguan\testcases\test_05add.py", line 53, in test_add
    self.assertEqual(expected['code'], res['code'])
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 0 != 1003
2021-01-17 22:17:04,682 - [test_05add.py-->line:61] - ERROR: 用例--【加标失败—借款人id为空】---执行失败
2021-01-17 22:17:04,682 - [test_05add.py-->line:62] - ERROR: 1 != 1003
Traceback (most recent call last):
  File "F:\86-code\suoguan\testcases\test_05add.py", line 53, in test_add
    self.assertEqual(expected['code'], res['code'])
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 1003
2021-01-17 22:17:04,994 - [test_05add.py-->line:61] - ERROR: 用例--【加标失败—标题为空】---执行失败
2021-01-17 22:17:04,994 - [test_05add.py-->line:62] - ERROR: 1 != 1003
Traceback (most recent call last):
  File "F:\86-code\suoguan\testcases\test_05add.py", line 53, in test_add
    self.assertEqual(expected['code'], res['code'])
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 1003
2021-01-17 22:17:05,291 - [test_05add.py-->line:61] - ERROR: 用例--【加标失败—借款金额为空】---执行失败
2021-01-17 22:17:05,291 - [test_05add.py-->line:62] - ERROR: 1 != 1003
Traceback (most recent call last):
  File "F:\86-code\suoguan\testcases\test_05add.py", line 53, in test_add
    self.assertEqual(expected['code'], res['code'])
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 1003
2021-01-17 22:17:05,604 - [test_05add.py-->line:61] - ERROR: 用例--【加标失败—年利率为空】---执行失败
2021-01-17 22:17:05,604 - [test_05add.py-->line:62] - ERROR: 1 != 1003
Traceback (most recent call last):
  File "F:\86-code\suoguan\testcases\test_05add.py", line 53, in test_add
    self.assertEqual(expected['code'], res['code'])
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 1003
2021-01-17 22:17:05,901 - [test_05add.py-->line:61] - ERROR: 用例--【加标失败—借款期限为空】---执行失败
2021-01-17 22:17:05,901 - [test_05add.py-->line:62] - ERROR: 1 != 1003
Traceback (most recent call last):
  File "F:\86-code\suoguan\testcases\test_05add.py", line 53, in test_add
    self.assertEqual(expected['code'], res['code'])
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 1003
2021-01-17 22:17:06,229 - [test_05add.py-->line:61] - ERROR: 用例--【加标失败—借款期限类型为空】---执行失败
2021-01-17 22:17:06,229 - [test_05add.py-->line:62] - ERROR: 1 != 1003
Traceback (most recent call last):
  File "F:\86-code\suoguan\testcases\test_05add.py", line 53, in test_add
    self.assertEqual(expected['code'], res['code'])
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 1003
2021-01-17 22:17:06,541 - [test_05add.py-->line:61] - ERROR: 用例--【加标失败—竞标天数为空】---执行失败
2021-01-17 22:17:06,541 - [test_05add.py-->line:62] - ERROR: 1 != 1003
Traceback (most recent call last):
  File "F:\86-code\suoguan\testcases\test_05add.py", line 53, in test_add
    self.assertEqual(expected['code'], res['code'])
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1 != 1003
2021-01-17 22:17:07,088 - [test_05add.py-->line:61] - ERROR: 用例--【加标失败—借款人id不是当前登录用户】---执行失败
2021-01-17 22:17:07,088 - [test_05add.py-->line:62] - ERROR: 1007 != 1003
Traceback (most recent call last):
  File "F:\86-code\suoguan\testcases\test_05add.py", line 53, in test_add
    self.assertEqual(expected['code'], res['code'])
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 1007 != 1003
2021-01-17 22:17:12,680 - [test_05add.py-->line:61] - ERROR: 用例--【加标失败—借款金额为负数】---执行失败
2021-01-17 22:17:12,680 - [test_05add.py-->line:62] - ERROR: 2 != 1003
Traceback (most recent call last):
  File "F:\86-code\suoguan\testcases\test_05add.py", line 53, in test_add
    self.assertEqual(expected['code'], res['code'])
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 1003
2021-01-17 22:17:15,557 - [test_05add.py-->line:61] - ERROR: 用例--【加标失败—借款金额为小数】---执行失败
2021-01-17 22:17:15,557 - [test_05add.py-->line:62] - ERROR: 2 != 1003
Traceback (most recent call last):
  File "F:\86-code\suoguan\testcases\test_05add.py", line 53, in test_add
    self.assertEqual(expected['code'], res['code'])
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 2 != 1003
2021-01-17 23:25:53,312 - [test_02login.py-->line:56] - INFO: 用例--【手机号为空】---执行通过
2021-01-17 23:25:53,412 - [test_02login.py-->line:56] - INFO: 用例--【密码为空】---执行通过
2021-01-17 23:25:53,574 - [test_02login.py-->line:56] - INFO: 用例--【手机号未注册】---执行通过
2021-01-17 23:25:53,712 - [test_02login.py-->line:56] - INFO: 用例--【密码错误】---执行通过
2021-01-17 23:25:53,806 - [test_02login.py-->line:56] - INFO: 用例--【手机号格式错误】---执行通过
2021-01-17 23:28:12,394 - [test_02login.py-->line:56] - INFO: 用例--【手机号为空】---执行通过
2021-01-17 23:28:12,510 - [test_02login.py-->line:56] - INFO: 用例--【密码为空】---执行通过
2021-01-17 23:28:12,594 - [test_02login.py-->line:56] - INFO: 用例--【手机号未注册】---执行通过
2021-01-17 23:28:12,668 - [test_02login.py-->line:56] - INFO: 用例--【密码错误】---执行通过
2021-01-17 23:28:12,747 - [test_02login.py-->line:56] - INFO: 用例--【手机号格式错误】---执行通过
2021-01-17 23:34:46,749 - [test_02login.py-->line:51] - ERROR: 用例--【正常登录】---执行失败
2021-01-17 23:34:46,749 - [test_02login.py-->line:52] - ERROR: {'code': 222, 'message': '操作成功。'} not in {'code': 1004, 'msg': 'No handler found for POST /futureloan/auth/login', 'data': None, 'copyright': 'Copyright 柠檬班 © 2017-2020 湖南省零檬信息技术有限公司 All Rights Reserved'}
Traceback (most recent call last):
  File "F:\86-code\suoguan\testcases\test_02login.py", line 48, in test_login
    self.assertDictIn(expected, res)
  File "F:\86-code\suoguan\testcases\test_02login.py", line 64, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 222, 'message': '操作成功。'} not in {'code': 1004, 'msg': 'No handler found for POST /futureloan/auth/login', 'data': None, 'copyright': 'Copyright 柠檬班 © 2017-2020 湖南省零檬信息技术有限公司 All Rights Reserved'}
2021-01-17 23:38:19,798 - [test_00one.py-->line:62] - ERROR: 用例--【正常登录】---执行失败
2021-01-17 23:38:19,798 - [test_00one.py-->line:65] - ERROR:  :: 222 != 0
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2020.3.1\plugins\python\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 222 != 0

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "F:\86-code\suoguan\testcases\test_00one.py", line 58, in test_register
    self.assertEqual(expected['code'], res['code'])
  File "C:\Program Files\JetBrains\PyCharm 2020.3.1\plugins\python\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 222 != 0
2021-01-17 23:38:19,898 - [test_00one.py-->line:62] - ERROR: 用例--【正常登录-2】---执行失败
2021-01-17 23:38:19,898 - [test_00one.py-->line:65] - ERROR:  :: 223 != 204
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2020.3.1\plugins\python\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 223 != 204

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "F:\86-code\suoguan\testcases\test_00one.py", line 58, in test_register
    self.assertEqual(expected['code'], res['code'])
  File "C:\Program Files\JetBrains\PyCharm 2020.3.1\plugins\python\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 223 != 204
2021-01-17 23:38:47,545 - [test_02login.py-->line:51] - ERROR: 用例--【正常登录】---执行失败
2021-01-17 23:38:47,545 - [test_02login.py-->line:52] - ERROR: {'code': 222, 'message': '操作成功。'} not in {'code': 1004, 'msg': 'No handler found for POST /futureloan/auth/login', 'data': None, 'copyright': 'Copyright 柠檬班 © 2017-2020 湖南省零檬信息技术有限公司 All Rights Reserved'}
Traceback (most recent call last):
  File "F:\86-code\suoguan\testcases\test_02login.py", line 48, in test_login
    self.assertDictIn(expected, res)
  File "F:\86-code\suoguan\testcases\test_02login.py", line 64, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 222, 'message': '操作成功。'} not in {'code': 1004, 'msg': 'No handler found for POST /futureloan/auth/login', 'data': None, 'copyright': 'Copyright 柠檬班 © 2017-2020 湖南省零檬信息技术有限公司 All Rights Reserved'}
2021-01-17 23:40:19,281 - [test_02login.py-->line:56] - INFO: 用例--【手机号为空】---执行通过
2021-01-17 23:40:19,365 - [test_02login.py-->line:56] - INFO: 用例--【密码为空】---执行通过
2021-01-17 23:40:19,550 - [test_02login.py-->line:56] - INFO: 用例--【手机号未注册】---执行通过
2021-01-17 23:40:19,735 - [test_02login.py-->line:56] - INFO: 用例--【密码错误】---执行通过
2021-01-17 23:40:19,798 - [test_02login.py-->line:56] - INFO: 用例--【手机号格式错误】---执行通过
2021-01-17 23:40:54,803 - [test_02login.py-->line:56] - INFO: 用例--【手机号为空】---执行通过
2021-01-17 23:40:54,887 - [test_02login.py-->line:56] - INFO: 用例--【密码为空】---执行通过
2021-01-17 23:40:54,972 - [test_02login.py-->line:56] - INFO: 用例--【手机号未注册】---执行通过
2021-01-17 23:40:55,056 - [test_02login.py-->line:56] - INFO: 用例--【密码错误】---执行通过
2021-01-17 23:40:55,134 - [test_02login.py-->line:56] - INFO: 用例--【手机号格式错误】---执行通过
2021-01-17 23:46:14,820 - [test_00one.py-->line:58] - ERROR: 用例--【登录】---执行失败
2021-01-17 23:46:14,820 - [test_00one.py-->line:61] - ERROR:  :: 0 != 1006
Traceback (most recent call last):
  File "C:\Program Files\JetBrains\PyCharm 2020.3.1\plugins\python\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\unittest\case.py", line 832, in _baseAssertEqual
    raise self.failureException(msg)
AssertionError: 0 != 1006

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "F:\86-code\suoguan\testcases\test_00one.py", line 54, in test_register
    self.assertEqual(expected['code'], res['code'])
  File "C:\Program Files\JetBrains\PyCharm 2020.3.1\plugins\python\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: 0 != 1006
2021-01-18 10:11:35,749 - [test_02NB_new_password.py-->line:71] - ERROR: 用例--【发送密码】---执行失败
2021-01-18 10:11:35,750 - [test_02NB_new_password.py-->line:74] - ERROR: {'code': 0, 'msg': 'OK'} not in {'code': 0, 'message': '操作成功。', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_02NB_new_password.py", line 67, in test_nb_new_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_02NB_new_password.py", line 86, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'msg': 'OK'} not in {'code': 0, 'message': '操作成功。', 'content': ''}
2021-01-18 10:16:42,576 - [test_02NB_new_password.py-->line:78] - INFO: 用例--【发送密码】---执行通过
2021-01-18 10:32:20,991 - [test_02NB_new_password.py-->line:78] - INFO: 用例--【发送密码】---执行通过
2021-01-18 10:32:53,212 - [test_02NB_new_password.py-->line:78] - INFO: 用例--【发送密码】---执行通过
2021-01-18 10:33:33,214 - [test_02NB_new_password.py-->line:78] - INFO: 用例--【发送密码】---执行通过
2021-01-20 10:19:28,262 - [test_02NB_new_password.py-->line:78] - INFO: 用例--【发送密码】---执行通过
2021-01-20 11:10:25,604 - [test_02NB_new_password.py-->line:78] - INFO: 用例--【发送密码】---执行通过
2021-01-20 11:12:40,948 - [test_02NB_new_password.py-->line:79] - INFO: 用例--【发送密码】---执行通过
2021-01-20 13:12:17,941 - [test_02NB_new_password.py-->line:79] - INFO: 用例--【发送密码】---执行通过
2021-01-20 13:15:33,862 - [test_02NB_new_password.py-->line:79] - INFO: 用例--【发送密码】---执行通过
2021-01-20 13:43:21,668 - [test_09NB_delete_all_authorizations.py-->line:80] - INFO: 用例--【发送密码】---执行通过
2021-01-20 13:44:47,366 - [test_02NB_new_password.py-->line:79] - INFO: 用例--【发送密码】---执行通过
2021-01-20 13:45:13,763 - [test_09NB_delete_all_authorizations.py-->line:80] - INFO: 用例--【发送密码】---执行通过
2021-01-20 13:50:07,334 - [test_09NB_delete_all_authorizations.py-->line:80] - INFO: 用例--【发送密码】---执行通过
2021-01-20 13:57:43,438 - [test_02NB_new_password.py-->line:79] - INFO: 用例--【NB授权-增长新增】---执行通过
2021-01-20 13:57:43,860 - [test_02NB_new_password.py-->line:79] - INFO: 用例--【NB授权-管理员新增-密码】---执行通过
2021-01-20 13:57:44,274 - [test_02NB_new_password.py-->line:79] - INFO: 用例--【NB授权-管理员新增-IC卡】---执行通过
2021-01-20 14:04:38,880 - [test_02NB_new_password.py-->line:79] - INFO: 用例--【NB授权-增长新增】---执行通过
2021-01-20 14:04:39,316 - [test_02NB_new_password.py-->line:79] - INFO: 用例--【NB授权-管理员新增-密码】---执行通过
2021-01-20 14:04:39,770 - [test_02NB_new_password.py-->line:79] - INFO: 用例--【NB授权-管理员新增-IC卡】---执行通过
2021-01-20 14:10:06,895 - [test_02NB_new_password.py-->line:79] - INFO: 用例--【NB授权-增长新增】---执行通过
2021-01-20 14:10:07,383 - [test_02NB_new_password.py-->line:79] - INFO: 用例--【NB授权-管理员新增-密码】---执行通过
2021-01-20 14:10:07,870 - [test_02NB_new_password.py-->line:79] - INFO: 用例--【NB授权-管理员新增-IC卡】---执行通过
2021-01-20 14:10:08,347 - [test_02NB_new_password.py-->line:72] - ERROR: 用例--【NB授权-管理员新增-IC卡】---执行失败
2021-01-20 14:10:08,348 - [test_02NB_new_password.py-->line:75] - ERROR: {'code': 1, 'message': '操作成功。'} not in {'code': 0, 'message': '操作成功。', 'content': {'usePwId': '924101B377F046FF8F7B8F6F76D1170C', 'thirdMsgId': '1E2021667CA242A0BDB41AEBF7F576FA', 'userId': '72594D9899834FBE8B0095422067F2FC', 'userInfoId': '10011128'}}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_02NB_new_password.py", line 68, in test_nb_new_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_02NB_new_password.py", line 87, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 1, 'message': '操作成功。'} not in {'code': 0, 'message': '操作成功。', 'content': {'usePwId': '924101B377F046FF8F7B8F6F76D1170C', 'thirdMsgId': '1E2021667CA242A0BDB41AEBF7F576FA', 'userId': '72594D9899834FBE8B0095422067F2FC', 'userInfoId': '10011128'}}
2021-01-20 14:11:48,516 - [test_09NB_delete_all_authorizations.py-->line:80] - INFO: 用例--【发送密码】---执行通过
2021-01-20 14:12:38,682 - [test_02NB_new_password.py-->line:79] - INFO: 用例--【NB授权-增长新增】---执行通过
2021-01-20 14:12:39,225 - [test_02NB_new_password.py-->line:79] - INFO: 用例--【NB授权-管理员新增-密码】---执行通过
2021-01-20 14:12:39,752 - [test_02NB_new_password.py-->line:79] - INFO: 用例--【NB授权-管理员新增-IC卡】---执行通过
2021-01-20 14:12:40,272 - [test_02NB_new_password.py-->line:72] - ERROR: 用例--【NB授权-管理员新增-IC卡】---执行失败
2021-01-20 14:12:40,273 - [test_02NB_new_password.py-->line:75] - ERROR: {'code': 1, 'message': '操作成功。'} not in {'code': 0, 'message': '操作成功。', 'content': {'usePwId': 'E49ECDEC602C44DDA71427D806A3338B', 'thirdMsgId': '4CE0C4553CC24C69AF00709D4D665573', 'userId': 'A51F7EB004E240369674FA2DFF992925', 'userInfoId': '10011132'}}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_02NB_new_password.py", line 68, in test_nb_new_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_02NB_new_password.py", line 87, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 1, 'message': '操作成功。'} not in {'code': 0, 'message': '操作成功。', 'content': {'usePwId': 'E49ECDEC602C44DDA71427D806A3338B', 'thirdMsgId': '4CE0C4553CC24C69AF00709D4D665573', 'userId': 'A51F7EB004E240369674FA2DFF992925', 'userInfoId': '10011132'}}
2021-01-20 14:17:09,686 - [test_09NB_delete_all_authorizations.py-->line:80] - INFO: 用例--【发送密码】---执行通过
2021-01-20 14:17:47,839 - [test_02NB_new_password.py-->line:79] - INFO: 用例--【NB授权-增长新增】---执行通过
2021-01-20 14:17:48,306 - [test_02NB_new_password.py-->line:79] - INFO: 用例--【NB授权-管理员新增-密码】---执行通过
2021-01-20 14:17:48,769 - [test_02NB_new_password.py-->line:79] - INFO: 用例--【NB授权-管理员新增-IC卡】---执行通过
2021-01-20 14:17:49,222 - [test_02NB_new_password.py-->line:79] - INFO: 用例--【NB授权-管理员新增-IC卡】---执行通过
2021-01-20 14:38:11,128 - [test_09NB_delete_all_authorizations.py-->line:80] - INFO: 用例--【发送密码】---执行通过
2021-01-20 14:42:21,653 - [test_09NB_delete_all_authorizations.py-->line:80] - INFO: 用例--【发送密码】---执行通过
2021-01-20 15:12:59,027 - [test_08NB_the_remote_to_open_the_door.py-->line:73] - ERROR: 用例--【发送密码】---执行失败
2021-01-20 15:12:59,027 - [test_08NB_the_remote_to_open_the_door.py-->line:76] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': -99, 'message': 'JSON parse error: Unrecognized field "time " (class hans.saas.server.modules.accept.entity.device.DoorRemotelyArg), not marked as ignorable; nested exception is com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "time " (class hans.saas.server.modules.accept.entity.device.DoorRemotelyArg), not marked as ignorable (5 known properties: "imei", "number", "time", "certificate", "encryptionType"])\n at [Source: (PushbackInputStream); line: 1, column: 12] (through reference chain: hans.saas.server.modules.accept.entity.device.DoorRemotelyArg["time "])', 'content': None}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_08NB_the_remote_to_open_the_door.py", line 69, in test_nb_remote_to_open_the_door
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_08NB_the_remote_to_open_the_door.py", line 88, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': -99, 'message': 'JSON parse error: Unrecognized field "time " (class hans.saas.server.modules.accept.entity.device.DoorRemotelyArg), not marked as ignorable; nested exception is com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "time " (class hans.saas.server.modules.accept.entity.device.DoorRemotelyArg), not marked as ignorable (5 known properties: "imei", "number", "time", "certificate", "encryptionType"])\n at [Source: (PushbackInputStream); line: 1, column: 12] (through reference chain: hans.saas.server.modules.accept.entity.device.DoorRemotelyArg["time "])', 'content': None}
2021-01-20 15:30:22,091 - [test_08NB_the_remote_to_open_the_door.py-->line:73] - ERROR: 用例--【发送密码】---执行失败
2021-01-20 15:30:22,092 - [test_08NB_the_remote_to_open_the_door.py-->line:76] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': -99, 'message': 'JSON parse error: Unrecognized field "time " (class hans.saas.server.modules.accept.entity.device.DoorRemotelyArg), not marked as ignorable; nested exception is com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "time " (class hans.saas.server.modules.accept.entity.device.DoorRemotelyArg), not marked as ignorable (5 known properties: "imei", "number", "time", "certificate", "encryptionType"])\n at [Source: (PushbackInputStream); line: 1, column: 12] (through reference chain: hans.saas.server.modules.accept.entity.device.DoorRemotelyArg["time "])', 'content': None}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_08NB_the_remote_to_open_the_door.py", line 69, in test_nb_remote_to_open_the_door
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_08NB_the_remote_to_open_the_door.py", line 88, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': -99, 'message': 'JSON parse error: Unrecognized field "time " (class hans.saas.server.modules.accept.entity.device.DoorRemotelyArg), not marked as ignorable; nested exception is com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "time " (class hans.saas.server.modules.accept.entity.device.DoorRemotelyArg), not marked as ignorable (5 known properties: "imei", "number", "time", "certificate", "encryptionType"])\n at [Source: (PushbackInputStream); line: 1, column: 12] (through reference chain: hans.saas.server.modules.accept.entity.device.DoorRemotelyArg["time "])', 'content': None}
2021-01-20 15:30:54,538 - [test_08NB_the_remote_to_open_the_door.py-->line:73] - ERROR: 用例--【发送密码】---执行失败
2021-01-20 15:30:54,538 - [test_08NB_the_remote_to_open_the_door.py-->line:76] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': -99, 'message': 'JSON parse error: Unrecognized field "time " (class hans.saas.server.modules.accept.entity.device.DoorRemotelyArg), not marked as ignorable; nested exception is com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "time " (class hans.saas.server.modules.accept.entity.device.DoorRemotelyArg), not marked as ignorable (5 known properties: "imei", "number", "time", "certificate", "encryptionType"])\n at [Source: (PushbackInputStream); line: 1, column: 12] (through reference chain: hans.saas.server.modules.accept.entity.device.DoorRemotelyArg["time "])', 'content': None}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_08NB_the_remote_to_open_the_door.py", line 69, in test_nb_remote_to_open_the_door
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_08NB_the_remote_to_open_the_door.py", line 88, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': -99, 'message': 'JSON parse error: Unrecognized field "time " (class hans.saas.server.modules.accept.entity.device.DoorRemotelyArg), not marked as ignorable; nested exception is com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "time " (class hans.saas.server.modules.accept.entity.device.DoorRemotelyArg), not marked as ignorable (5 known properties: "imei", "number", "time", "certificate", "encryptionType"])\n at [Source: (PushbackInputStream); line: 1, column: 12] (through reference chain: hans.saas.server.modules.accept.entity.device.DoorRemotelyArg["time "])', 'content': None}
2021-01-20 17:00:33,970 - [test_02NB_new_password.py-->line:92] - INFO: 用例--【NB授权-增长新增】---执行通过
2021-01-20 17:17:35,940 - [test_02NB_new_password.py-->line:97] - INFO: 用例--【NB授权-增长新增】---执行通过
2021-01-20 17:21:50,008 - [test_02NB_new_password.py-->line:90] - ERROR: 用例--【NB授权-增长新增】---执行失败
2021-01-20 17:21:50,008 - [test_02NB_new_password.py-->line:93] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_02NB_new_password.py", line 86, in test_nb_new_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_02NB_new_password.py", line 105, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
2021-01-20 17:25:29,673 - [test_02NB_new_password.py-->line:90] - ERROR: 用例--【NB授权-增长新增】---执行失败
2021-01-20 17:25:29,673 - [test_02NB_new_password.py-->line:93] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_02NB_new_password.py", line 86, in test_nb_new_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_02NB_new_password.py", line 105, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
2021-01-20 17:25:50,453 - [test_02NB_new_password.py-->line:97] - INFO: 用例--【NB授权-增长新增】---执行通过
2021-01-20 17:59:36,602 - [test_11NB_delete_all_authorizations.py-->line:80] - INFO: 用例--【发送密码】---执行通过
2021-01-20 18:01:28,881 - [test_02NB_new_password.py-->line:97] - INFO: 用例--【NB授权-增长新增】---执行通过
2021-01-20 18:02:11,158 - [test_02NB_new_password.py-->line:96] - INFO: 用例--【NB授权-正常新增】---执行通过
2021-01-20 18:06:37,834 - [test_02NB_new_password_01.py-->line:96] - INFO: 用例--【NB授权-管理员新增-IC卡】---执行通过
2021-01-20 18:09:23,454 - [test_02NB_new_password_01.py-->line:96] - INFO: 用例--【NB授权-管理员新增-IC卡】---执行通过
2021-01-20 18:14:36,523 - [test_11NB_delete_all_authorizations.py-->line:96] - INFO: 用例--【发送密码】---执行通过
2021-01-20 18:21:14,150 - [test_11NB_delete_all_authorizations.py-->line:96] - INFO: 用例--【发送密码】---执行通过
2021-01-20 18:22:13,916 - [test_11NB_delete_all_authorizations.py-->line:96] - INFO: 用例--【删除全部授权】---执行通过
2021-01-20 18:25:41,066 - [test_11NB_delete_all_authorizations.py-->line:96] - INFO: 用例--【删除全部授权】---执行通过
2021-01-20 18:32:31,990 - [test_02NB_new_password.py-->line:95] - INFO: 用例--【NB授权-正常新增】---执行通过
2021-01-20 18:32:44,438 - [test_02NB_new_password_01.py-->line:95] - INFO: 用例--【NB授权-管理员新增-IC卡】---执行通过
2021-01-20 18:32:59,627 - [test_11NB_delete_all_authorizations.py-->line:95] - INFO: 用例--【删除全部授权】---执行通过
2021-01-21 10:27:44,361 - [test_02NB_new_password.py-->line:95] - INFO: 用例--【NB授权-管理员新增-密码】---执行通过
2021-01-21 10:28:43,152 - [test_02NB_new_password.py-->line:96] - INFO: 用例--【NB授权-管理员新增-密码】---执行通过
2021-01-21 10:40:35,800 - [test_03NB_update_password.py-->line:76] - ERROR: 用例--【NB授权-管理员新增-密码】---执行失败
2021-01-21 10:40:35,816 - [test_03NB_update_password.py-->line:78] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': -999, 'message': '未登录, 无法访问该地址'}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_03NB_update_password.py", line 74, in test_nb_update_password
    self.assertDictIn(expected,res)
  File "E:\86-code\suoguan\testcases\test_03NB_update_password.py", line 90, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': -999, 'message': '未登录, 无法访问该地址'}
2021-01-21 10:41:53,456 - [test_03NB_update_password.py-->line:76] - ERROR: 用例--【NB授权-管理员修改-密码】---执行失败
2021-01-21 10:41:53,456 - [test_03NB_update_password.py-->line:78] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': -999, 'message': '未登录, 无法访问该地址'}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_03NB_update_password.py", line 74, in test_nb_update_password
    self.assertDictIn(expected,res)
  File "E:\86-code\suoguan\testcases\test_03NB_update_password.py", line 90, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': -999, 'message': '未登录, 无法访问该地址'}
2021-01-21 10:44:06,011 - [test_03NB_update_password.py-->line:89] - ERROR: 用例--【NB授权-管理员修改-密码】---执行失败
2021-01-21 10:44:06,011 - [test_03NB_update_password.py-->line:92] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': -99, 'message': '内部异常', 'content': None}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_03NB_update_password.py", line 85, in test_nb_new_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_03NB_update_password.py", line 104, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': -99, 'message': '内部异常', 'content': None}
2021-01-21 13:08:14,174 - [test_03NB_update_password.py-->line:89] - ERROR: 用例--【NB授权-管理员修改-密码】---执行失败
2021-01-21 13:08:14,174 - [test_03NB_update_password.py-->line:92] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': -99, 'message': '内部异常', 'content': None}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_03NB_update_password.py", line 85, in test_nb_new_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_03NB_update_password.py", line 104, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': -99, 'message': '内部异常', 'content': None}
2021-01-21 13:09:39,414 - [test_02NB_new_password.py-->line:89] - ERROR: 用例--【NB授权-管理员修改-密码】---执行失败
2021-01-21 13:09:39,414 - [test_02NB_new_password.py-->line:92] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': -99, 'message': '内部异常', 'content': None}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_02NB_new_password.py", line 85, in test_nb_new_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_02NB_new_password.py", line 104, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': -99, 'message': '内部异常', 'content': None}
2021-01-21 13:10:19,974 - [test_02NB_new_password.py-->line:89] - ERROR: 用例--【NB授权-管理员修改-密码】---执行失败
2021-01-21 13:10:19,974 - [test_02NB_new_password.py-->line:92] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': -99, 'message': '内部异常', 'content': None}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_02NB_new_password.py", line 85, in test_nb_new_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_02NB_new_password.py", line 104, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': -99, 'message': '内部异常', 'content': None}
2021-01-21 13:10:37,704 - [test_11NB_delete_all_authorizations.py-->line:95] - INFO: 用例--【删除全部授权】---执行通过
2021-01-21 17:59:16,762 - [test_11NB_delete_all_authorizations.py-->line:98] - INFO: 用例--【删除全部授权】---执行通过
2021-01-21 18:02:19,672 - [test_11NB_delete_all_authorizations.py-->line:98] - INFO: 用例--【删除全部授权】---执行通过
2021-01-21 18:02:40,414 - [test_11NB_delete_all_authorizations.py-->line:98] - INFO: 用例--【删除全部授权】---执行通过
2021-01-21 18:07:05,198 - [test_11NB_delete_all_authorizations.py-->line:98] - INFO: 用例--【删除全部授权】---执行通过
2021-01-21 18:07:40,369 - [test_11NB_delete_all_authorizations.py-->line:98] - INFO: 用例--【删除全部授权】---执行通过
2021-01-22 15:00:37,593 - [test_02NB_new_password.py-->line:89] - ERROR: 用例--【NB授权-管理员修改-密码】---执行失败
2021-01-22 15:00:37,594 - [test_02NB_new_password.py-->line:92] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '门锁用户不存在', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_02NB_new_password.py", line 85, in test_nb_new_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_02NB_new_password.py", line 104, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '门锁用户不存在', 'content': ''}
2021-01-22 15:02:07,368 - [test_02NB_new_password.py-->line:96] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-22 15:24:14,215 - [test_11NB_delete_all_authorizations.py-->line:98] - INFO: 用例--【删除全部授权】---执行通过
2021-01-22 15:31:08,383 - [test_02NB_new_password.py-->line:96] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-22 16:16:19,761 - [test_02NB_new_password.py-->line:96] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-22 16:17:25,703 - [test_02NB_new_password.py-->line:97] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-22 16:19:26,501 - [test_05NB_assist.py-->line:101] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-22 16:52:51,087 - [test_05NB_assist.py-->line:101] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-22 16:54:28,595 - [test_05NB_assist.py-->line:101] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-22 16:55:07,155 - [test_05NB_assist.py-->line:101] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-22 16:56:09,122 - [test_05NB_assist.py-->line:102] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-22 16:58:58,139 - [test_05NB_assist.py-->line:102] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-22 16:59:18,581 - [test_05NB_assist.py-->line:102] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-22 17:00:15,018 - [test_05NB_assist.py-->line:102] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-22 17:00:48,609 - [test_05NB_assist.py-->line:102] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-22 17:01:11,641 - [test_05NB_assist.py-->line:102] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-22 17:02:52,804 - [test_05NB_assist.py-->line:102] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-22 17:14:02,562 - [test_05NB_assist.py-->line:102] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-22 17:22:41,114 - [test_05NB_assist.py-->line:102] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-22 17:23:10,221 - [test_05NB_delete_the_authorized.py-->line:89] - ERROR: 用例--【NB_删除授权】---执行失败
2021-01-22 17:23:10,222 - [test_05NB_delete_the_authorized.py-->line:92] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '该授权信息不存在', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_05NB_delete_the_authorized.py", line 85, in test_nb_new_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_05NB_delete_the_authorized.py", line 104, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '该授权信息不存在', 'content': ''}
2021-01-22 18:03:53,163 - [test_05NB_assist.py-->line:102] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-22 18:04:18,280 - [test_05NB_assist.py-->line:102] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-22 18:07:08,121 - [test_05NB_assist.py-->line:102] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-22 18:08:33,937 - [test_05NB_assist.py-->line:102] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-25 18:27:26,957 - [test_02NB_new_password.py-->line:97] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-25 18:32:58,370 - [test_06NB_grant_column_list.py-->line:98] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-25 18:34:34,519 - [test_06NB_grant_column_list.py-->line:98] - INFO: 用例--【NB_授权列表】---执行通过
2021-01-25 18:38:26,859 - [test_07NB_authorization_list_details.py-->line:91] - ERROR: 用例--【NB_授权列表】---执行失败
2021-01-25 18:38:26,859 - [test_07NB_authorization_list_details.py-->line:94] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': -99, 'message': 'JSON parse error: Unrecognized field "id" (class hans.saas.server.modules.lock.controller.dto.arg.LockUserTypeArg), not marked as ignorable; nested exception is com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "id" (class hans.saas.server.modules.lock.controller.dto.arg.LockUserTypeArg), not marked as ignorable (one known property: "imei"])\n at [Source: (PushbackInputStream); line: 1, column: 9] (through reference chain: hans.saas.server.modules.lock.controller.dto.arg.LockUserTypeArg["id"])', 'content': None}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_07NB_authorization_list_details.py", line 87, in test_nb_new_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_07NB_authorization_list_details.py", line 106, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': -99, 'message': 'JSON parse error: Unrecognized field "id" (class hans.saas.server.modules.lock.controller.dto.arg.LockUserTypeArg), not marked as ignorable; nested exception is com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "id" (class hans.saas.server.modules.lock.controller.dto.arg.LockUserTypeArg), not marked as ignorable (one known property: "imei"])\n at [Source: (PushbackInputStream); line: 1, column: 9] (through reference chain: hans.saas.server.modules.lock.controller.dto.arg.LockUserTypeArg["id"])', 'content': None}
2021-01-25 18:39:58,938 - [test_07NB_authorization_list_details.py-->line:91] - ERROR: 用例--【NB_授权列表】---执行失败
2021-01-25 18:39:58,938 - [test_07NB_authorization_list_details.py-->line:94] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': -99, 'message': 'JSON parse error: Unrecognized field "id" (class hans.saas.server.modules.lock.controller.dto.arg.LockUserTypeArg), not marked as ignorable; nested exception is com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "id" (class hans.saas.server.modules.lock.controller.dto.arg.LockUserTypeArg), not marked as ignorable (one known property: "imei"])\n at [Source: (PushbackInputStream); line: 1, column: 9] (through reference chain: hans.saas.server.modules.lock.controller.dto.arg.LockUserTypeArg["id"])', 'content': None}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_07NB_authorization_list_details.py", line 87, in test_nb_new_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_07NB_authorization_list_details.py", line 106, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': -99, 'message': 'JSON parse error: Unrecognized field "id" (class hans.saas.server.modules.lock.controller.dto.arg.LockUserTypeArg), not marked as ignorable; nested exception is com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "id" (class hans.saas.server.modules.lock.controller.dto.arg.LockUserTypeArg), not marked as ignorable (one known property: "imei"])\n at [Source: (PushbackInputStream); line: 1, column: 9] (through reference chain: hans.saas.server.modules.lock.controller.dto.arg.LockUserTypeArg["id"])', 'content': None}
2021-01-25 18:40:43,543 - [test_02NB_new_password.py-->line:97] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-25 18:41:17,051 - [test_07NB_authorization_list_details.py-->line:91] - ERROR: 用例--【NB_授权列表】---执行失败
2021-01-25 18:41:17,052 - [test_07NB_authorization_list_details.py-->line:94] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': -99, 'message': 'JSON parse error: Unrecognized field "id" (class hans.saas.server.modules.lock.controller.dto.arg.LockUserTypeArg), not marked as ignorable; nested exception is com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "id" (class hans.saas.server.modules.lock.controller.dto.arg.LockUserTypeArg), not marked as ignorable (one known property: "imei"])\n at [Source: (PushbackInputStream); line: 1, column: 9] (through reference chain: hans.saas.server.modules.lock.controller.dto.arg.LockUserTypeArg["id"])', 'content': None}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_07NB_authorization_list_details.py", line 87, in test_nb_new_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_07NB_authorization_list_details.py", line 106, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': -99, 'message': 'JSON parse error: Unrecognized field "id" (class hans.saas.server.modules.lock.controller.dto.arg.LockUserTypeArg), not marked as ignorable; nested exception is com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "id" (class hans.saas.server.modules.lock.controller.dto.arg.LockUserTypeArg), not marked as ignorable (one known property: "imei"])\n at [Source: (PushbackInputStream); line: 1, column: 9] (through reference chain: hans.saas.server.modules.lock.controller.dto.arg.LockUserTypeArg["id"])', 'content': None}
2021-01-25 18:41:58,308 - [test_07NB_authorization_list_details.py-->line:98] - INFO: 用例--【NB_授权列表】---执行通过
2021-01-25 18:49:51,663 - [test_02NB_new_password.py-->line:97] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-25 19:08:04,331 - [test_09NB_freeze_authorization.py-->line:90] - ERROR: 用例--【NB_授权列表】---执行失败
2021-01-25 19:08:04,331 - [test_09NB_freeze_authorization.py-->line:93] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': -1, 'message': '该用户信息不存在', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_09NB_freeze_authorization.py", line 86, in test_nb_new_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_09NB_freeze_authorization.py", line 105, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': -1, 'message': '该用户信息不存在', 'content': ''}
2021-01-25 19:08:35,189 - [test_02NB_new_password.py-->line:97] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-25 19:09:17,589 - [test_09NB_freeze_authorization.py-->line:90] - ERROR: 用例--【NB_授权列表】---执行失败
2021-01-25 19:09:17,589 - [test_09NB_freeze_authorization.py-->line:93] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': -1, 'message': '该用户信息不存在', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_09NB_freeze_authorization.py", line 86, in test_nb_new_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_09NB_freeze_authorization.py", line 105, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': -1, 'message': '该用户信息不存在', 'content': ''}
2021-01-26 11:10:24,708 - [test_02NB_new_password.py-->line:97] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-26 11:16:30,821 - [test_02NB_new_password.py-->line:97] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-26 11:16:52,458 - [test_02NB_new_password.py-->line:96] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-26 11:38:39,534 - [test_02NB_new_password.py-->line:100] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-26 11:39:11,595 - [test_02NB_new_password.py-->line:102] - INFO: 用例--【NB授权-普通用户新增-密码】---无需执行
2021-01-26 11:39:49,691 - [test_02NB_new_password.py-->line:102] - INFO: 用例--【NB授权-普通用户新增-密码】---无需执行
2021-01-26 11:39:59,631 - [test_02NB_new_password.py-->line:100] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-26 13:26:41,254 - [test_02NB_new_password.py-->line:100] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-26 13:27:41,779 - [test_02NB_new_password_01.py-->line:94] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-26 13:27:42,270 - [test_02NB_new_password_01.py-->line:94] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-26 13:27:42,735 - [test_02NB_new_password_01.py-->line:87] - ERROR: 用例--【NB授权-劫持用户新增-密码】---执行失败
2021-01-26 13:27:42,735 - [test_02NB_new_password_01.py-->line:90] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_02NB_new_password_01.py", line 83, in test_nb_new_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_02NB_new_password_01.py", line 103, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
2021-01-26 13:27:43,206 - [test_02NB_new_password_01.py-->line:94] - INFO: 用例--【NB授权-管理员新增-IC卡】---执行通过
2021-01-26 13:27:43,708 - [test_02NB_new_password_01.py-->line:94] - INFO: 用例--【NB授权-普通用户新增-IC卡】---执行通过
2021-01-26 13:27:44,194 - [test_02NB_new_password_01.py-->line:94] - INFO: 用例--【NB授权-临时用户新增-IC卡】---执行通过
2021-01-26 13:27:44,689 - [test_02NB_new_password_01.py-->line:94] - INFO: 用例--【NB授权-劫持用户新增-IC卡】---执行通过
2021-01-26 13:47:29,658 - [test_11NB_delete_all_authorizations.py-->line:98] - INFO: 用例--【删除全部授权】---执行通过
2021-01-26 13:50:21,388 - [test_02NB_new_password_01.py-->line:94] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-26 13:50:21,895 - [test_02NB_new_password_01.py-->line:94] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-26 13:50:22,372 - [test_02NB_new_password_01.py-->line:87] - ERROR: 用例--【NB授权-劫持用户新增-密码】---执行失败
2021-01-26 13:50:22,372 - [test_02NB_new_password_01.py-->line:90] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_02NB_new_password_01.py", line 83, in test_nb_new_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_02NB_new_password_01.py", line 103, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
2021-01-26 13:50:22,876 - [test_02NB_new_password_01.py-->line:94] - INFO: 用例--【NB授权-管理员新增-IC卡】---执行通过
2021-01-26 13:50:23,357 - [test_02NB_new_password_01.py-->line:94] - INFO: 用例--【NB授权-普通用户新增-IC卡】---执行通过
2021-01-26 13:50:23,858 - [test_02NB_new_password_01.py-->line:94] - INFO: 用例--【NB授权-临时用户新增-IC卡】---执行通过
2021-01-26 13:50:24,341 - [test_02NB_new_password_01.py-->line:94] - INFO: 用例--【NB授权-劫持用户新增-IC卡】---执行通过
2021-01-26 13:54:50,370 - [test_11NB_delete_all_authorizations.py-->line:98] - INFO: 用例--【删除全部授权】---执行通过
2021-01-26 13:55:12,616 - [test_02NB_new_password_01.py-->line:94] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-26 13:55:13,104 - [test_02NB_new_password_01.py-->line:94] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-26 13:55:13,565 - [test_02NB_new_password_01.py-->line:87] - ERROR: 用例--【NB授权-劫持用户新增-密码】---执行失败
2021-01-26 13:55:13,566 - [test_02NB_new_password_01.py-->line:90] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_02NB_new_password_01.py", line 83, in test_nb_new_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_02NB_new_password_01.py", line 103, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
2021-01-26 13:55:14,065 - [test_02NB_new_password_01.py-->line:94] - INFO: 用例--【NB授权-管理员新增-IC卡】---执行通过
2021-01-26 13:55:14,552 - [test_02NB_new_password_01.py-->line:94] - INFO: 用例--【NB授权-普通用户新增-IC卡】---执行通过
2021-01-26 13:55:15,029 - [test_02NB_new_password_01.py-->line:94] - INFO: 用例--【NB授权-临时用户新增-IC卡】---执行通过
2021-01-26 13:55:15,514 - [test_02NB_new_password_01.py-->line:94] - INFO: 用例--【NB授权-劫持用户新增-IC卡】---执行通过
2021-01-26 13:58:15,876 - [test_11NB_delete_all_authorizations.py-->line:98] - INFO: 用例--【删除全部授权】---执行通过
2021-01-26 13:58:37,172 - [test_02NB_new_password_01.py-->line:94] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-26 13:58:37,667 - [test_02NB_new_password_01.py-->line:94] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-26 13:58:38,146 - [test_02NB_new_password_01.py-->line:87] - ERROR: 用例--【NB授权-劫持用户新增-密码】---执行失败
2021-01-26 13:58:38,146 - [test_02NB_new_password_01.py-->line:90] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_02NB_new_password_01.py", line 83, in test_nb_new_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_02NB_new_password_01.py", line 103, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
2021-01-26 13:58:38,704 - [test_02NB_new_password_01.py-->line:94] - INFO: 用例--【NB授权-管理员新增-IC卡】---执行通过
2021-01-26 13:58:39,198 - [test_02NB_new_password_01.py-->line:94] - INFO: 用例--【NB授权-普通用户新增-IC卡】---执行通过
2021-01-26 13:58:39,678 - [test_02NB_new_password_01.py-->line:94] - INFO: 用例--【NB授权-临时用户新增-IC卡】---执行通过
2021-01-26 13:58:40,214 - [test_02NB_new_password_01.py-->line:94] - INFO: 用例--【NB授权-劫持用户新增-IC卡】---执行通过
2021-01-26 15:31:26,706 - [test_02NB_new_password_02.py-->line:109] - INFO: 用例--【NB授权-管理员新增-指纹】---无需执行
2021-01-26 15:31:26,707 - [test_02NB_new_password_02.py-->line:109] - INFO: 用例--【NB授权-普通用户新增-指纹】---无需执行
2021-01-26 15:31:26,707 - [test_02NB_new_password_02.py-->line:109] - INFO: 用例--【NB授权-临时用户新增-指纹】---无需执行
2021-01-26 15:31:26,708 - [test_02NB_new_password_02.py-->line:109] - INFO: 用例--【NB授权-劫持用户新增-指纹】---无需执行
2021-01-26 15:31:27,220 - [test_02NB_new_password_02.py-->line:107] - INFO: 用例--【NB授权-过期时间】---执行通过
2021-01-26 15:31:27,740 - [test_02NB_new_password_02.py-->line:107] - INFO: 用例--【NB授权-待生效】---执行通过
2021-01-26 15:31:28,207 - [test_02NB_new_password_02.py-->line:107] - INFO: 用例--【NB授权-有效次数-有效次数传入0次】---执行通过
2021-01-26 15:31:28,681 - [test_02NB_new_password_02.py-->line:107] - INFO: 用例--【NB授权-有效次数-有效次数使用不能再次使用】---执行通过
2021-01-26 15:31:29,193 - [test_02NB_new_password_02.py-->line:107] - INFO: 用例--【NB授权-临时用户-有效次数判断】---执行通过
2021-01-26 15:37:39,362 - [test_11NB_delete_all_authorizations.py-->line:98] - INFO: 用例--【删除全部授权】---执行通过
2021-01-26 15:38:33,148 - [test_02NB_new_password_02.py-->line:110] - INFO: 用例--【NB授权-管理员新增-指纹】---无需执行
2021-01-26 15:38:33,149 - [test_02NB_new_password_02.py-->line:110] - INFO: 用例--【NB授权-普通用户新增-指纹】---无需执行
2021-01-26 15:38:33,150 - [test_02NB_new_password_02.py-->line:110] - INFO: 用例--【NB授权-临时用户新增-指纹】---无需执行
2021-01-26 15:38:33,151 - [test_02NB_new_password_02.py-->line:110] - INFO: 用例--【NB授权-劫持用户新增-指纹】---无需执行
2021-01-26 15:38:33,649 - [test_02NB_new_password_02.py-->line:108] - INFO: 用例--【NB授权-过期时间】---执行通过
2021-01-26 15:38:34,140 - [test_02NB_new_password_02.py-->line:108] - INFO: 用例--【NB授权-待生效】---执行通过
2021-01-26 15:38:34,640 - [test_02NB_new_password_02.py-->line:108] - INFO: 用例--【NB授权-有效次数-有效次数传入0次】---执行通过
2021-01-26 15:38:35,182 - [test_02NB_new_password_02.py-->line:108] - INFO: 用例--【NB授权-有效次数-有效次数使用不能再次使用】---执行通过
2021-01-26 15:38:35,663 - [test_02NB_new_password_02.py-->line:108] - INFO: 用例--【NB授权-临时用户-有效次数判断】---执行通过
2021-01-26 15:42:26,832 - [test_02NB_new_password_02.py-->line:110] - INFO: 用例--【NB授权-管理员新增-指纹】---无需执行
2021-01-26 15:42:26,833 - [test_02NB_new_password_02.py-->line:110] - INFO: 用例--【NB授权-普通用户新增-指纹】---无需执行
2021-01-26 15:42:26,835 - [test_02NB_new_password_02.py-->line:110] - INFO: 用例--【NB授权-临时用户新增-指纹】---无需执行
2021-01-26 15:42:26,836 - [test_02NB_new_password_02.py-->line:110] - INFO: 用例--【NB授权-劫持用户新增-指纹】---无需执行
2021-01-26 15:42:27,861 - [test_02NB_new_password_02.py-->line:108] - INFO: 用例--【NB授权-过期时间】---执行通过
2021-01-26 15:42:28,365 - [test_02NB_new_password_02.py-->line:108] - INFO: 用例--【NB授权-待生效】---执行通过
2021-01-26 15:42:28,825 - [test_02NB_new_password_02.py-->line:108] - INFO: 用例--【NB授权-有效次数-有效次数传入0次】---执行通过
2021-01-26 15:42:29,307 - [test_02NB_new_password_02.py-->line:108] - INFO: 用例--【NB授权-有效次数-有效次数使用不能再次使用】---执行通过
2021-01-26 15:42:29,807 - [test_02NB_new_password_02.py-->line:108] - INFO: 用例--【NB授权-临时用户-有效次数判断】---执行通过
2021-01-26 15:44:37,896 - [test_11NB_delete_all_authorizations.py-->line:98] - INFO: 用例--【删除全部授权】---执行通过
2021-01-26 15:45:49,249 - [test_02NB_new_password_02.py-->line:110] - INFO: 用例--【NB授权-管理员新增-指纹】---无需执行
2021-01-26 15:45:49,252 - [test_02NB_new_password_02.py-->line:110] - INFO: 用例--【NB授权-普通用户新增-指纹】---无需执行
2021-01-26 15:45:49,254 - [test_02NB_new_password_02.py-->line:110] - INFO: 用例--【NB授权-临时用户新增-指纹】---无需执行
2021-01-26 15:45:49,257 - [test_02NB_new_password_02.py-->line:110] - INFO: 用例--【NB授权-劫持用户新增-指纹】---无需执行
2021-01-26 15:45:49,737 - [test_02NB_new_password_02.py-->line:108] - INFO: 用例--【NB授权-过期时间】---执行通过
2021-01-26 15:45:50,218 - [test_02NB_new_password_02.py-->line:108] - INFO: 用例--【NB授权-待生效】---执行通过
2021-01-26 15:45:50,714 - [test_02NB_new_password_02.py-->line:108] - INFO: 用例--【NB授权-有效次数-有效次数传入0次】---执行通过
2021-01-26 15:45:51,208 - [test_02NB_new_password_02.py-->line:108] - INFO: 用例--【NB授权-有效次数-有效次数使用不能再次使用】---执行通过
2021-01-26 15:45:51,712 - [test_02NB_new_password_02.py-->line:108] - INFO: 用例--【NB授权-临时用户-有效次数判断】---执行通过
2021-01-26 15:54:27,578 - [test_11NB_delete_all_authorizations.py-->line:98] - INFO: 用例--【删除全部授权】---执行通过
2021-01-26 15:55:22,096 - [test_02NB_new_password_02.py-->line:110] - INFO: 用例--【NB授权-管理员新增-指纹】---无需执行
2021-01-26 15:55:22,098 - [test_02NB_new_password_02.py-->line:110] - INFO: 用例--【NB授权-普通用户新增-指纹】---无需执行
2021-01-26 15:55:22,101 - [test_02NB_new_password_02.py-->line:110] - INFO: 用例--【NB授权-临时用户新增-指纹】---无需执行
2021-01-26 15:55:22,103 - [test_02NB_new_password_02.py-->line:110] - INFO: 用例--【NB授权-劫持用户新增-指纹】---无需执行
2021-01-26 15:55:22,603 - [test_02NB_new_password_02.py-->line:108] - INFO: 用例--【NB授权-过期时间】---执行通过
2021-01-26 15:55:23,077 - [test_02NB_new_password_02.py-->line:108] - INFO: 用例--【NB授权-待生效】---执行通过
2021-01-26 15:55:23,544 - [test_02NB_new_password_02.py-->line:108] - INFO: 用例--【NB授权-有效次数-有效次数传入0次】---执行通过
2021-01-26 15:55:24,018 - [test_02NB_new_password_02.py-->line:108] - INFO: 用例--【NB授权-有效次数-有效次数使用不能再次使用】---执行通过
2021-01-26 15:55:24,502 - [test_02NB_new_password_02.py-->line:108] - INFO: 用例--【NB授权-临时用户-有效次数判断】---执行通过
2021-01-26 16:01:29,622 - [test_11NB_delete_all_authorizations.py-->line:98] - INFO: 用例--【删除全部授权】---执行通过
2021-01-26 16:03:36,845 - [test_02NB_new_password_02.py-->line:110] - INFO: 用例--【NB授权-管理员新增-指纹】---无需执行
2021-01-26 16:03:36,846 - [test_02NB_new_password_02.py-->line:110] - INFO: 用例--【NB授权-普通用户新增-指纹】---无需执行
2021-01-26 16:03:36,847 - [test_02NB_new_password_02.py-->line:110] - INFO: 用例--【NB授权-临时用户新增-指纹】---无需执行
2021-01-26 16:03:36,848 - [test_02NB_new_password_02.py-->line:110] - INFO: 用例--【NB授权-劫持用户新增-指纹】---无需执行
2021-01-26 16:03:37,341 - [test_02NB_new_password_02.py-->line:108] - INFO: 用例--【NB授权-过期时间】---执行通过
2021-01-26 16:03:37,821 - [test_02NB_new_password_02.py-->line:108] - INFO: 用例--【NB授权-待生效】---执行通过
2021-01-26 16:03:38,345 - [test_02NB_new_password_02.py-->line:108] - INFO: 用例--【NB授权-有效次数-有效次数传入0次】---执行通过
2021-01-26 16:03:38,829 - [test_02NB_new_password_02.py-->line:108] - INFO: 用例--【NB授权-有效次数-有效次数使用不能再次使用】---执行通过
2021-01-26 16:03:39,350 - [test_02NB_new_password_02.py-->line:108] - INFO: 用例--【NB授权-临时用户-有效次数判断】---执行通过
2021-01-26 16:10:29,854 - [test_11NB_delete_all_authorizations.py-->line:98] - INFO: 用例--【删除全部授权】---执行通过
2021-01-26 16:11:47,407 - [test_02NB_new_password_02.py-->line:110] - INFO: 用例--【NB授权-管理员新增-指纹】---无需执行
2021-01-26 16:11:47,409 - [test_02NB_new_password_02.py-->line:110] - INFO: 用例--【NB授权-普通用户新增-指纹】---无需执行
2021-01-26 16:11:47,412 - [test_02NB_new_password_02.py-->line:110] - INFO: 用例--【NB授权-临时用户新增-指纹】---无需执行
2021-01-26 16:11:47,414 - [test_02NB_new_password_02.py-->line:110] - INFO: 用例--【NB授权-劫持用户新增-指纹】---无需执行
2021-01-26 16:11:47,900 - [test_02NB_new_password_02.py-->line:108] - INFO: 用例--【NB授权-过期时间】---执行通过
2021-01-26 16:11:48,376 - [test_02NB_new_password_02.py-->line:108] - INFO: 用例--【NB授权-待生效】---执行通过
2021-01-26 16:11:48,823 - [test_02NB_new_password_02.py-->line:108] - INFO: 用例--【NB授权-有效次数-有效次数传入0次】---执行通过
2021-01-26 16:11:49,295 - [test_02NB_new_password_02.py-->line:108] - INFO: 用例--【NB授权-有效次数-有效次数使用不能再次使用】---执行通过
2021-01-26 16:11:49,754 - [test_02NB_new_password_02.py-->line:108] - INFO: 用例--【NB授权-临时用户-有效次数判断】---执行通过
2021-01-26 16:53:28,715 - [test_02NB_new_password_02.py-->line:126] - INFO: 用例--【NB授权-普通用户新增-IC本地录入】---执行通过
2021-01-26 16:54:19,244 - [test_02NB_new_password_02.py-->line:126] - INFO: 用例--【NB授权-普通用户新增-IC本地录入】---执行通过
2021-01-26 16:56:13,103 - [test_02NB_new_password_02.py-->line:126] - INFO: 用例--【NB授权-普通用户新增-IC本地录入】---执行通过
2021-01-26 16:57:03,224 - [test_02NB_new_password_02.py-->line:126] - INFO: 用例--【NB授权-普通用户新增-IC本地录入】---执行通过
2021-01-26 17:06:29,195 - [test_02NB_new_password_02.py-->line:119] - ERROR: 用例--【NB授权-普通用户新增-指纹本地录入】---执行失败
2021-01-26 17:06:29,195 - [test_02NB_new_password_02.py-->line:122] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': -99, 'message': '内部异常', 'content': None}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_02NB_new_password_02.py", line 115, in test_nb_new_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_02NB_new_password_02.py", line 135, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': -99, 'message': '内部异常', 'content': None}
2021-01-26 17:07:34,012 - [test_02NB_new_password_02.py-->line:126] - INFO: 用例--【NB授权-普通用户新增-指纹本地录入】---执行通过
2021-01-26 17:14:14,605 - [test_02NB_new_password_02.py-->line:119] - ERROR: 用例--【NB授权-普通用户新增-身份证本地录入】---执行失败
2021-01-26 17:14:14,605 - [test_02NB_new_password_02.py-->line:122] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_02NB_new_password_02.py", line 115, in test_nb_new_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_02NB_new_password_02.py", line 135, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
2021-01-26 17:16:07,685 - [test_02NB_new_password_02.py-->line:126] - INFO: 用例--【NB授权-普通用户新增-指纹本地录入】---执行通过
2021-01-26 17:20:24,219 - [test_02NB_new_password_02.py-->line:126] - INFO: 用例--【NB授权-临时用户新增-指纹本地录入】---执行通过
2021-01-26 17:31:50,976 - [test_02NB_new_password_02.py-->line:125] - INFO: 用例--【NB授权-临时用户新增-IC本地录入】---执行通过
2021-01-26 17:34:32,375 - [test_02NB_new_password_02.py-->line:125] - INFO: 用例--【NB授权-临时用户新增-指纹本地录入】---执行通过
2021-01-26 17:37:17,784 - [test_02NB_new_password_02.py-->line:118] - ERROR: 用例--【NB授权-普通用户新增-身份证本地录入】---执行失败
2021-01-26 17:37:17,785 - [test_02NB_new_password_02.py-->line:121] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_02NB_new_password_02.py", line 114, in test_nb_new_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_02NB_new_password_02.py", line 134, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
2021-01-26 23:30:53,326 - [test_02NB_new_password.py-->line:93] - ERROR: 用例--【NB授权-普通用户新增-密码】---执行失败
2021-01-26 23:30:53,326 - [test_02NB_new_password.py-->line:96] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': -1, 'message': '无权限操作', 'content': ''}
Traceback (most recent call last):
  File "F:\86-code\suoguan\testcases\test_02NB_new_password.py", line 89, in test_nb_new_password
    self.assertDictIn(expected, res)
  File "F:\86-code\suoguan\testcases\test_02NB_new_password.py", line 109, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': -1, 'message': '无权限操作', 'content': ''}
2021-01-26 23:41:28,424 - [test_03NB_update_password.py-->line:132] - ERROR: 用例--【NB授权-管理员修改-密码】---执行失败
2021-01-26 23:41:28,424 - [test_03NB_update_password.py-->line:135] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
Traceback (most recent call last):
  File "F:\86-code\suoguan\testcases\test_03NB_update_password.py", line 128, in test_nb_update_password
    self.assertDictIn(expected, res)
  File "F:\86-code\suoguan\testcases\test_03NB_update_password.py", line 148, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
2021-01-26 23:42:06,632 - [test_03NB_update_password.py-->line:132] - ERROR: 用例--【NB授权-管理员修改-密码】---执行失败
2021-01-26 23:42:06,632 - [test_03NB_update_password.py-->line:135] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
Traceback (most recent call last):
  File "F:\86-code\suoguan\testcases\test_03NB_update_password.py", line 128, in test_nb_update_password
    self.assertDictIn(expected, res)
  File "F:\86-code\suoguan\testcases\test_03NB_update_password.py", line 148, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
2021-01-26 23:45:32,856 - [test_03NB_update_password.py-->line:133] - ERROR: 用例--【NB授权-管理员修改-密码】---执行失败
2021-01-26 23:45:32,857 - [test_03NB_update_password.py-->line:136] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
Traceback (most recent call last):
  File "F:\86-code\suoguan\testcases\test_03NB_update_password.py", line 129, in test_nb_update_password
    self.assertDictIn(expected, res)
  File "F:\86-code\suoguan\testcases\test_03NB_update_password.py", line 149, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
2021-01-26 23:50:28,799 - [test_03NB_update_password.py-->line:134] - ERROR: 用例--【NB授权-管理员修改-密码】---执行失败
2021-01-26 23:50:28,799 - [test_03NB_update_password.py-->line:137] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
Traceback (most recent call last):
  File "F:\86-code\suoguan\testcases\test_03NB_update_password.py", line 130, in test_nb_update_password
    self.assertDictIn(expected, res)
  File "F:\86-code\suoguan\testcases\test_03NB_update_password.py", line 150, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
2021-01-26 23:51:49,661 - [test_11NB_delete_all_authorizations.py-->line:98] - INFO: 用例--【删除全部授权】---执行通过
2021-01-26 23:55:03,343 - [test_03NB_update_password.py-->line:136] - ERROR: 用例--【NB授权-管理员修改-密码】---执行失败
2021-01-26 23:55:03,343 - [test_03NB_update_password.py-->line:139] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
Traceback (most recent call last):
  File "F:\86-code\suoguan\testcases\test_03NB_update_password.py", line 132, in test_nb_update_password
    self.assertDictIn(expected, res)
  File "F:\86-code\suoguan\testcases\test_03NB_update_password.py", line 152, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
2021-01-26 23:58:54,615 - [test_02NB_new_password.py-->line:100] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-26 23:59:34,596 - [test_03NB_update_password.py-->line:136] - ERROR: 用例--【NB授权-管理员修改-密码】---执行失败
2021-01-26 23:59:34,596 - [test_03NB_update_password.py-->line:139] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
Traceback (most recent call last):
  File "F:\86-code\suoguan\testcases\test_03NB_update_password.py", line 132, in test_nb_update_password
    self.assertDictIn(expected, res)
  File "F:\86-code\suoguan\testcases\test_03NB_update_password.py", line 152, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
2021-01-27 00:07:39,750 - [test_03NB_update_password.py-->line:137] - ERROR: 用例--【NB授权-管理员修改-密码】---执行失败
2021-01-27 00:07:39,750 - [test_03NB_update_password.py-->line:140] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
Traceback (most recent call last):
  File "F:\86-code\suoguan\testcases\test_03NB_update_password.py", line 133, in test_nb_update_password
    self.assertDictIn(expected, res)
  File "F:\86-code\suoguan\testcases\test_03NB_update_password.py", line 153, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
2021-01-27 00:13:38,246 - [test_05NB_delete_the_authorized.py-->line:137] - ERROR: 用例--【NB授权-管理员修改-密码】---执行失败
2021-01-27 00:13:38,246 - [test_05NB_delete_the_authorized.py-->line:140] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
Traceback (most recent call last):
  File "F:\86-code\suoguan\testcases\test_05NB_delete_the_authorized.py", line 133, in test_nb_update_password
    self.assertDictIn(expected, res)
  File "F:\86-code\suoguan\testcases\test_05NB_delete_the_authorized.py", line 153, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
2021-01-27 00:17:19,286 - [test_05NB_delete_the_authorized.py-->line:144] - INFO: 用例--【NB_删除授权】---执行通过
2021-01-27 00:24:28,585 - [test_05NB_delete_the_authorized.py-->line:145] - INFO: 用例--【NB_删除授权】---执行通过
2021-01-27 00:29:28,844 - [test_05NB_delete_the_authorized.py-->line:147] - INFO: 用例--【NB_删除授权】---执行通过
2021-01-27 00:30:25,723 - [test_05NB_delete_the_authorized.py-->line:147] - INFO: 用例--【NB_删除授权】---执行通过
2021-01-27 00:39:29,868 - [test_06NB_grant_column_list.py-->line:83] - INFO: 用例--【NB_授权列表】---执行通过
2021-01-27 00:40:13,559 - [test_06NB_grant_column_list.py-->line:84] - INFO: 用例--【NB_授权列表】---执行通过
2021-01-27 08:21:08,184 - [test_18LK_remove_the_door.py-->line:93] - ERROR: 用例--【门锁管理-删除门锁】---执行失败
2021-01-27 08:21:08,185 - [test_18LK_remove_the_door.py-->line:96] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 0, 'message': '操作成功', 'content': {'code': 0, 'msg': 'ok', 'result': None, 'errno': 0, 'error': None, 'data': None}}
Traceback (most recent call last):
  File "F:\86-code\suoguan\testcases\test_18LK_remove_the_door.py", line 89, in test_lk_remove_the_door
    self.assertDictIn(expected, res)
  File "F:\86-code\suoguan\testcases\test_18LK_remove_the_door.py", line 109, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 0, 'message': '操作成功', 'content': {'code': 0, 'msg': 'ok', 'result': None, 'errno': 0, 'error': None, 'data': None}}
2021-01-27 08:24:38,317 - [test_18LK_remove_the_door.py-->line:93] - ERROR: 用例--【门锁管理-删除门锁】---执行失败
2021-01-27 08:24:38,317 - [test_18LK_remove_the_door.py-->line:96] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': -1, 'message': '无权限操作', 'content': ''}
Traceback (most recent call last):
  File "F:\86-code\suoguan\testcases\test_18LK_remove_the_door.py", line 89, in test_lk_remove_the_door
    self.assertDictIn(expected, res)
  File "F:\86-code\suoguan\testcases\test_18LK_remove_the_door.py", line 109, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': -1, 'message': '无权限操作', 'content': ''}
2021-01-27 08:25:20,106 - [test_18LK_remove_the_door.py-->line:100] - INFO: 用例--【门锁管理-删除门锁】---执行通过
2021-01-27 08:30:18,327 - [test_17LK_the_new_lock.py-->line:103] - INFO: 用例--【门锁管理-删除门锁】---执行通过
2021-01-27 08:37:55,337 - [test_17LK_the_new_lock.py-->line:95] - INFO: 用例--【门锁管理-删除门锁】---执行通过
2021-01-27 08:38:22,960 - [test_17LK_the_new_lock.py-->line:95] - INFO: 用例--【门锁管理-删除门锁】---执行通过
2021-01-27 08:38:38,460 - [test_18LK_remove_the_door.py-->line:100] - INFO: 用例--【门锁管理-删除门锁】---执行通过
2021-01-27 09:47:20,165 - [test_16LK_a_single_query.py-->line:93] - ERROR: 用例--【门锁管理-单条查询】---执行失败
2021-01-27 09:47:20,166 - [test_16LK_a_single_query.py-->line:96] - ERROR: {'code': 0, 'message': '操作成功'} not in {'code': 201, 'message': '设备不存在', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_16LK_a_single_query.py", line 89, in test_lk_a_single_query
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_16LK_a_single_query.py", line 109, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功'} not in {'code': 201, 'message': '设备不存在', 'content': ''}
2021-01-27 09:47:58,866 - [test_16LK_a_single_query.py-->line:93] - ERROR: 用例--【门锁管理-单条查询】---执行失败
2021-01-27 09:47:58,867 - [test_16LK_a_single_query.py-->line:96] - ERROR: {'code': 0, 'message': '操作成功'} not in {'code': 201, 'message': '设备不存在', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_16LK_a_single_query.py", line 89, in test_lk_a_single_query
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_16LK_a_single_query.py", line 109, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功'} not in {'code': 201, 'message': '设备不存在', 'content': ''}
2021-01-27 09:52:11,881 - [test_16LK_a_single_query.py-->line:93] - ERROR: 用例--【门锁管理-单条查询】---执行失败
2021-01-27 09:52:11,881 - [test_16LK_a_single_query.py-->line:96] - ERROR: {'code': 0, 'message': '操作成功'} not in {'code': 0, 'message': '操作成功。', 'content': {'lockId': '8D3C70DAA20B4204BC647768011CB17D', 'imei': '869401040694457', 'deviceId': '1fb8779bc584471e8ac31d7f20444d83', 'isTransparent': 2, 'encryptionKey': '', 'encryptionWay': 0, 'httpUrl': 'http://47.104.186.222:8006/qr/callBack', 'productId': 10038001, 'masterKey': '73d56ad97f554bbf9531a168838d2873', 'appKey': '6fBSKsMM628', 'appSecret': 'BGLMhJ94up', 'orderCount': 34, 'organizationId': '860572e690d54dfcb258c499b00c5572', 'electricity': '76', 'lockSignal': '-620', 'lastTelletTime': '2021-01-26 17:35:38', 'onlineStatus': 1, 'certCipher': None, 'type': 1, 'bluetoothType': 0, 'applicationproductsId': '66E3F4993B034E8890FEAC7EF8EB223C', 'sk': None}}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_16LK_a_single_query.py", line 89, in test_lk_a_single_query
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_16LK_a_single_query.py", line 109, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功'} not in {'code': 0, 'message': '操作成功。', 'content': {'lockId': '8D3C70DAA20B4204BC647768011CB17D', 'imei': '869401040694457', 'deviceId': '1fb8779bc584471e8ac31d7f20444d83', 'isTransparent': 2, 'encryptionKey': '', 'encryptionWay': 0, 'httpUrl': 'http://47.104.186.222:8006/qr/callBack', 'productId': 10038001, 'masterKey': '73d56ad97f554bbf9531a168838d2873', 'appKey': '6fBSKsMM628', 'appSecret': 'BGLMhJ94up', 'orderCount': 34, 'organizationId': '860572e690d54dfcb258c499b00c5572', 'electricity': '76', 'lockSignal': '-620', 'lastTelletTime': '2021-01-26 17:35:38', 'onlineStatus': 1, 'certCipher': None, 'type': 1, 'bluetoothType': 0, 'applicationproductsId': '66E3F4993B034E8890FEAC7EF8EB223C', 'sk': None}}
2021-01-27 09:52:58,533 - [test_16LK_a_single_query.py-->line:100] - INFO: 用例--【门锁管理-单条查询】---执行通过
2021-01-27 10:06:33,918 - [test_15LK_paging_list.py-->line:88] - INFO: 用例--【门锁管理-单条查询】---执行通过
2021-01-27 10:46:23,718 - [test_14NB_modify_authorization_time.py-->line:112] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-27 10:48:27,704 - [test_14NB_modify_authorization_time.py-->line:112] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-27 10:51:04,680 - [test_14NB_modify_authorization_time.py-->line:112] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-27 10:52:05,345 - [test_14NB_modify_authorization_time.py-->line:112] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-27 10:53:52,552 - [test_14NB_modify_authorization_time.py-->line:112] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-27 11:04:52,898 - [test_14NB_modify_authorization_time.py-->line:113] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-27 11:05:07,963 - [test_14NB_modify_authorization_time.py-->line:106] - ERROR: 用例--【NB授权-修改授权时间-密码】---执行失败
2021-01-27 11:05:07,963 - [test_14NB_modify_authorization_time.py-->line:109] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '门锁用户不存在', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_14NB_modify_authorization_time.py", line 102, in test_nb_new_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_14NB_modify_authorization_time.py", line 125, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '门锁用户不存在', 'content': ''}
2021-01-27 11:05:33,767 - [test_14NB_modify_authorization_time.py-->line:113] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-27 11:05:48,860 - [test_14NB_modify_authorization_time.py-->line:106] - ERROR: 用例--【NB授权-修改授权时间-密码】---执行失败
2021-01-27 11:05:48,861 - [test_14NB_modify_authorization_time.py-->line:109] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '门锁用户不存在', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_14NB_modify_authorization_time.py", line 102, in test_nb_new_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_14NB_modify_authorization_time.py", line 125, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '门锁用户不存在', 'content': ''}
2021-01-27 11:10:37,560 - [test_12NB_freezing_locks.py-->line:113] - INFO: 用例--【NB通讯-冻结门锁】---执行通过
2021-01-27 11:10:53,042 - [test_12NB_freezing_locks.py-->line:113] - INFO: 用例--【NB通讯-解冻门锁】---执行通过
2021-01-27 11:12:09,597 - [test_12NB_freezing_locks.py-->line:113] - INFO: 用例--【NB通讯-冻结门锁】---执行通过
2021-01-27 11:12:25,033 - [test_12NB_freezing_locks.py-->line:113] - INFO: 用例--【NB通讯-解冻门锁】---执行通过
2021-01-27 11:12:40,538 - [test_02NB_new_password.py-->line:100] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-27 11:13:35,731 - [test_12NB_freezing_locks.py-->line:113] - INFO: 用例--【NB通讯-冻结门锁】---执行通过
2021-01-27 11:13:51,174 - [test_12NB_freezing_locks.py-->line:113] - INFO: 用例--【NB通讯-解冻门锁】---执行通过
2021-01-27 11:16:43,346 - [test_02NB_new_password.py-->line:100] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-27 11:25:50,269 - [test_02NB_new_password.py-->line:100] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-27 11:25:50,821 - [test_02NB_new_password_01.py-->line:93] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-27 11:25:51,301 - [test_02NB_new_password_01.py-->line:93] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-27 11:25:51,768 - [test_02NB_new_password_01.py-->line:86] - ERROR: 用例--【NB授权-劫持用户新增-密码】---执行失败
2021-01-27 11:25:51,769 - [test_02NB_new_password_01.py-->line:89] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_02NB_new_password_01.py", line 82, in test_nb_new_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_02NB_new_password_01.py", line 102, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
2021-01-27 11:25:52,274 - [test_02NB_new_password_01.py-->line:93] - INFO: 用例--【NB授权-管理员新增-IC卡】---执行通过
2021-01-27 11:25:52,752 - [test_02NB_new_password_01.py-->line:93] - INFO: 用例--【NB授权-普通用户新增-IC卡】---执行通过
2021-01-27 11:25:53,219 - [test_02NB_new_password_01.py-->line:93] - INFO: 用例--【NB授权-临时用户新增-IC卡】---执行通过
2021-01-27 11:25:53,706 - [test_02NB_new_password_01.py-->line:93] - INFO: 用例--【NB授权-劫持用户新增-IC卡】---执行通过
2021-01-27 11:25:54,258 - [test_02NB_new_password_02.py-->line:118] - ERROR: 用例--【NB授权-普通用户新增-身份证本地录入】---执行失败
2021-01-27 11:25:54,258 - [test_02NB_new_password_02.py-->line:121] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_02NB_new_password_02.py", line 114, in test_nb_new_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_02NB_new_password_02.py", line 134, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
2021-01-27 11:25:54,409 - [test_03NB_update_password.py-->line:136] - ERROR: 用例--【NB授权-管理员修改-密码】---执行失败
2021-01-27 11:25:54,409 - [test_03NB_update_password.py-->line:139] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '门锁用户不存在', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_03NB_update_password.py", line 132, in test_nb_update_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_03NB_update_password.py", line 152, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '门锁用户不存在', 'content': ''}
2021-01-27 11:26:15,308 - [test_06NB_grant_column_list.py-->line:84] - INFO: 用例--【NB_授权列表】---执行通过
2021-01-27 11:26:15,877 - [test_11NB_delete_all_authorizations.py-->line:98] - INFO: 用例--【删除全部授权】---执行通过
2021-01-27 11:26:16,445 - [test_12NB_freezing_locks.py-->line:113] - INFO: 用例--【NB通讯-冻结门锁】---执行通过
2021-01-27 11:26:31,792 - [test_12NB_freezing_locks.py-->line:113] - INFO: 用例--【NB通讯-解冻门锁】---执行通过
2021-01-27 11:26:47,352 - [test_14NB_modify_authorization_time.py-->line:113] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-27 11:27:02,429 - [test_14NB_modify_authorization_time.py-->line:106] - ERROR: 用例--【NB授权-修改授权时间-密码】---执行失败
2021-01-27 11:27:02,430 - [test_14NB_modify_authorization_time.py-->line:109] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '门锁用户不存在', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_14NB_modify_authorization_time.py", line 102, in test_nb_new_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_14NB_modify_authorization_time.py", line 125, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '门锁用户不存在', 'content': ''}
2021-01-27 11:27:02,730 - [test_15LK_paging_list.py-->line:88] - INFO: 用例--【门锁管理-分页列表】---执行通过
2021-01-27 11:27:03,010 - [test_16LK_a_single_query.py-->line:100] - INFO: 用例--【门锁管理-单条查询】---执行通过
2021-01-27 11:27:03,628 - [test_17LK_the_new_lock.py-->line:95] - INFO: 用例--【门锁管理-删除门锁】---执行通过
2021-01-27 11:27:03,864 - [test_18LK_remove_the_door.py-->line:93] - ERROR: 用例--【门锁管理-删除门锁】---执行失败
2021-01-27 11:27:03,864 - [test_18LK_remove_the_door.py-->line:96] - ERROR: {'code': 0, 'message': '操作成功'} not in {'code': -1, 'message': '无权限操作', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_18LK_remove_the_door.py", line 89, in test_lk_remove_the_door
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_18LK_remove_the_door.py", line 109, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功'} not in {'code': -1, 'message': '无权限操作', 'content': ''}
2021-01-27 13:34:03,843 - [test_01register.py-->line:60] - INFO: 用例--【登录】---执行通过
2021-01-27 13:36:00,196 - [test_02NB_new_password.py-->line:85] - ERROR: 用例--【NB授权-普通用户新增-密码】---执行失败
2021-01-27 13:36:00,197 - [test_02NB_new_password.py-->line:86] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': -1, 'message': '该设备未查询到版本信息', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_02NB_new_password.py", line 81, in test_nb_new_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_02NB_new_password.py", line 98, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': -1, 'message': '该设备未查询到版本信息', 'content': ''}
2021-01-27 13:39:50,437 - [test_02NB_new_password.py-->line:85] - ERROR: 用例--【NB授权-普通用户新增-密码】---执行失败
2021-01-27 13:39:50,437 - [test_02NB_new_password.py-->line:86] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_02NB_new_password.py", line 81, in test_nb_new_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_02NB_new_password.py", line 98, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
2021-01-27 13:41:40,191 - [test_02NB_new_password.py-->line:89] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-27 14:15:04,915 - [test_11NB_delete_all_authorizations.py-->line:98] - INFO: 用例--【删除全部授权】---执行通过
2021-01-27 14:17:25,490 - [test_02NB_new_password_01.py-->line:88] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-27 14:17:25,970 - [test_02NB_new_password_01.py-->line:88] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-27 14:17:26,448 - [test_02NB_new_password_01.py-->line:84] - ERROR: 用例--【NB授权-劫持用户新增-密码】---执行失败
2021-01-27 14:17:26,448 - [test_02NB_new_password_01.py-->line:85] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_02NB_new_password_01.py", line 80, in test_nb_new_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_02NB_new_password_01.py", line 97, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
2021-01-27 14:17:26,941 - [test_02NB_new_password_01.py-->line:88] - INFO: 用例--【NB授权-管理员新增-IC卡】---执行通过
2021-01-27 14:17:27,449 - [test_02NB_new_password_01.py-->line:88] - INFO: 用例--【NB授权-普通用户新增-IC卡】---执行通过
2021-01-27 14:17:27,940 - [test_02NB_new_password_01.py-->line:88] - INFO: 用例--【NB授权-临时用户新增-IC卡】---执行通过
2021-01-27 14:17:28,466 - [test_02NB_new_password_01.py-->line:88] - INFO: 用例--【NB授权-劫持用户新增-IC卡】---执行通过
2021-01-27 14:34:23,716 - [test_02NB_new_password_02.py-->line:127] - INFO: 用例--【NB授权-管理员新增-指纹】---无需执行
2021-01-27 14:34:23,718 - [test_02NB_new_password_02.py-->line:127] - INFO: 用例--【NB授权-普通用户新增-指纹】---无需执行
2021-01-27 14:34:23,720 - [test_02NB_new_password_02.py-->line:127] - INFO: 用例--【NB授权-临时用户新增-指纹】---无需执行
2021-01-27 14:34:23,722 - [test_02NB_new_password_02.py-->line:127] - INFO: 用例--【NB授权-劫持用户新增-指纹】---无需执行
2021-01-27 14:34:43,350 - [test_02NB_new_password_02.py-->line:125] - INFO: 用例--【NB授权-管理员新增-指纹】---执行通过
2021-01-27 14:34:43,714 - [test_02NB_new_password_02.py-->line:125] - INFO: 用例--【NB授权-普通用户新增-指纹】---执行通过
2021-01-27 14:34:44,076 - [test_02NB_new_password_02.py-->line:125] - INFO: 用例--【NB授权-临时用户新增-指纹】---执行通过
2021-01-27 14:34:44,441 - [test_02NB_new_password_02.py-->line:125] - INFO: 用例--【NB授权-劫持用户新增-指纹】---执行通过
2021-01-27 14:35:36,245 - [test_02NB_new_password_02.py-->line:125] - INFO: 用例--【NB授权-管理员新增-指纹】---执行通过
2021-01-27 14:35:36,611 - [test_02NB_new_password_02.py-->line:125] - INFO: 用例--【NB授权-普通用户新增-指纹】---执行通过
2021-01-27 14:35:37,010 - [test_02NB_new_password_02.py-->line:125] - INFO: 用例--【NB授权-临时用户新增-指纹】---执行通过
2021-01-27 14:35:37,389 - [test_02NB_new_password_02.py-->line:125] - INFO: 用例--【NB授权-劫持用户新增-指纹】---执行通过
2021-01-27 14:51:01,996 - [test_02NB_new_password_02.py-->line:125] - INFO: 用例--【NB授权-管理员新增-指纹】---执行通过
2021-01-27 14:51:02,344 - [test_02NB_new_password_02.py-->line:125] - INFO: 用例--【NB授权-普通用户新增-指纹】---执行通过
2021-01-27 14:51:02,699 - [test_02NB_new_password_02.py-->line:125] - INFO: 用例--【NB授权-临时用户新增-指纹】---执行通过
2021-01-27 14:51:03,046 - [test_02NB_new_password_02.py-->line:125] - INFO: 用例--【NB授权-劫持用户新增-指纹】---执行通过
2021-01-27 14:51:29,833 - [test_02NB_new_password_02.py-->line:125] - INFO: 用例--【NB授权-管理员新增-指纹】---执行通过
2021-01-27 14:51:30,334 - [test_02NB_new_password_02.py-->line:125] - INFO: 用例--【NB授权-普通用户新增-指纹】---执行通过
2021-01-27 14:51:30,692 - [test_02NB_new_password_02.py-->line:125] - INFO: 用例--【NB授权-临时用户新增-指纹】---执行通过
2021-01-27 14:51:31,042 - [test_02NB_new_password_02.py-->line:125] - INFO: 用例--【NB授权-劫持用户新增-指纹】---执行通过
2021-01-27 14:52:49,189 - [test_11NB_delete_all_authorizations.py-->line:98] - INFO: 用例--【删除全部授权】---执行通过
2021-01-27 14:53:13,889 - [test_02NB_new_password_02.py-->line:125] - INFO: 用例--【NB授权-管理员新增-指纹】---执行通过
2021-01-27 14:53:14,388 - [test_02NB_new_password_02.py-->line:125] - INFO: 用例--【NB授权-普通用户新增-指纹】---执行通过
2021-01-27 14:53:14,901 - [test_02NB_new_password_02.py-->line:125] - INFO: 用例--【NB授权-临时用户新增-指纹】---执行通过
2021-01-27 14:53:15,298 - [test_02NB_new_password_02.py-->line:125] - INFO: 用例--【NB授权-劫持用户新增-指纹】---执行通过
2021-01-27 14:57:24,416 - [test_02NB_new_password_02.py-->line:121] - INFO: 用例--【NB授权-管理员新增-指纹】---执行通过
2021-01-27 14:57:24,792 - [test_02NB_new_password_02.py-->line:121] - INFO: 用例--【NB授权-普通用户新增-指纹】---执行通过
2021-01-27 14:57:25,148 - [test_02NB_new_password_02.py-->line:121] - INFO: 用例--【NB授权-临时用户新增-指纹】---执行通过
2021-01-27 14:57:25,513 - [test_02NB_new_password_02.py-->line:121] - INFO: 用例--【NB授权-劫持用户新增-指纹】---执行通过
2021-01-27 14:58:31,973 - [test_02NB_new_password.py-->line:90] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-27 15:06:05,380 - [test_02NB_new_password_02.py-->line:118] - INFO: 用例--【NB授权-管理员新增-指纹】---执行通过
2021-01-27 15:06:05,757 - [test_02NB_new_password_02.py-->line:118] - INFO: 用例--【NB授权-普通用户新增-指纹】---执行通过
2021-01-27 15:06:06,122 - [test_02NB_new_password_02.py-->line:118] - INFO: 用例--【NB授权-临时用户新增-指纹】---执行通过
2021-01-27 15:06:06,497 - [test_02NB_new_password_02.py-->line:118] - INFO: 用例--【NB授权-劫持用户新增-指纹】---执行通过
2021-01-27 15:07:38,715 - [test_02NB_new_password_01.py-->line:88] - INFO: 用例--【NB授权-管理员用户新增-密码】---执行通过
2021-01-27 15:07:39,162 - [test_02NB_new_password_01.py-->line:88] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-27 15:07:39,645 - [test_02NB_new_password_01.py-->line:88] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-27 15:07:40,112 - [test_02NB_new_password_01.py-->line:84] - ERROR: 用例--【NB授权-劫持用户新增-密码】---执行失败
2021-01-27 15:07:40,113 - [test_02NB_new_password_01.py-->line:85] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_02NB_new_password_01.py", line 80, in test_nb_new_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_02NB_new_password_01.py", line 101, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
2021-01-27 15:07:40,619 - [test_02NB_new_password_01.py-->line:88] - INFO: 用例--【NB授权-管理员新增-IC卡】---执行通过
2021-01-27 15:07:41,081 - [test_02NB_new_password_01.py-->line:88] - INFO: 用例--【NB授权-普通用户新增-IC卡】---执行通过
2021-01-27 15:07:41,566 - [test_02NB_new_password_01.py-->line:88] - INFO: 用例--【NB授权-临时用户新增-IC卡】---执行通过
2021-01-27 15:07:42,048 - [test_02NB_new_password_01.py-->line:88] - INFO: 用例--【NB授权-劫持用户新增-IC卡】---执行通过
2021-01-27 15:47:52,663 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权_普通用户_时间过期】---执行通过
2021-01-27 15:47:53,128 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权_普通用户_有效次数】---执行通过
2021-01-27 15:47:53,619 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权_临时用户_时间过期】---执行通过
2021-01-27 15:47:54,112 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权_临时用户_有效次数】---执行通过
2021-01-27 15:47:54,600 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权-待生效】---执行通过
2021-01-27 15:47:55,079 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权-有效次数-有效次数使用不能再次使用】---执行通过
2021-01-27 15:51:48,770 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权_普通用户_时间过期】---执行通过
2021-01-27 15:52:01,608 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权_普通用户_有效次数】---执行通过
2021-01-27 15:52:03,891 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权_临时用户_时间过期】---执行通过
2021-01-27 15:52:05,561 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权_临时用户_有效次数】---执行通过
2021-01-27 15:52:06,847 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权-待生效】---执行通过
2021-01-27 15:52:08,480 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权-有效次数-有效次数使用不能再次使用】---执行通过
2021-01-27 15:52:41,625 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权_普通用户_时间过期】---执行通过
2021-01-27 15:52:42,135 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权_普通用户_有效次数】---执行通过
2021-01-27 15:52:42,612 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权_临时用户_时间过期】---执行通过
2021-01-27 15:52:43,062 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权_临时用户_有效次数】---执行通过
2021-01-27 15:52:43,526 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权-待生效】---执行通过
2021-01-27 15:52:43,999 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权-有效次数-有效次数使用不能再次使用】---执行通过
2021-01-27 15:53:36,468 - [test_11NB_delete_all_authorizations.py-->line:98] - INFO: 用例--【删除全部授权】---执行通过
2021-01-27 15:53:57,075 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权_普通用户_时间过期】---执行通过
2021-01-27 15:53:57,526 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权_普通用户_有效次数】---执行通过
2021-01-27 15:53:57,947 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权_临时用户_时间过期】---执行通过
2021-01-27 15:53:58,412 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权_临时用户_有效次数】---执行通过
2021-01-27 15:53:58,909 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权-待生效】---执行通过
2021-01-27 15:53:59,400 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权-有效次数-有效次数使用不能再次使用】---执行通过
2021-01-27 16:00:56,323 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权_普通用户_时间过期】---执行通过
2021-01-27 16:00:56,811 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权_普通用户_有效次数】---执行通过
2021-01-27 16:00:57,280 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权_临时用户_时间过期】---执行通过
2021-01-27 16:00:57,759 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权_临时用户_有效次数】---执行通过
2021-01-27 16:00:58,226 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权-待生效】---执行通过
2021-01-27 16:00:58,710 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权-临时用户-有效次数-有效次数使用不能再次使用】---执行通过
2021-01-27 16:00:59,157 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权-普通用户-有效次数-有效次数使用不能再次使用】---执行通过
2021-01-27 16:03:09,645 - [test_11NB_delete_all_authorizations.py-->line:98] - INFO: 用例--【删除全部授权】---执行通过
2021-01-27 16:27:53,031 - [test_02NB_new_password_04.py-->line:121] - INFO: 用例--【NB授权-普通用户新增-IC本地录入】---执行通过
2021-01-27 16:28:23,482 - [test_02NB_new_password_04.py-->line:121] - INFO: 用例--【NB授权-普通用户新增-指纹本地录入】---执行通过
2021-01-27 16:28:53,964 - [test_02NB_new_password_04.py-->line:121] - INFO: 用例--【NB授权-临时用户新增-IC本地录入】---执行通过
2021-01-27 16:29:24,439 - [test_02NB_new_password_04.py-->line:121] - INFO: 用例--【NB授权-临时用户新增-指纹本地录入】---执行通过
2021-01-27 16:29:54,889 - [test_02NB_new_password_04.py-->line:115] - ERROR: 用例--【NB授权-普通用户新增-身份证本地录入】---执行失败
2021-01-27 16:29:54,889 - [test_02NB_new_password_04.py-->line:118] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_02NB_new_password_04.py", line 111, in test_nb_new_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_02NB_new_password_04.py", line 133, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
2021-01-27 16:30:25,351 - [test_02NB_new_password_04.py-->line:115] - ERROR: 用例--【NB授权-普通用户新增-非身份证本地校验】---执行失败
2021-01-27 16:30:25,352 - [test_02NB_new_password_04.py-->line:118] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_02NB_new_password_04.py", line 111, in test_nb_new_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_02NB_new_password_04.py", line 133, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
2021-01-27 16:30:55,823 - [test_02NB_new_password_04.py-->line:115] - ERROR: 用例--【NB授权-普通用户新增-身份证本地录入】---执行失败
2021-01-27 16:30:55,824 - [test_02NB_new_password_04.py-->line:118] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_02NB_new_password_04.py", line 111, in test_nb_new_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_02NB_new_password_04.py", line 133, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
2021-01-27 16:36:33,631 - [test_02NB_new_password_04.py-->line:127] - INFO: 用例--【NB授权-普通用户新增-IC本地录入】---执行通过
2021-01-27 16:37:19,093 - [test_02NB_new_password_04.py-->line:127] - INFO: 用例--【NB授权-普通用户新增-指纹本地录入】---执行通过
2021-01-27 16:37:41,584 - [test_02NB_new_password_04.py-->line:127] - INFO: 用例--【NB授权-临时用户新增-IC本地录入】---执行通过
2021-01-27 16:38:27,070 - [test_02NB_new_password_04.py-->line:127] - INFO: 用例--【NB授权-临时用户新增-指纹本地录入】---执行通过
2021-01-27 16:38:49,538 - [test_02NB_new_password_04.py-->line:121] - ERROR: 用例--【NB授权-普通用户新增-身份证本地录入】---执行失败
2021-01-27 16:38:49,538 - [test_02NB_new_password_04.py-->line:124] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_02NB_new_password_04.py", line 117, in test_nb_new_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_02NB_new_password_04.py", line 139, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
2021-01-27 16:39:11,998 - [test_02NB_new_password_04.py-->line:121] - ERROR: 用例--【NB授权-普通用户新增-非身份证本地校验】---执行失败
2021-01-27 16:39:11,999 - [test_02NB_new_password_04.py-->line:124] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_02NB_new_password_04.py", line 117, in test_nb_new_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_02NB_new_password_04.py", line 139, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
2021-01-27 16:39:34,469 - [test_02NB_new_password_04.py-->line:121] - ERROR: 用例--【NB授权-普通用户新增-身份证本地录入】---执行失败
2021-01-27 16:39:34,469 - [test_02NB_new_password_04.py-->line:124] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_02NB_new_password_04.py", line 117, in test_nb_new_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_02NB_new_password_04.py", line 139, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
2021-01-27 16:46:52,805 - [test_02NB_new_password_04.py-->line:113] - ERROR: 用例--【NB授权-普通用户新增-非身份证本地校验】---执行失败
2021-01-27 16:46:52,806 - [test_02NB_new_password_04.py-->line:116] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_02NB_new_password_04.py", line 109, in test_nb_new_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_02NB_new_password_04.py", line 140, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
2021-01-27 16:46:53,247 - [test_02NB_new_password_04.py-->line:113] - ERROR: 用例--【NB授权-普通用户新增-身份证本地录入】---执行失败
2021-01-27 16:46:53,248 - [test_02NB_new_password_04.py-->line:116] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_02NB_new_password_04.py", line 109, in test_nb_new_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_02NB_new_password_04.py", line 140, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
2021-01-27 16:47:16,910 - [test_02NB_new_password_04.py-->line:113] - ERROR: 用例--【NB授权-普通用户新增-非身份证本地校验】---执行失败
2021-01-27 16:47:16,911 - [test_02NB_new_password_04.py-->line:116] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_02NB_new_password_04.py", line 109, in test_nb_new_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_02NB_new_password_04.py", line 140, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
2021-01-27 16:47:17,384 - [test_02NB_new_password_04.py-->line:113] - ERROR: 用例--【NB授权-普通用户新增-身份证本地录入】---执行失败
2021-01-27 16:47:17,385 - [test_02NB_new_password_04.py-->line:116] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_02NB_new_password_04.py", line 109, in test_nb_new_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_02NB_new_password_04.py", line 140, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
2021-01-27 16:48:21,460 - [test_02NB_new_password_04.py-->line:119] - INFO: 用例--【NB授权-普通用户新增-非身份证本地校验】---执行通过
2021-01-27 16:48:43,946 - [test_02NB_new_password_04.py-->line:119] - INFO: 用例--【NB授权-普通用户新增-身份证本地录入】---执行通过
2021-01-27 16:55:18,387 - [test_11NB_delete_all_authorizations.py-->line:98] - INFO: 用例--【删除全部授权】---执行通过
2021-01-27 16:55:46,496 - [test_02NB_new_password_04.py-->line:119] - INFO: 用例--【NB授权-普通用户新增-非身份证本地校验】---执行通过
2021-01-27 16:56:08,957 - [test_02NB_new_password_04.py-->line:119] - INFO: 用例--【NB授权-普通用户新增-身份证本地录入】---执行通过
2021-01-27 17:02:33,129 - [test_11NB_delete_all_authorizations.py-->line:98] - INFO: 用例--【删除全部授权】---执行通过
2021-01-27 17:03:04,665 - [test_02NB_new_password_04.py-->line:119] - INFO: 用例--【NB授权-普通用户新增-IC本地录入】---执行通过
2021-01-27 17:03:27,222 - [test_02NB_new_password_04.py-->line:119] - INFO: 用例--【NB授权-普通用户新增-指纹本地录入】---执行通过
2021-01-27 17:04:12,730 - [test_02NB_new_password_04.py-->line:119] - INFO: 用例--【NB授权-临时用户新增-IC本地录入】---执行通过
2021-01-27 17:04:35,192 - [test_02NB_new_password_04.py-->line:119] - INFO: 用例--【NB授权-临时用户新增-指纹本地录入】---执行通过
2021-01-27 17:05:20,655 - [test_02NB_new_password_04.py-->line:119] - INFO: 用例--【NB授权-普通用户新增-身份证本地录入】---执行通过
2021-01-27 17:05:43,121 - [test_02NB_new_password_04.py-->line:119] - INFO: 用例--【NB授权-普通用户新增-非身份证本地校验】---执行通过
2021-01-27 17:30:28,089 - [test_05NB_delete_the_authorized.py-->line:106] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-27 17:30:50,175 - [test_05NB_delete_the_authorized.py-->line:100] - ERROR: 用例--【NB_删除授权】---执行失败
2021-01-27 17:30:50,175 - [test_05NB_delete_the_authorized.py-->line:103] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '该授权信息不存在', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_05NB_delete_the_authorized.py", line 96, in test_nb_delete_the_authorized
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_05NB_delete_the_authorized.py", line 127, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '该授权信息不存在', 'content': ''}
2021-01-27 17:32:15,904 - [test_05NB_delete_the_authorized.py-->line:106] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-27 17:32:37,983 - [test_05NB_delete_the_authorized.py-->line:100] - ERROR: 用例--【NB_删除授权】---执行失败
2021-01-27 17:32:37,983 - [test_05NB_delete_the_authorized.py-->line:103] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '该授权信息不存在', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_05NB_delete_the_authorized.py", line 96, in test_nb_delete_the_authorized
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_05NB_delete_the_authorized.py", line 127, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '该授权信息不存在', 'content': ''}
2021-01-27 17:34:10,880 - [test_05NB_delete_the_authorized.py-->line:106] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-27 17:36:01,432 - [test_05NB_delete_the_authorized.py-->line:106] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-27 17:38:56,787 - [test_05NB_delete_the_authorized.py-->line:107] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-27 17:39:18,877 - [test_05NB_delete_the_authorized.py-->line:101] - ERROR: 用例--【NB_删除授权】---执行失败
2021-01-27 17:39:18,877 - [test_05NB_delete_the_authorized.py-->line:104] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '该授权信息不存在', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_05NB_delete_the_authorized.py", line 97, in test_nb_delete_the_authorized
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_05NB_delete_the_authorized.py", line 128, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '该授权信息不存在', 'content': ''}
2021-01-27 17:40:11,365 - [test_05NB_delete_the_authorized.py-->line:108] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-27 17:40:33,440 - [test_05NB_delete_the_authorized.py-->line:102] - ERROR: 用例--【NB_删除授权】---执行失败
2021-01-27 17:40:33,441 - [test_05NB_delete_the_authorized.py-->line:105] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '该授权信息不存在', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_05NB_delete_the_authorized.py", line 98, in test_nb_delete_the_authorized
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_05NB_delete_the_authorized.py", line 129, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '该授权信息不存在', 'content': ''}
2021-01-27 17:44:36,815 - [test_05NB_delete_the_authorized.py-->line:109] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-27 17:45:18,821 - [test_05NB_delete_the_authorized.py-->line:103] - ERROR: 用例--【NB_删除授权】---执行失败
2021-01-27 17:45:18,824 - [test_05NB_delete_the_authorized.py-->line:106] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '该授权信息不存在', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_05NB_delete_the_authorized.py", line 99, in test_nb_delete_the_authorized
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_05NB_delete_the_authorized.py", line 130, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '该授权信息不存在', 'content': ''}
2021-01-27 18:09:12,134 - [test_06NB_grant_column_list.py-->line:78] - INFO: 用例--【NB_授权列表】---执行通过
2021-01-27 18:11:05,797 - [test_06NB_grant_column_list.py-->line:77] - INFO: 用例--【NB_授权列表】---执行通过
2021-01-27 18:15:09,773 - [test_12NB_freezing_locks.py-->line:113] - INFO: 用例--【NB通讯-冻结门锁】---执行通过
2021-01-27 18:15:25,308 - [test_12NB_freezing_locks.py-->line:113] - INFO: 用例--【NB通讯-解冻门锁】---执行通过
2021-01-27 18:21:42,837 - [test_12NB_freezing_locks.py-->line:111] - INFO: 用例--【NB通讯-冻结门锁】---执行通过
2021-01-27 18:21:58,367 - [test_12NB_freezing_locks.py-->line:111] - INFO: 用例--【NB通讯-解冻门锁】---执行通过
2021-01-27 18:25:21,699 - [test_12NB_freezing_locks.py-->line:79] - INFO: 用例--【NB通讯-冻结门锁】---执行通过
2021-01-27 18:25:37,126 - [test_12NB_freezing_locks.py-->line:79] - INFO: 用例--【NB通讯-解冻门锁】---执行通过
2021-01-27 20:04:43,057 - [test_05NB_delete_the_authorized.py-->line:113] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-27 20:07:34,466 - [test_05NB_delete_the_authorized.py-->line:113] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-27 20:07:35,537 - [test_05NB_delete_the_authorized.py-->line:107] - ERROR: 用例--【NB_删除授权】---执行失败
2021-01-27 20:07:35,537 - [test_05NB_delete_the_authorized.py-->line:110] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '该授权信息不存在', 'content': ''}
Traceback (most recent call last):
  File "F:\86-code\suoguan\testcases\test_05NB_delete_the_authorized.py", line 103, in test_nb_delete_the_authorized
    self.assertDictIn(expected, res)
  File "F:\86-code\suoguan\testcases\test_05NB_delete_the_authorized.py", line 134, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '该授权信息不存在', 'content': ''}
2021-01-27 20:10:01,645 - [test_05NB_delete_the_authorized.py-->line:111] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-27 20:10:02,702 - [test_05NB_delete_the_authorized.py-->line:105] - ERROR: 用例--【NB_删除授权】---执行失败
2021-01-27 20:10:02,702 - [test_05NB_delete_the_authorized.py-->line:108] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '该授权信息不存在', 'content': ''}
Traceback (most recent call last):
  File "F:\86-code\suoguan\testcases\test_05NB_delete_the_authorized.py", line 101, in test_nb_delete_the_authorized
    self.assertDictIn(expected, res)
  File "F:\86-code\suoguan\testcases\test_05NB_delete_the_authorized.py", line 132, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '该授权信息不存在', 'content': ''}
2021-01-27 20:10:55,101 - [test_05NB_delete_the_authorized.py-->line:112] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-27 20:10:56,157 - [test_05NB_delete_the_authorized.py-->line:106] - ERROR: 用例--【NB_删除授权】---执行失败
2021-01-27 20:10:56,157 - [test_05NB_delete_the_authorized.py-->line:109] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '该授权信息不存在', 'content': ''}
Traceback (most recent call last):
  File "F:\86-code\suoguan\testcases\test_05NB_delete_the_authorized.py", line 102, in test_nb_delete_the_authorized
    self.assertDictIn(expected, res)
  File "F:\86-code\suoguan\testcases\test_05NB_delete_the_authorized.py", line 133, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '该授权信息不存在', 'content': ''}
2021-01-27 20:12:39,877 - [test_05NB_delete_the_authorized.py-->line:112] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-27 20:12:40,957 - [test_05NB_delete_the_authorized.py-->line:106] - ERROR: 用例--【NB_删除授权】---执行失败
2021-01-27 20:12:40,957 - [test_05NB_delete_the_authorized.py-->line:109] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '该授权信息不存在', 'content': ''}
Traceback (most recent call last):
  File "F:\86-code\suoguan\testcases\test_05NB_delete_the_authorized.py", line 102, in test_nb_delete_the_authorized
    self.assertDictIn(expected, res)
  File "F:\86-code\suoguan\testcases\test_05NB_delete_the_authorized.py", line 133, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '该授权信息不存在', 'content': ''}
2021-01-27 20:15:04,273 - [test_05NB_delete_the_authorized.py-->line:112] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-27 20:15:05,354 - [test_05NB_delete_the_authorized.py-->line:106] - ERROR: 用例--【NB_删除授权】---执行失败
2021-01-27 20:15:05,354 - [test_05NB_delete_the_authorized.py-->line:109] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '该授权信息不存在', 'content': ''}
Traceback (most recent call last):
  File "F:\86-code\suoguan\testcases\test_05NB_delete_the_authorized.py", line 102, in test_nb_delete_the_authorized
    self.assertDictIn(expected, res)
  File "F:\86-code\suoguan\testcases\test_05NB_delete_the_authorized.py", line 133, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '该授权信息不存在', 'content': ''}
2021-01-27 20:22:24,823 - [test_05NB_delete_the_authorized.py-->line:112] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-27 20:22:26,227 - [test_05NB_delete_the_authorized.py-->line:112] - INFO: 用例--【NB_删除授权】---执行通过
2021-01-27 20:38:42,319 - [test_05NB_delete_the_authorized.py-->line:111] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-27 20:39:04,712 - [test_05NB_delete_the_authorized.py-->line:111] - INFO: 用例--【NB_删除授权】---执行通过
2021-01-27 20:39:46,350 - [test_05NB_delete_the_authorized.py-->line:111] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-27 20:40:08,738 - [test_05NB_delete_the_authorized.py-->line:111] - INFO: 用例--【NB_删除授权】---执行通过
2021-01-27 21:18:03,919 - [test_05NB_delete_the_authorized.py-->line:111] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-27 21:18:26,321 - [test_05NB_delete_the_authorized.py-->line:111] - INFO: 用例--【NB_删除授权】---执行通过
2021-01-27 21:18:48,822 - [test_05NB_delete_the_authorized.py-->line:111] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-27 21:19:11,210 - [test_05NB_delete_the_authorized.py-->line:111] - INFO: 用例--【NB_删除授权】---执行通过
2021-01-27 21:19:33,693 - [test_05NB_delete_the_authorized.py-->line:111] - INFO: 用例--【NB授权-管理用户新增-密码】---执行通过
2021-01-27 21:19:56,094 - [test_05NB_delete_the_authorized.py-->line:111] - INFO: 用例--【NB_删除授权】---执行通过
2021-01-27 21:43:18,337 - [test_05NB_delete_the_authorized_02.py-->line:115] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-27 21:43:40,734 - [test_05NB_delete_the_authorized_02.py-->line:115] - INFO: 用例--【NB_删除授权】---执行通过
2021-01-27 21:44:03,266 - [test_05NB_delete_the_authorized_02.py-->line:115] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-27 21:44:15,864 - [test_05NB_delete_the_authorized_02.py-->line:115] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-27 21:44:38,286 - [test_05NB_delete_the_authorized_02.py-->line:115] - INFO: 用例--【NB_删除授权】---执行通过
2021-01-27 21:46:20,805 - [test_05NB_delete_the_authorized_02.py-->line:115] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-27 21:46:42,872 - [test_05NB_delete_the_authorized_02.py-->line:109] - ERROR: 用例--【NB_删除授权】---执行失败
2021-01-27 21:46:42,872 - [test_05NB_delete_the_authorized_02.py-->line:112] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '该授权信息不存在', 'content': ''}
Traceback (most recent call last):
  File "F:\86-code\suoguan\testcases\test_05NB_delete_the_authorized_02.py", line 105, in test_nb_delete_the_authorized
    self.assertDictIn(expected, res)
  File "F:\86-code\suoguan\testcases\test_05NB_delete_the_authorized_02.py", line 136, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '该授权信息不存在', 'content': ''}
2021-01-27 21:48:14,626 - [test_11NB_delete_all_authorizations.py-->line:90] - INFO: 用例--【删除全部授权】---执行通过
2021-01-27 21:50:13,209 - [test_11NB_delete_all_authorizations.py-->line:90] - INFO: 用例--【删除全部授权】---执行通过
2021-01-27 21:51:02,997 - [test_05NB_delete_the_authorized_02.py-->line:115] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-27 21:51:25,442 - [test_05NB_delete_the_authorized_02.py-->line:115] - INFO: 用例--【NB授权-临时用户新增-IC卡】---执行通过
2021-01-27 21:51:47,573 - [test_05NB_delete_the_authorized_02.py-->line:109] - ERROR: 用例--【NB_删除授权】---执行失败
2021-01-27 21:51:47,573 - [test_05NB_delete_the_authorized_02.py-->line:112] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '该授权信息不存在', 'content': ''}
Traceback (most recent call last):
  File "F:\86-code\suoguan\testcases\test_05NB_delete_the_authorized_02.py", line 105, in test_nb_delete_the_authorized
    self.assertDictIn(expected, res)
  File "F:\86-code\suoguan\testcases\test_05NB_delete_the_authorized_02.py", line 136, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '该授权信息不存在', 'content': ''}
2021-01-27 21:57:11,788 - [test_11NB_delete_all_authorizations.py-->line:90] - INFO: 用例--【删除全部授权】---执行通过
2021-01-27 21:57:30,949 - [test_05NB_delete_the_authorized_02.py-->line:115] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-27 21:57:53,375 - [test_05NB_delete_the_authorized_02.py-->line:115] - INFO: 用例--【NB授权-临时用户新增-IC卡】---执行通过
2021-01-27 21:58:15,792 - [test_05NB_delete_the_authorized_02.py-->line:115] - INFO: 用例--【NB_删除授权】---执行通过
2021-01-27 21:59:04,178 - [test_06NB_grant_column_list.py-->line:76] - INFO: 用例--【NB_授权列表】---执行通过
2021-01-27 22:20:03,566 - [test_07NB_authorization_list_details.py-->line:116] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-27 22:20:26,014 - [test_07NB_authorization_list_details.py-->line:116] - INFO: 用例--【NB授权-临时用户新增-IC卡】---执行通过
2021-01-27 22:20:48,533 - [test_07NB_authorization_list_details.py-->line:116] - INFO: 用例--【NB_删除授权】---执行通过
2021-01-27 22:23:50,311 - [test_11NB_delete_all_authorizations.py-->line:90] - INFO: 用例--【删除全部授权】---执行通过
2021-01-27 22:24:18,701 - [test_07NB_authorization_list_details.py-->line:116] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-27 22:24:41,211 - [test_07NB_authorization_list_details.py-->line:116] - INFO: 用例--【NB授权-临时用户新增-IC卡】---执行通过
2021-01-27 22:25:03,779 - [test_07NB_authorization_list_details.py-->line:116] - INFO: 用例--【NB_删除授权】---执行通过
2021-01-27 22:27:34,081 - [test_11NB_delete_all_authorizations.py-->line:90] - INFO: 用例--【删除全部授权】---执行通过
2021-01-27 22:28:01,385 - [test_07NB_authorization_list_details.py-->line:117] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-27 22:28:23,866 - [test_07NB_authorization_list_details.py-->line:117] - INFO: 用例--【NB授权-临时用户新增-IC卡】---执行通过
2021-01-27 22:28:46,035 - [test_07NB_authorization_list_details.py-->line:111] - ERROR: 用例--【NB授权-授权列表详情】---执行失败
2021-01-27 22:28:46,035 - [test_07NB_authorization_list_details.py-->line:114] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': -1, 'message': '该用户信息不存在', 'content': ''}
Traceback (most recent call last):
  File "F:\86-code\suoguan\testcases\test_07NB_authorization_list_details.py", line 107, in test_nb_authorization_list_details
    self.assertDictIn(expected, res)
  File "F:\86-code\suoguan\testcases\test_07NB_authorization_list_details.py", line 138, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': -1, 'message': '该用户信息不存在', 'content': ''}
2021-01-27 22:28:46,450 - [test_07NB_authorization_list_details.py-->line:117] - INFO: 用例--【NB_删除授权】---执行通过
2021-01-27 22:30:17,400 - [test_07NB_authorization_list_details.py-->line:117] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-27 22:30:39,871 - [test_07NB_authorization_list_details.py-->line:117] - INFO: 用例--【NB授权-临时用户新增-IC卡】---执行通过
2021-01-27 22:31:02,103 - [test_07NB_authorization_list_details.py-->line:117] - INFO: 用例--【NB授权-授权列表详情】---执行通过
2021-01-27 22:31:24,564 - [test_07NB_authorization_list_details.py-->line:117] - INFO: 用例--【NB_删除授权】---执行通过
2021-01-27 22:55:44,913 - [test_09NB_freeze_authorization.py-->line:116] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-27 22:56:07,592 - [test_09NB_freeze_authorization.py-->line:110] - ERROR: 用例--【NB通讯-冻结授权】---执行失败
2021-01-27 22:56:07,592 - [test_09NB_freeze_authorization.py-->line:113] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': -1, 'message': '无权限操作', 'content': ''}
Traceback (most recent call last):
  File "F:\86-code\suoguan\testcases\test_09NB_freeze_authorization.py", line 106, in test_nb_authorization_list_details
    self.assertDictIn(expected, res)
  File "F:\86-code\suoguan\testcases\test_09NB_freeze_authorization.py", line 137, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': -1, 'message': '无权限操作', 'content': ''}
2021-01-27 22:56:07,667 - [test_09NB_freeze_authorization.py-->line:110] - ERROR: 用例--【NB_删除授权】---执行失败
2021-01-27 22:56:07,667 - [test_09NB_freeze_authorization.py-->line:113] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '该授权信息不存在', 'content': ''}
Traceback (most recent call last):
  File "F:\86-code\suoguan\testcases\test_09NB_freeze_authorization.py", line 106, in test_nb_authorization_list_details
    self.assertDictIn(expected, res)
  File "F:\86-code\suoguan\testcases\test_09NB_freeze_authorization.py", line 137, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '该授权信息不存在', 'content': ''}
2021-01-27 23:01:25,497 - [test_11NB_delete_all_authorizations.py-->line:90] - INFO: 用例--【删除全部授权】---执行通过
2021-01-27 23:03:51,307 - [test_09NB_freeze_authorization.py-->line:119] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-27 23:04:13,782 - [test_09NB_freeze_authorization.py-->line:119] - INFO: 用例--【NB授权-临时用户新增-IC卡】---执行通过
2021-01-27 23:04:36,290 - [test_09NB_freeze_authorization.py-->line:119] - INFO: 用例--【NB通讯-冻结授权】---执行通过
2021-01-27 23:04:58,710 - [test_09NB_freeze_authorization.py-->line:119] - INFO: 用例--【NB_删除授权】---执行通过
2021-01-27 23:10:33,930 - [test_09NB_freeze_authorization.py-->line:122] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-27 23:10:56,405 - [test_09NB_freeze_authorization.py-->line:122] - INFO: 用例--【NB授权-临时用户新增-IC卡】---执行通过
2021-01-27 23:11:18,882 - [test_09NB_freeze_authorization.py-->line:122] - INFO: 用例--【NB通讯-冻结授权】---执行通过
2021-01-27 23:11:41,306 - [test_09NB_freeze_authorization.py-->line:122] - INFO: 用例--【NB_删除授权】---执行通过
2021-01-27 23:15:28,906 - [test_11NB_delete_all_authorizations.py-->line:90] - INFO: 用例--【删除全部授权】---执行通过
2021-01-27 23:15:55,498 - [test_09NB_freeze_authorization.py-->line:122] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-27 23:16:17,981 - [test_09NB_freeze_authorization.py-->line:122] - INFO: 用例--【NB授权-临时用户新增-IC卡】---执行通过
2021-01-27 23:16:40,467 - [test_09NB_freeze_authorization.py-->line:122] - INFO: 用例--【NB通讯-冻结授权】---执行通过
2021-01-27 23:17:02,835 - [test_09NB_freeze_authorization.py-->line:122] - INFO: 用例--【NB_删除授权】---执行通过
2021-01-27 23:18:05,572 - [test_11NB_delete_all_authorizations.py-->line:90] - INFO: 用例--【删除全部授权】---执行通过
2021-01-27 23:19:09,843 - [test_09NB_freeze_authorization.py-->line:122] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-27 23:19:32,322 - [test_09NB_freeze_authorization.py-->line:122] - INFO: 用例--【NB授权-临时用户新增-IC卡】---执行通过
2021-01-27 23:19:54,812 - [test_09NB_freeze_authorization.py-->line:122] - INFO: 用例--【NB通讯-冻结授权】---执行通过
2021-01-27 23:20:17,288 - [test_09NB_freeze_authorization.py-->line:122] - INFO: 用例--【NB通讯-解冻冻结】---执行通过
2021-01-27 23:20:39,705 - [test_09NB_freeze_authorization.py-->line:122] - INFO: 用例--【NB_删除授权】---执行通过
2021-01-27 23:21:42,842 - [test_09NB_freeze_authorization.py-->line:122] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-27 23:23:13,018 - [test_09NB_freeze_authorization.py-->line:122] - INFO: 用例--【NB授权-临时用户新增-IC卡】---执行通过
2021-01-27 23:26:10,373 - [test_09NB_freeze_authorization.py-->line:122] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-27 23:26:15,880 - [test_09NB_freeze_authorization.py-->line:122] - INFO: 用例--【NB授权-临时用户新增-IC卡】---执行通过
2021-01-27 23:26:21,397 - [test_09NB_freeze_authorization.py-->line:122] - INFO: 用例--【NB通讯-冻结授权】---执行通过
2021-01-27 23:26:26,863 - [test_09NB_freeze_authorization.py-->line:122] - INFO: 用例--【NB通讯-解冻冻结】---执行通过
2021-01-27 23:26:32,258 - [test_09NB_freeze_authorization.py-->line:122] - INFO: 用例--【NB_删除授权】---执行通过
2021-01-27 23:27:00,650 - [test_09NB_freeze_authorization.py-->line:122] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-27 23:27:06,077 - [test_09NB_freeze_authorization.py-->line:122] - INFO: 用例--【NB授权-临时用户新增-IC卡】---执行通过
2021-01-27 23:27:11,597 - [test_09NB_freeze_authorization.py-->line:122] - INFO: 用例--【NB通讯-冻结授权】---执行通过
2021-01-27 23:27:17,093 - [test_09NB_freeze_authorization.py-->line:122] - INFO: 用例--【NB通讯-解冻冻结】---执行通过
2021-01-27 23:27:22,482 - [test_09NB_freeze_authorization.py-->line:122] - INFO: 用例--【NB_删除授权】---执行通过
2021-01-27 23:28:31,443 - [test_11NB_delete_all_authorizations.py-->line:90] - INFO: 用例--【删除全部授权】---执行通过
2021-01-27 23:28:53,906 - [test_09NB_freeze_authorization.py-->line:122] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-27 23:29:16,327 - [test_09NB_freeze_authorization.py-->line:122] - INFO: 用例--【NB授权-临时用户新增-IC卡】---执行通过
2021-01-27 23:29:38,811 - [test_09NB_freeze_authorization.py-->line:122] - INFO: 用例--【NB通讯-冻结授权】---执行通过
2021-01-27 23:30:01,341 - [test_09NB_freeze_authorization.py-->line:122] - INFO: 用例--【NB通讯-解冻冻结】---执行通过
2021-01-27 23:30:23,743 - [test_09NB_freeze_authorization.py-->line:122] - INFO: 用例--【NB_删除授权】---执行通过
2021-01-27 23:31:30,423 - [test_11NB_delete_all_authorizations.py-->line:90] - INFO: 用例--【删除全部授权】---执行通过
2021-01-27 23:32:12,440 - [test_09NB_freeze_authorization.py-->line:121] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-27 23:32:34,887 - [test_09NB_freeze_authorization.py-->line:121] - INFO: 用例--【NB授权-临时用户新增-IC卡】---执行通过
2021-01-27 23:32:57,382 - [test_09NB_freeze_authorization.py-->line:121] - INFO: 用例--【NB通讯-冻结授权】---执行通过
2021-01-27 23:33:19,955 - [test_09NB_freeze_authorization.py-->line:121] - INFO: 用例--【NB通讯-解冻冻结】---执行通过
2021-01-27 23:33:42,343 - [test_09NB_freeze_authorization.py-->line:121] - INFO: 用例--【NB_删除授权】---执行通过
2021-01-27 23:39:40,023 - [test_12NB_freezing_locks.py-->line:98] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-27 23:40:02,285 - [test_12NB_freezing_locks.py-->line:92] - ERROR: 用例--【NB授权-临时用户新增-IC卡】---执行失败
2021-01-27 23:40:02,285 - [test_12NB_freezing_locks.py-->line:95] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': -99, 'message': '用户信息不存在!', 'content': None}
Traceback (most recent call last):
  File "F:\86-code\suoguan\testcases\test_12NB_freezing_locks.py", line 88, in test_nb_authorization_looks
    self.assertDictIn(expected, res)
  File "F:\86-code\suoguan\testcases\test_12NB_freezing_locks.py", line 117, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': -99, 'message': '用户信息不存在!', 'content': None}
2021-01-27 23:40:02,518 - [test_12NB_freezing_locks.py-->line:92] - ERROR: 用例--【NB通讯-冻结授权】---执行失败
2021-01-27 23:40:02,519 - [test_12NB_freezing_locks.py-->line:95] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': -1, 'message': '无权限操作', 'content': ''}
Traceback (most recent call last):
  File "F:\86-code\suoguan\testcases\test_12NB_freezing_locks.py", line 88, in test_nb_authorization_looks
    self.assertDictIn(expected, res)
  File "F:\86-code\suoguan\testcases\test_12NB_freezing_locks.py", line 117, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': -1, 'message': '无权限操作', 'content': ''}
2021-01-27 23:40:02,741 - [test_12NB_freezing_locks.py-->line:92] - ERROR: 用例--【NB通讯-解冻冻结】---执行失败
2021-01-27 23:40:02,741 - [test_12NB_freezing_locks.py-->line:95] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': -1, 'message': '无权限操作', 'content': ''}
Traceback (most recent call last):
  File "F:\86-code\suoguan\testcases\test_12NB_freezing_locks.py", line 88, in test_nb_authorization_looks
    self.assertDictIn(expected, res)
  File "F:\86-code\suoguan\testcases\test_12NB_freezing_locks.py", line 117, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': -1, 'message': '无权限操作', 'content': ''}
2021-01-27 23:40:02,802 - [test_12NB_freezing_locks.py-->line:92] - ERROR: 用例--【NB_删除授权】---执行失败
2021-01-27 23:40:02,802 - [test_12NB_freezing_locks.py-->line:95] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '该授权信息不存在', 'content': ''}
Traceback (most recent call last):
  File "F:\86-code\suoguan\testcases\test_12NB_freezing_locks.py", line 88, in test_nb_authorization_looks
    self.assertDictIn(expected, res)
  File "F:\86-code\suoguan\testcases\test_12NB_freezing_locks.py", line 117, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '该授权信息不存在', 'content': ''}
2021-01-27 23:41:11,931 - [test_12NB_freezing_locks.py-->line:98] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-27 23:41:34,395 - [test_12NB_freezing_locks.py-->line:98] - INFO: 用例--【NB通讯-冻结门锁】---执行通过
2021-01-27 23:41:34,835 - [test_12NB_freezing_locks.py-->line:98] - INFO: 用例--【NB通讯-解冻门锁】---执行通过
2021-01-27 23:42:47,205 - [test_11NB_delete_all_authorizations.py-->line:90] - INFO: 用例--【删除全部授权】---执行通过
2021-01-27 23:43:27,942 - [test_12NB_freezing_locks.py-->line:98] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-27 23:43:50,811 - [test_12NB_freezing_locks.py-->line:98] - INFO: 用例--【NB通讯-冻结门锁】---执行通过
2021-01-27 23:44:13,270 - [test_12NB_freezing_locks.py-->line:98] - INFO: 用例--【NB通讯-解冻门锁】---执行通过
2021-01-27 23:55:51,834 - [test_14NB_modify_authorization_time.py-->line:106] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-27 23:56:14,157 - [test_14NB_modify_authorization_time.py-->line:100] - ERROR: 用例--【NB授权-修改授权时间-密码】---执行失败
2021-01-27 23:56:14,157 - [test_14NB_modify_authorization_time.py-->line:103] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': -99, 'message': '内部异常', 'content': None}
Traceback (most recent call last):
  File "F:\86-code\suoguan\testcases\test_14NB_modify_authorization_time.py", line 96, in test_nb_modify_authorization_time
    self.assertDictIn(expected, res)
  File "F:\86-code\suoguan\testcases\test_14NB_modify_authorization_time.py", line 127, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': -99, 'message': '内部异常', 'content': None}
2021-01-27 23:57:06,409 - [test_14NB_modify_authorization_time.py-->line:107] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-27 23:57:28,777 - [test_14NB_modify_authorization_time.py-->line:101] - ERROR: 用例--【NB授权-修改授权时间-密码】---执行失败
2021-01-27 23:57:28,778 - [test_14NB_modify_authorization_time.py-->line:104] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': -99, 'message': '内部异常', 'content': None}
Traceback (most recent call last):
  File "F:\86-code\suoguan\testcases\test_14NB_modify_authorization_time.py", line 97, in test_nb_modify_authorization_time
    self.assertDictIn(expected, res)
  File "F:\86-code\suoguan\testcases\test_14NB_modify_authorization_time.py", line 128, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': -99, 'message': '内部异常', 'content': None}
2021-01-27 23:58:59,203 - [test_14NB_modify_authorization_time.py-->line:113] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-27 23:59:21,533 - [test_14NB_modify_authorization_time.py-->line:107] - ERROR: 用例--【NB授权-修改授权时间-密码】---执行失败
2021-01-27 23:59:21,533 - [test_14NB_modify_authorization_time.py-->line:110] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': -99, 'message': '内部异常', 'content': None}
Traceback (most recent call last):
  File "F:\86-code\suoguan\testcases\test_14NB_modify_authorization_time.py", line 103, in test_nb_modify_authorization_time
    self.assertDictIn(expected, res)
  File "F:\86-code\suoguan\testcases\test_14NB_modify_authorization_time.py", line 134, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': -99, 'message': '内部异常', 'content': None}
2021-01-28 00:01:42,653 - [test_14NB_modify_authorization_time.py-->line:113] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-28 00:02:04,980 - [test_14NB_modify_authorization_time.py-->line:107] - ERROR: 用例--【NB授权-修改授权时间-密码】---执行失败
2021-01-28 00:02:04,981 - [test_14NB_modify_authorization_time.py-->line:110] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': -99, 'message': '内部异常', 'content': None}
Traceback (most recent call last):
  File "F:\86-code\suoguan\testcases\test_14NB_modify_authorization_time.py", line 103, in test_nb_modify_authorization_time
    self.assertDictIn(expected, res)
  File "F:\86-code\suoguan\testcases\test_14NB_modify_authorization_time.py", line 134, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': -99, 'message': '内部异常', 'content': None}
2021-01-28 00:02:27,643 - [test_14NB_modify_authorization_time.py-->line:113] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-28 00:02:49,965 - [test_14NB_modify_authorization_time.py-->line:107] - ERROR: 用例--【NB授权-修改授权时间-密码】---执行失败
2021-01-28 00:02:49,965 - [test_14NB_modify_authorization_time.py-->line:110] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': -99, 'message': '内部异常', 'content': None}
Traceback (most recent call last):
  File "F:\86-code\suoguan\testcases\test_14NB_modify_authorization_time.py", line 103, in test_nb_modify_authorization_time
    self.assertDictIn(expected, res)
  File "F:\86-code\suoguan\testcases\test_14NB_modify_authorization_time.py", line 134, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': -99, 'message': '内部异常', 'content': None}
2021-01-28 00:03:52,808 - [test_11NB_delete_all_authorizations.py-->line:90] - INFO: 用例--【删除全部授权】---执行通过
2021-01-28 00:18:32,356 - [test_01register.py-->line:60] - INFO: 用例--【登录】---执行通过
2021-01-28 00:18:33,161 - [test_02NB_new_password.py-->line:90] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-28 00:18:33,730 - [test_02NB_new_password_01.py-->line:88] - INFO: 用例--【NB授权-管理员用户新增-密码】---执行通过
2021-01-28 00:18:34,203 - [test_02NB_new_password_01.py-->line:88] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-28 00:18:34,690 - [test_02NB_new_password_01.py-->line:88] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-28 00:18:35,149 - [test_02NB_new_password_01.py-->line:84] - ERROR: 用例--【NB授权-劫持用户新增-密码】---执行失败
2021-01-28 00:18:35,149 - [test_02NB_new_password_01.py-->line:85] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
Traceback (most recent call last):
  File "F:\86-code\suoguan\testcases\test_02NB_new_password_01.py", line 80, in test_nb_new_password
    self.assertDictIn(expected, res)
  File "F:\86-code\suoguan\testcases\test_02NB_new_password_01.py", line 101, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
2021-01-28 00:18:35,638 - [test_02NB_new_password_01.py-->line:88] - INFO: 用例--【NB授权-管理员新增-IC卡】---执行通过
2021-01-28 00:18:36,115 - [test_02NB_new_password_01.py-->line:88] - INFO: 用例--【NB授权-普通用户新增-IC卡】---执行通过
2021-01-28 00:18:36,601 - [test_02NB_new_password_01.py-->line:88] - INFO: 用例--【NB授权-临时用户新增-IC卡】---执行通过
2021-01-28 00:18:37,153 - [test_02NB_new_password_01.py-->line:88] - INFO: 用例--【NB授权-劫持用户新增-IC卡】---执行通过
2021-01-28 00:18:37,703 - [test_02NB_new_password_02.py-->line:118] - INFO: 用例--【NB授权-管理员新增-指纹】---执行通过
2021-01-28 00:18:38,088 - [test_02NB_new_password_02.py-->line:118] - INFO: 用例--【NB授权-普通用户新增-指纹】---执行通过
2021-01-28 00:18:38,484 - [test_02NB_new_password_02.py-->line:118] - INFO: 用例--【NB授权-临时用户新增-指纹】---执行通过
2021-01-28 00:18:38,862 - [test_02NB_new_password_02.py-->line:118] - INFO: 用例--【NB授权-劫持用户新增-指纹】---执行通过
2021-01-28 00:18:39,406 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权_普通用户_时间过期】---执行通过
2021-01-28 00:18:39,889 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权_普通用户_有效次数】---执行通过
2021-01-28 00:18:40,384 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权_临时用户_时间过期】---执行通过
2021-01-28 00:18:40,870 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权_临时用户_有效次数】---执行通过
2021-01-28 00:18:41,382 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权-临时用户-待生效】---执行通过
2021-01-28 00:18:41,895 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权-临时用户-有效次数-有效次数使用不能再次使用】---执行通过
2021-01-28 00:18:42,376 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权-普通用户-有效次数-有效次数使用不能再次使用】---执行通过
2021-01-28 00:18:42,928 - [test_02NB_new_password_04.py-->line:119] - INFO: 用例--【NB授权-普通用户新增-IC本地录入】---执行通过
2021-01-28 00:19:05,429 - [test_02NB_new_password_04.py-->line:119] - INFO: 用例--【NB授权-普通用户新增-指纹本地录入】---执行通过
2021-01-28 00:19:50,923 - [test_02NB_new_password_04.py-->line:119] - INFO: 用例--【NB授权-临时用户新增-IC本地录入】---执行通过
2021-01-28 00:20:13,486 - [test_02NB_new_password_04.py-->line:119] - INFO: 用例--【NB授权-临时用户新增-指纹本地录入】---执行通过
2021-01-28 00:20:59,065 - [test_02NB_new_password_04.py-->line:119] - INFO: 用例--【NB授权-普通用户新增-身份证本地录入】---执行通过
2021-01-28 00:21:21,571 - [test_02NB_new_password_04.py-->line:119] - INFO: 用例--【NB授权-普通用户新增-非身份证本地校验】---执行通过
2021-01-28 00:21:44,153 - [test_05NB_delete_the_authorized_01.py-->line:110] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-28 00:22:06,551 - [test_05NB_delete_the_authorized_01.py-->line:110] - INFO: 用例--【NB_删除授权】---执行通过
2021-01-28 00:22:29,171 - [test_05NB_delete_the_authorized_01.py-->line:110] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-28 00:22:51,565 - [test_05NB_delete_the_authorized_01.py-->line:110] - INFO: 用例--【NB_删除授权】---执行通过
2021-01-28 00:23:14,052 - [test_05NB_delete_the_authorized_01.py-->line:110] - INFO: 用例--【NB授权-管理用户新增-密码】---执行通过
2021-01-28 00:23:36,475 - [test_05NB_delete_the_authorized_01.py-->line:110] - INFO: 用例--【NB_删除授权】---执行通过
2021-01-28 00:23:59,311 - [test_05NB_delete_the_authorized_02.py-->line:115] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-28 00:24:21,776 - [test_05NB_delete_the_authorized_02.py-->line:115] - INFO: 用例--【NB授权-临时用户新增-IC卡】---执行通过
2021-01-28 00:24:44,478 - [test_05NB_delete_the_authorized_02.py-->line:115] - INFO: 用例--【NB_删除授权】---执行通过
2021-01-28 00:25:07,035 - [test_06NB_grant_column_list.py-->line:76] - INFO: 用例--【NB_授权列表】---执行通过
2021-01-28 00:25:07,880 - [test_07NB_authorization_list_details.py-->line:116] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-28 00:25:31,592 - [test_07NB_authorization_list_details.py-->line:116] - INFO: 用例--【NB授权-临时用户新增-IC卡】---执行通过
2021-01-28 00:25:53,906 - [test_07NB_authorization_list_details.py-->line:116] - INFO: 用例--【NB授权-授权列表详情】---执行通过
2021-01-28 00:26:16,286 - [test_07NB_authorization_list_details.py-->line:116] - INFO: 用例--【NB_删除授权】---执行通过
2021-01-28 00:26:38,875 - [test_09NB_freeze_authorization.py-->line:121] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-28 00:27:01,295 - [test_09NB_freeze_authorization.py-->line:121] - INFO: 用例--【NB授权-临时用户新增-IC卡】---执行通过
2021-01-28 00:27:23,873 - [test_09NB_freeze_authorization.py-->line:121] - INFO: 用例--【NB通讯-冻结授权】---执行通过
2021-01-28 00:27:46,367 - [test_09NB_freeze_authorization.py-->line:121] - INFO: 用例--【NB通讯-解冻冻结】---执行通过
2021-01-28 00:28:09,029 - [test_09NB_freeze_authorization.py-->line:121] - INFO: 用例--【NB_删除授权】---执行通过
2021-01-28 00:28:31,577 - [test_11NB_delete_all_authorizations.py-->line:90] - INFO: 用例--【删除全部授权】---执行通过
2021-01-28 00:28:32,149 - [test_12NB_freezing_locks.py-->line:98] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-28 00:28:54,497 - [test_12NB_freezing_locks.py-->line:98] - INFO: 用例--【NB通讯-冻结门锁】---执行通过
2021-01-28 00:29:16,828 - [test_12NB_freezing_locks.py-->line:98] - INFO: 用例--【NB通讯-解冻门锁】---执行通过
2021-01-28 00:29:39,256 - [test_14NB_modify_authorization_time.py-->line:113] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-28 00:30:01,580 - [test_14NB_modify_authorization_time.py-->line:107] - ERROR: 用例--【NB授权-修改授权时间-密码】---执行失败
2021-01-28 00:30:01,581 - [test_14NB_modify_authorization_time.py-->line:110] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': -99, 'message': '内部异常', 'content': None}
Traceback (most recent call last):
  File "F:\86-code\suoguan\testcases\test_14NB_modify_authorization_time.py", line 103, in test_nb_modify_authorization_time
    self.assertDictIn(expected, res)
  File "F:\86-code\suoguan\testcases\test_14NB_modify_authorization_time.py", line 134, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': -99, 'message': '内部异常', 'content': None}
2021-01-28 00:30:01,913 - [test_15LK_paging_list.py-->line:88] - INFO: 用例--【门锁管理-分页列表】---执行通过
2021-01-28 00:30:02,198 - [test_16LK_a_single_query.py-->line:100] - INFO: 用例--【门锁管理-单条查询】---执行通过
2021-01-28 00:30:03,182 - [test_17LK_the_new_lock.py-->line:95] - INFO: 用例--【门锁管理-删除门锁】---执行通过
2021-01-28 00:30:03,425 - [test_18LK_remove_the_door.py-->line:93] - ERROR: 用例--【门锁管理-删除门锁】---执行失败
2021-01-28 00:30:03,425 - [test_18LK_remove_the_door.py-->line:96] - ERROR: {'code': 0, 'message': '操作成功'} not in {'code': -1, 'message': '无权限操作', 'content': ''}
Traceback (most recent call last):
  File "F:\86-code\suoguan\testcases\test_18LK_remove_the_door.py", line 89, in test_lk_remove_the_door
    self.assertDictIn(expected, res)
  File "F:\86-code\suoguan\testcases\test_18LK_remove_the_door.py", line 109, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功'} not in {'code': -1, 'message': '无权限操作', 'content': ''}
2021-01-28 08:03:12,443 - [test_11NB_delete_all_authorizations.py-->line:83] - ERROR: 用例--【删除全部授权】---执行失败
2021-01-28 08:03:12,443 - [test_11NB_delete_all_authorizations.py-->line:86] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': -1, 'message': '无权限操作', 'content': ''}
Traceback (most recent call last):
  File "F:\86-code\suoguan\testcases\test_11NB_delete_all_authorizations.py", line 79, in test_nb_new_password
    self.assertDictIn(expected, res)
  File "F:\86-code\suoguan\testcases\test_11NB_delete_all_authorizations.py", line 98, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': -1, 'message': '无权限操作', 'content': ''}
2021-01-29 15:56:43,205 - [test_18LK_remove_the_door.py-->line:93] - ERROR: 用例--【门锁管理-删除门锁】---执行失败
2021-01-29 15:56:43,205 - [test_18LK_remove_the_door.py-->line:96] - ERROR: {'code': 0, 'message': '操作成功'} not in {'code': -1, 'message': '无权限操作', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_18LK_remove_the_door.py", line 89, in test_lk_remove_the_door
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_18LK_remove_the_door.py", line 109, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功'} not in {'code': -1, 'message': '无权限操作', 'content': ''}
2021-01-29 15:56:57,631 - [test_18LK_remove_the_door.py-->line:93] - ERROR: 用例--【门锁管理-删除门锁】---执行失败
2021-01-29 15:56:57,631 - [test_18LK_remove_the_door.py-->line:96] - ERROR: {'code': 0, 'message': '操作成功'} not in {'code': -1, 'message': '无权限操作', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_18LK_remove_the_door.py", line 89, in test_lk_remove_the_door
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_18LK_remove_the_door.py", line 109, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功'} not in {'code': -1, 'message': '无权限操作', 'content': ''}
2021-01-29 15:58:11,969 - [test_17LK_the_new_lock.py-->line:87] - ERROR: 用例--【门锁管理-删除门锁】---执行失败
2021-01-29 15:58:11,970 - [test_17LK_the_new_lock.py-->line:90] - ERROR: {'code': 0, 'message': '操作成功'} not in {'code': -1, 'message': '无权限操作', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_17LK_the_new_lock.py", line 83, in test_lk_remove_the_door
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_17LK_the_new_lock.py", line 103, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功'} not in {'code': -1, 'message': '无权限操作', 'content': ''}
2021-01-29 16:28:04,294 - [test_18LK_remove_the_door.py-->line:99] - INFO: 用例--【门锁管理-删除门锁】---执行通过
2021-01-29 16:28:15,570 - [test_17LK_the_new_lock.py-->line:87] - ERROR: 用例--【门锁管理-删除门锁】---执行失败
2021-01-29 16:28:15,570 - [test_17LK_the_new_lock.py-->line:90] - ERROR: {'code': 0, 'message': '操作成功'} not in {'code': -1, 'message': '无权限操作', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_17LK_the_new_lock.py", line 83, in test_lk_remove_the_door
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_17LK_the_new_lock.py", line 103, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功'} not in {'code': -1, 'message': '无权限操作', 'content': ''}
2021-01-29 16:29:01,382 - [test_17LK_the_new_lock.py-->line:86] - ERROR: 用例--【门锁管理-删除门锁】---执行失败
2021-01-29 16:29:01,383 - [test_17LK_the_new_lock.py-->line:89] - ERROR: {'code': 0, 'message': '操作成功'} not in {'code': -1, 'message': '无权限操作', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_17LK_the_new_lock.py", line 82, in test_lk_remove_the_door
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_17LK_the_new_lock.py", line 102, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功'} not in {'code': -1, 'message': '无权限操作', 'content': ''}
2021-01-29 16:29:09,601 - [test_18LK_remove_the_door.py-->line:92] - ERROR: 用例--【门锁管理-删除门锁】---执行失败
2021-01-29 16:29:09,601 - [test_18LK_remove_the_door.py-->line:95] - ERROR: {'code': 0, 'message': '操作成功'} not in {'code': -1, 'message': '无权限操作', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_18LK_remove_the_door.py", line 88, in test_lk_remove_the_door
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_18LK_remove_the_door.py", line 108, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功'} not in {'code': -1, 'message': '无权限操作', 'content': ''}
2021-01-29 16:29:29,646 - [test_12NB_freezing_locks.py-->line:92] - ERROR: 用例--【NB授权-临时用户新增-密码】---执行失败
2021-01-29 16:29:29,646 - [test_12NB_freezing_locks.py-->line:95] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': -1, 'message': '该设备未查询到版本信息', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_12NB_freezing_locks.py", line 88, in test_nb_authorization_looks
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_12NB_freezing_locks.py", line 117, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': -1, 'message': '该设备未查询到版本信息', 'content': ''}
2021-01-29 16:29:29,848 - [test_12NB_freezing_locks.py-->line:92] - ERROR: 用例--【NB通讯-冻结门锁】---执行失败
2021-01-29 16:29:29,848 - [test_12NB_freezing_locks.py-->line:95] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': -1, 'message': '无权限操作', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_12NB_freezing_locks.py", line 88, in test_nb_authorization_looks
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_12NB_freezing_locks.py", line 117, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': -1, 'message': '无权限操作', 'content': ''}
2021-01-29 16:29:30,042 - [test_12NB_freezing_locks.py-->line:92] - ERROR: 用例--【NB通讯-解冻门锁】---执行失败
2021-01-29 16:29:30,042 - [test_12NB_freezing_locks.py-->line:95] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': -1, 'message': '无权限操作', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_12NB_freezing_locks.py", line 88, in test_nb_authorization_looks
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_12NB_freezing_locks.py", line 117, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': -1, 'message': '无权限操作', 'content': ''}
2021-01-29 16:29:48,124 - [test_17LK_the_new_lock.py-->line:86] - ERROR: 用例--【门锁管理-删除门锁】---执行失败
2021-01-29 16:29:48,124 - [test_17LK_the_new_lock.py-->line:89] - ERROR: {'code': 0, 'message': '操作成功'} not in {'code': -1, 'message': '无权限操作', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_17LK_the_new_lock.py", line 82, in test_lk_remove_the_door
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_17LK_the_new_lock.py", line 102, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功'} not in {'code': -1, 'message': '无权限操作', 'content': ''}
2021-01-29 16:31:43,264 - [test_17LK_the_new_lock.py-->line:86] - ERROR: 用例--【门锁管理-门锁添加】---执行失败
2021-01-29 16:31:43,264 - [test_17LK_the_new_lock.py-->line:89] - ERROR: {'code': 0, 'message': '操作成功'} not in {'code': -99, 'message': 'JSON parse error: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable; nested exception is com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable (2 known properties: "imei", "lockId"])\n at [Source: (PushbackInputStream); line: 1, column: 14] (through reference chain: hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo["orderId"])', 'content': None}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_17LK_the_new_lock.py", line 82, in test_lk_remove_the_door
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_17LK_the_new_lock.py", line 102, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功'} not in {'code': -99, 'message': 'JSON parse error: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable; nested exception is com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable (2 known properties: "imei", "lockId"])\n at [Source: (PushbackInputStream); line: 1, column: 14] (through reference chain: hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo["orderId"])', 'content': None}
2021-01-29 16:35:27,456 - [test_17LK_the_new_lock.py-->line:87] - ERROR: 用例--【门锁管理-门锁添加】---执行失败
2021-01-29 16:35:27,456 - [test_17LK_the_new_lock.py-->line:90] - ERROR: {'code': 0, 'message': '操作成功'} not in {'code': -99, 'message': 'JSON parse error: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable; nested exception is com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable (2 known properties: "imei", "lockId"])\n at [Source: (PushbackInputStream); line: 1, column: 14] (through reference chain: hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo["orderId"])', 'content': None}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_17LK_the_new_lock.py", line 83, in test_lk_remove_the_door
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_17LK_the_new_lock.py", line 103, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功'} not in {'code': -99, 'message': 'JSON parse error: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable; nested exception is com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable (2 known properties: "imei", "lockId"])\n at [Source: (PushbackInputStream); line: 1, column: 14] (through reference chain: hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo["orderId"])', 'content': None}
2021-01-29 16:36:44,718 - [test_17LK_the_new_lock.py-->line:87] - ERROR: 用例--【门锁管理-门锁添加】---执行失败
2021-01-29 16:36:44,718 - [test_17LK_the_new_lock.py-->line:90] - ERROR: {'code': 0, 'message': '操作成功'} not in {'code': -99, 'message': 'JSON parse error: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable; nested exception is com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable (2 known properties: "imei", "lockId"])\n at [Source: (PushbackInputStream); line: 1, column: 14] (through reference chain: hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo["orderId"])', 'content': None}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_17LK_the_new_lock.py", line 83, in test_lk_remove_the_door
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_17LK_the_new_lock.py", line 103, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功'} not in {'code': -99, 'message': 'JSON parse error: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable; nested exception is com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable (2 known properties: "imei", "lockId"])\n at [Source: (PushbackInputStream); line: 1, column: 14] (through reference chain: hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo["orderId"])', 'content': None}
2021-01-29 16:38:44,856 - [test_17LK_the_new_lock.py-->line:88] - ERROR: 用例--【门锁管理-门锁添加】---执行失败
2021-01-29 16:38:44,856 - [test_17LK_the_new_lock.py-->line:91] - ERROR: {'code': 0, 'message': '操作成功'} not in {'code': -99, 'message': 'JSON parse error: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable; nested exception is com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable (2 known properties: "imei", "lockId"])\n at [Source: (PushbackInputStream); line: 1, column: 14] (through reference chain: hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo["orderId"])', 'content': None}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_17LK_the_new_lock.py", line 84, in test_lk_remove_the_door
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_17LK_the_new_lock.py", line 104, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功'} not in {'code': -99, 'message': 'JSON parse error: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable; nested exception is com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable (2 known properties: "imei", "lockId"])\n at [Source: (PushbackInputStream); line: 1, column: 14] (through reference chain: hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo["orderId"])', 'content': None}
2021-01-29 16:40:07,445 - [test_17LK_the_new_lock.py-->line:86] - ERROR: 用例--【门锁管理-门锁添加】---执行失败
2021-01-29 16:40:07,445 - [test_17LK_the_new_lock.py-->line:89] - ERROR: {'code': 0, 'message': '操作成功'} not in {'code': -99, 'message': 'JSON parse error: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable; nested exception is com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable (2 known properties: "imei", "lockId"])\n at [Source: (PushbackInputStream); line: 1, column: 14] (through reference chain: hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo["orderId"])', 'content': None}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_17LK_the_new_lock.py", line 82, in test_lk_remove_the_door
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_17LK_the_new_lock.py", line 102, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功'} not in {'code': -99, 'message': 'JSON parse error: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable; nested exception is com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable (2 known properties: "imei", "lockId"])\n at [Source: (PushbackInputStream); line: 1, column: 14] (through reference chain: hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo["orderId"])', 'content': None}
2021-01-29 16:40:36,215 - [test_17LK_the_new_lock.py-->line:87] - ERROR: 用例--【门锁管理-门锁添加】---执行失败
2021-01-29 16:40:36,216 - [test_17LK_the_new_lock.py-->line:90] - ERROR: {'code': 0, 'message': '操作成功'} not in {'code': -99, 'message': 'JSON parse error: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable; nested exception is com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable (2 known properties: "imei", "lockId"])\n at [Source: (PushbackInputStream); line: 1, column: 14] (through reference chain: hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo["orderId"])', 'content': None}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_17LK_the_new_lock.py", line 83, in test_lk_remove_the_door
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_17LK_the_new_lock.py", line 103, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功'} not in {'code': -99, 'message': 'JSON parse error: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable; nested exception is com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable (2 known properties: "imei", "lockId"])\n at [Source: (PushbackInputStream); line: 1, column: 14] (through reference chain: hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo["orderId"])', 'content': None}
2021-01-29 16:41:26,370 - [test_17LK_the_new_lock.py-->line:87] - ERROR: 用例--【门锁管理-门锁添加】---执行失败
2021-01-29 16:41:26,370 - [test_17LK_the_new_lock.py-->line:90] - ERROR: {'code': 0, 'message': '操作成功'} not in {'code': -99, 'message': 'JSON parse error: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable; nested exception is com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable (2 known properties: "imei", "lockId"])\n at [Source: (PushbackInputStream); line: 1, column: 14] (through reference chain: hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo["orderId"])', 'content': None}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_17LK_the_new_lock.py", line 83, in test_lk_remove_the_door
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_17LK_the_new_lock.py", line 103, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功'} not in {'code': -99, 'message': 'JSON parse error: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable; nested exception is com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable (2 known properties: "imei", "lockId"])\n at [Source: (PushbackInputStream); line: 1, column: 14] (through reference chain: hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo["orderId"])', 'content': None}
2021-01-29 16:41:52,492 - [test_17LK_the_new_lock.py-->line:87] - ERROR: 用例--【门锁管理-门锁添加】---执行失败
2021-01-29 16:41:52,492 - [test_17LK_the_new_lock.py-->line:90] - ERROR: {'code': 0, 'message': '操作成功'} not in {'code': -99, 'message': 'JSON parse error: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable; nested exception is com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable (2 known properties: "imei", "lockId"])\n at [Source: (PushbackInputStream); line: 1, column: 14] (through reference chain: hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo["orderId"])', 'content': None}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_17LK_the_new_lock.py", line 83, in test_lk_remove_the_door
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_17LK_the_new_lock.py", line 103, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功'} not in {'code': -99, 'message': 'JSON parse error: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable; nested exception is com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable (2 known properties: "imei", "lockId"])\n at [Source: (PushbackInputStream); line: 1, column: 14] (through reference chain: hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo["orderId"])', 'content': None}
2021-01-29 16:43:15,794 - [test_17LK_the_new_lock.py-->line:87] - ERROR: 用例--【门锁管理-门锁添加】---执行失败
2021-01-29 16:43:15,794 - [test_17LK_the_new_lock.py-->line:90] - ERROR: {'code': 0, 'message': '操作成功'} not in {'code': -99, 'message': 'JSON parse error: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable; nested exception is com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable (2 known properties: "imei", "lockId"])\n at [Source: (PushbackInputStream); line: 1, column: 14] (through reference chain: hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo["orderId"])', 'content': None}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_17LK_the_new_lock.py", line 83, in test_lk_remove_the_door
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_17LK_the_new_lock.py", line 103, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功'} not in {'code': -99, 'message': 'JSON parse error: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable; nested exception is com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable (2 known properties: "imei", "lockId"])\n at [Source: (PushbackInputStream); line: 1, column: 14] (through reference chain: hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo["orderId"])', 'content': None}
2021-01-29 16:47:11,810 - [test_17LK_the_new_lock.py-->line:87] - ERROR: 用例--【门锁管理-门锁添加】---执行失败
2021-01-29 16:47:11,810 - [test_17LK_the_new_lock.py-->line:90] - ERROR: {'code': 0, 'message': '操作成功'} not in {'code': -99, 'message': 'JSON parse error: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable; nested exception is com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable (2 known properties: "imei", "lockId"])\n at [Source: (PushbackInputStream); line: 1, column: 14] (through reference chain: hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo["orderId"])', 'content': None}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_17LK_the_new_lock.py", line 83, in test_lk_remove_the_door
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_17LK_the_new_lock.py", line 103, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功'} not in {'code': -99, 'message': 'JSON parse error: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable; nested exception is com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable (2 known properties: "imei", "lockId"])\n at [Source: (PushbackInputStream); line: 1, column: 14] (through reference chain: hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo["orderId"])', 'content': None}
2021-01-29 16:48:28,159 - [test_17LK_the_new_lock.py-->line:87] - ERROR: 用例--【门锁管理-门锁添加】---执行失败
2021-01-29 16:48:28,160 - [test_17LK_the_new_lock.py-->line:90] - ERROR: {'code': 0, 'message': '操作成功'} not in {'code': -99, 'message': 'JSON parse error: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable; nested exception is com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable (2 known properties: "imei", "lockId"])\n at [Source: (PushbackInputStream); line: 1, column: 14] (through reference chain: hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo["orderId"])', 'content': None}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_17LK_the_new_lock.py", line 83, in test_lk_remove_the_door
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_17LK_the_new_lock.py", line 103, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功'} not in {'code': -99, 'message': 'JSON parse error: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable; nested exception is com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable (2 known properties: "imei", "lockId"])\n at [Source: (PushbackInputStream); line: 1, column: 14] (through reference chain: hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo["orderId"])', 'content': None}
2021-01-29 16:49:24,144 - [test_17LK_the_new_lock.py-->line:87] - ERROR: 用例--【门锁管理-门锁添加】---执行失败
2021-01-29 16:49:24,144 - [test_17LK_the_new_lock.py-->line:90] - ERROR: {'code': 0, 'message': '操作成功'} not in {'code': -99, 'message': 'JSON parse error: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable; nested exception is com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable (2 known properties: "imei", "lockId"])\n at [Source: (PushbackInputStream); line: 1, column: 14] (through reference chain: hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo["orderId"])', 'content': None}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_17LK_the_new_lock.py", line 83, in test_lk_remove_the_door
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_17LK_the_new_lock.py", line 103, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功'} not in {'code': -99, 'message': 'JSON parse error: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable; nested exception is com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable (2 known properties: "imei", "lockId"])\n at [Source: (PushbackInputStream); line: 1, column: 14] (through reference chain: hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo["orderId"])', 'content': None}
2021-01-29 16:50:40,062 - [test_17LK_the_new_lock.py-->line:87] - ERROR: 用例--【门锁管理-门锁添加】---执行失败
2021-01-29 16:50:40,062 - [test_17LK_the_new_lock.py-->line:90] - ERROR: {'code': 0, 'message': '操作成功'} not in {'code': -99, 'message': 'JSON parse error: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable; nested exception is com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable (2 known properties: "imei", "lockId"])\n at [Source: (PushbackInputStream); line: 1, column: 14] (through reference chain: hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo["orderId"])', 'content': None}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_17LK_the_new_lock.py", line 83, in test_lk_remove_the_door
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_17LK_the_new_lock.py", line 103, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功'} not in {'code': -99, 'message': 'JSON parse error: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable; nested exception is com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable (2 known properties: "imei", "lockId"])\n at [Source: (PushbackInputStream); line: 1, column: 14] (through reference chain: hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo["orderId"])', 'content': None}
2021-01-29 16:52:39,134 - [test_18LK_remove_the_door.py-->line:92] - ERROR: 用例--【门锁管理-删除门锁】---执行失败
2021-01-29 16:52:39,135 - [test_18LK_remove_the_door.py-->line:95] - ERROR: {'code': 0, 'message': '操作成功'} not in {'code': -1, 'message': '无权限操作', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_18LK_remove_the_door.py", line 88, in test_lk_remove_the_door
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_18LK_remove_the_door.py", line 108, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功'} not in {'code': -1, 'message': '无权限操作', 'content': ''}
2021-01-29 16:53:20,836 - [test_18LK_remove_the_door.py-->line:99] - INFO: 用例--【门锁管理-删除门锁】---执行通过
2021-01-29 16:53:36,113 - [test_17LK_the_new_lock.py-->line:87] - ERROR: 用例--【门锁管理-门锁添加】---执行失败
2021-01-29 16:53:36,113 - [test_17LK_the_new_lock.py-->line:90] - ERROR: {'code': 0, 'message': '操作成功'} not in {'code': -99, 'message': 'JSON parse error: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable; nested exception is com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable (2 known properties: "imei", "lockId"])\n at [Source: (PushbackInputStream); line: 1, column: 14] (through reference chain: hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo["orderId"])', 'content': None}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_17LK_the_new_lock.py", line 83, in test_lk_remove_the_door
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_17LK_the_new_lock.py", line 103, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功'} not in {'code': -99, 'message': 'JSON parse error: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable; nested exception is com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable (2 known properties: "imei", "lockId"])\n at [Source: (PushbackInputStream); line: 1, column: 14] (through reference chain: hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo["orderId"])', 'content': None}
2021-01-29 16:54:16,132 - [test_16LK_a_single_query.py-->line:93] - ERROR: 用例--【门锁管理-单条查询】---执行失败
2021-01-29 16:54:16,133 - [test_16LK_a_single_query.py-->line:96] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 201, 'message': '设备不存在', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_16LK_a_single_query.py", line 89, in test_lk_a_single_query
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_16LK_a_single_query.py", line 109, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 201, 'message': '设备不存在', 'content': ''}
2021-01-29 16:55:31,191 - [test_16LK_a_single_query.py-->line:100] - INFO: 用例--【门锁管理-单条查询】---执行通过
2021-01-29 16:55:55,685 - [test_17LK_the_new_lock.py-->line:87] - ERROR: 用例--【门锁管理-门锁添加】---执行失败
2021-01-29 16:55:55,685 - [test_17LK_the_new_lock.py-->line:90] - ERROR: {'code': 0, 'message': '操作成功'} not in {'code': -99, 'message': 'JSON parse error: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable; nested exception is com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable (2 known properties: "imei", "lockId"])\n at [Source: (PushbackInputStream); line: 1, column: 14] (through reference chain: hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo["orderId"])', 'content': None}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_17LK_the_new_lock.py", line 83, in test_lk_remove_the_door
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_17LK_the_new_lock.py", line 103, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功'} not in {'code': -99, 'message': 'JSON parse error: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable; nested exception is com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable (2 known properties: "imei", "lockId"])\n at [Source: (PushbackInputStream); line: 1, column: 14] (through reference chain: hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo["orderId"])', 'content': None}
2021-01-29 17:02:36,903 - [test_16LK_a_single_query.py-->line:93] - ERROR: 用例--【门锁管理-门锁添加】---执行失败
2021-01-29 17:02:36,903 - [test_16LK_a_single_query.py-->line:96] - ERROR: {'code': 0, 'message': '操作成功'} not in {'code': -99, 'message': 'JSON parse error: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable; nested exception is com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable (2 known properties: "imei", "lockId"])\n at [Source: (PushbackInputStream); line: 1, column: 14] (through reference chain: hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo["orderId"])', 'content': None}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_16LK_a_single_query.py", line 89, in test_lk_a_single_query
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_16LK_a_single_query.py", line 109, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功'} not in {'code': -99, 'message': 'JSON parse error: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable; nested exception is com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable (2 known properties: "imei", "lockId"])\n at [Source: (PushbackInputStream); line: 1, column: 14] (through reference chain: hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo["orderId"])', 'content': None}
2021-01-29 17:03:40,646 - [test_17LK_the_new_lock.py-->line:87] - ERROR: 用例--【门锁管理-门锁添加】---执行失败
2021-01-29 17:03:40,647 - [test_17LK_the_new_lock.py-->line:90] - ERROR: {'code': 0, 'message': '操作成功'} not in {'code': -99, 'message': 'JSON parse error: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable; nested exception is com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable (2 known properties: "imei", "lockId"])\n at [Source: (PushbackInputStream); line: 1, column: 14] (through reference chain: hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo["orderId"])', 'content': None}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_17LK_the_new_lock.py", line 83, in test_lk_remove_the_door
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_17LK_the_new_lock.py", line 103, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功'} not in {'code': -99, 'message': 'JSON parse error: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable; nested exception is com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable (2 known properties: "imei", "lockId"])\n at [Source: (PushbackInputStream); line: 1, column: 14] (through reference chain: hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo["orderId"])', 'content': None}
2021-01-29 17:04:06,461 - [test_17LK_the_new_lock.py-->line:87] - ERROR: 用例--【门锁管理-门锁添加】---执行失败
2021-01-29 17:04:06,461 - [test_17LK_the_new_lock.py-->line:90] - ERROR: {'code': 0, 'message': '操作成功'} not in {'code': -99, 'message': 'JSON parse error: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable; nested exception is com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable (2 known properties: "imei", "lockId"])\n at [Source: (PushbackInputStream); line: 1, column: 14] (through reference chain: hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo["orderId"])', 'content': None}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_17LK_the_new_lock.py", line 83, in test_lk_remove_the_door
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_17LK_the_new_lock.py", line 103, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功'} not in {'code': -99, 'message': 'JSON parse error: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable; nested exception is com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "orderId" (class hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo), not marked as ignorable (2 known properties: "imei", "lockId"])\n at [Source: (PushbackInputStream); line: 1, column: 14] (through reference chain: hans.saas.server.modules.accept.entity.deviceAdministrationVo.DeleteDeviceVo["orderId"])', 'content': None}
2021-01-29 17:04:52,529 - [test_17LK_the_new_lock.py-->line:87] - ERROR: 用例--【门锁管理-门锁添加】---执行失败
2021-01-29 17:04:52,529 - [test_17LK_the_new_lock.py-->line:90] - ERROR: {'code': 0, 'message': '操作成功'} not in {'code': 2010115, 'message': 'IMEI号已存在', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_17LK_the_new_lock.py", line 83, in test_lk_remove_the_door
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_17LK_the_new_lock.py", line 103, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功'} not in {'code': 2010115, 'message': 'IMEI号已存在', 'content': ''}
2021-01-29 17:05:20,626 - [test_16LK_a_single_query.py-->line:100] - INFO: 用例--【门锁管理-单条查询】---执行通过
2021-01-29 17:05:39,161 - [test_18LK_remove_the_door.py-->line:99] - INFO: 用例--【门锁管理-删除门锁】---执行通过
2021-01-29 17:05:50,240 - [test_17LK_the_new_lock.py-->line:87] - ERROR: 用例--【门锁管理-门锁添加】---执行失败
2021-01-29 17:05:50,240 - [test_17LK_the_new_lock.py-->line:90] - ERROR: {'code': 0, 'message': '操作成功'} not in {'code': 0, 'message': '操作成功。', 'content': {'lockId': '72A822FE5E7D470D989B7306029A8422', 'imei': '869401040694457', 'deviceId': 'a093dca029b94ef0a03ed5be31ca93cb', 'isTransparent': 2, 'encryptionKey': '', 'encryptionWay': 0, 'httpUrl': 'http://47.104.186.222:8006/qr/callBack', 'productId': 10038001, 'masterKey': '73d56ad97f554bbf9531a168838d2873', 'appKey': '6fBSKsMM628', 'appSecret': 'BGLMhJ94up', 'orderCount': 0, 'organizationId': '860572e690d54dfcb258c499b00c5572', 'electricity': None, 'lockSignal': None, 'lastTelletTime': None, 'onlineStatus': 0, 'certCipher': None, 'type': 1, 'bluetoothType': 2, 'applicationproductsId': '1', 'sk': None}}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_17LK_the_new_lock.py", line 83, in test_lk_remove_the_door
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_17LK_the_new_lock.py", line 103, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功'} not in {'code': 0, 'message': '操作成功。', 'content': {'lockId': '72A822FE5E7D470D989B7306029A8422', 'imei': '869401040694457', 'deviceId': 'a093dca029b94ef0a03ed5be31ca93cb', 'isTransparent': 2, 'encryptionKey': '', 'encryptionWay': 0, 'httpUrl': 'http://47.104.186.222:8006/qr/callBack', 'productId': 10038001, 'masterKey': '73d56ad97f554bbf9531a168838d2873', 'appKey': '6fBSKsMM628', 'appSecret': 'BGLMhJ94up', 'orderCount': 0, 'organizationId': '860572e690d54dfcb258c499b00c5572', 'electricity': None, 'lockSignal': None, 'lastTelletTime': None, 'onlineStatus': 0, 'certCipher': None, 'type': 1, 'bluetoothType': 2, 'applicationproductsId': '1', 'sk': None}}
2021-01-29 17:06:27,381 - [test_17LK_the_new_lock.py-->line:87] - ERROR: 用例--【门锁管理-门锁添加】---执行失败
2021-01-29 17:06:27,381 - [test_17LK_the_new_lock.py-->line:90] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 2010115, 'message': 'IMEI号已存在', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_17LK_the_new_lock.py", line 83, in test_lk_remove_the_door
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_17LK_the_new_lock.py", line 103, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 2010115, 'message': 'IMEI号已存在', 'content': ''}
2021-01-29 17:06:32,494 - [test_17LK_the_new_lock.py-->line:87] - ERROR: 用例--【门锁管理-门锁添加】---执行失败
2021-01-29 17:06:32,494 - [test_17LK_the_new_lock.py-->line:90] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 2010115, 'message': 'IMEI号已存在', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_17LK_the_new_lock.py", line 83, in test_lk_remove_the_door
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_17LK_the_new_lock.py", line 103, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 2010115, 'message': 'IMEI号已存在', 'content': ''}
2021-01-29 17:06:43,792 - [test_18LK_remove_the_door.py-->line:99] - INFO: 用例--【门锁管理-删除门锁】---执行通过
2021-01-29 17:06:51,044 - [test_17LK_the_new_lock.py-->line:94] - INFO: 用例--【门锁管理-门锁添加】---执行通过
2021-01-29 17:07:31,092 - [test_15LK_paging_list.py-->line:88] - INFO: 用例--【门锁管理-分页列表】---执行通过
2021-01-29 17:08:17,397 - [test_14NB_modify_authorization_time.py-->line:113] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-29 17:08:39,778 - [test_14NB_modify_authorization_time.py-->line:107] - ERROR: 用例--【NB授权-修改授权时间-密码】---执行失败
2021-01-29 17:08:39,778 - [test_14NB_modify_authorization_time.py-->line:110] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': -99, 'message': '内部异常', 'content': None}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_14NB_modify_authorization_time.py", line 103, in test_nb_modify_authorization_time
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_14NB_modify_authorization_time.py", line 134, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': -99, 'message': '内部异常', 'content': None}
2021-01-29 17:10:25,549 - [test_14NB_modify_authorization_time.py-->line:113] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-29 17:19:50,481 - [test_14NB_modify_authorization_time.py-->line:113] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-29 17:20:00,805 - [test_14NB_modify_authorization_time.py-->line:107] - ERROR: 用例--【NB授权-修改授权时间-密码】---执行失败
2021-01-29 17:20:00,805 - [test_14NB_modify_authorization_time.py-->line:110] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': -99, 'message': '内部异常', 'content': None}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_14NB_modify_authorization_time.py", line 103, in test_nb_modify_authorization_time
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_14NB_modify_authorization_time.py", line 134, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': -99, 'message': '内部异常', 'content': None}
2021-01-29 17:20:27,152 - [test_14NB_modify_authorization_time.py-->line:113] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-29 17:20:37,494 - [test_14NB_modify_authorization_time.py-->line:107] - ERROR: 用例--【NB授权-修改授权时间-密码】---执行失败
2021-01-29 17:20:37,494 - [test_14NB_modify_authorization_time.py-->line:110] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': -99, 'message': '内部异常', 'content': None}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_14NB_modify_authorization_time.py", line 103, in test_nb_modify_authorization_time
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_14NB_modify_authorization_time.py", line 134, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': -99, 'message': '内部异常', 'content': None}
2021-01-29 17:22:53,179 - [test_18LK_remove_the_door.py-->line:99] - INFO: 用例--【门锁管理-删除门锁】---执行通过
2021-01-29 17:23:18,446 - [test_11NB_delete_all_authorizations.py-->line:83] - ERROR: 用例--【删除全部授权】---执行失败
2021-01-29 17:23:18,446 - [test_11NB_delete_all_authorizations.py-->line:86] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': -1, 'message': '无权限操作', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_11NB_delete_all_authorizations.py", line 79, in test_nb_new_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_11NB_delete_all_authorizations.py", line 98, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': -1, 'message': '无权限操作', 'content': ''}
2021-01-29 17:23:26,362 - [test_17LK_the_new_lock.py-->line:94] - INFO: 用例--【门锁管理-门锁添加】---执行通过
2021-01-29 17:23:35,067 - [test_11NB_delete_all_authorizations.py-->line:90] - INFO: 用例--【删除全部授权】---执行通过
2021-01-29 17:30:40,896 - [test_02NB_new_password.py-->line:90] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-29 17:31:46,052 - [test_09NB_freeze_authorization.py-->line:121] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-01-29 17:32:08,497 - [test_09NB_freeze_authorization.py-->line:121] - INFO: 用例--【NB授权-临时用户新增-IC卡】---执行通过
2021-01-29 17:32:31,002 - [test_09NB_freeze_authorization.py-->line:121] - INFO: 用例--【NB通讯-冻结授权】---执行通过
2021-01-29 17:32:53,498 - [test_09NB_freeze_authorization.py-->line:121] - INFO: 用例--【NB通讯-解冻冻结】---执行通过
2021-01-29 17:33:14,394 - [test_14NB_modify_authorization_time.py-->line:113] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-29 17:33:15,908 - [test_09NB_freeze_authorization.py-->line:121] - INFO: 用例--【NB_删除授权】---执行通过
2021-01-29 17:33:24,731 - [test_14NB_modify_authorization_time.py-->line:107] - ERROR: 用例--【NB授权-修改授权时间-密码】---执行失败
2021-01-29 17:33:24,731 - [test_14NB_modify_authorization_time.py-->line:110] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': -99, 'message': '内部异常', 'content': None}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_14NB_modify_authorization_time.py", line 103, in test_nb_modify_authorization_time
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_14NB_modify_authorization_time.py", line 134, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': -99, 'message': '内部异常', 'content': None}
2021-01-29 17:34:18,267 - [test_14NB_modify_authorization_time.py-->line:113] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-29 17:37:56,766 - [test_14NB_modify_authorization_time.py-->line:107] - ERROR: 用例--【NB授权-修改授权时间-密码】---执行失败
2021-01-29 17:37:56,768 - [test_14NB_modify_authorization_time.py-->line:110] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': -99, 'message': '内部异常', 'content': None}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_14NB_modify_authorization_time.py", line 103, in test_nb_modify_authorization_time
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_14NB_modify_authorization_time.py", line 134, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': -99, 'message': '内部异常', 'content': None}
2021-01-29 17:40:38,166 - [test_14NB_modify_authorization_time.py-->line:113] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-01-29 17:40:48,606 - [test_14NB_modify_authorization_time.py-->line:113] - INFO: 用例--【NB授权-修改授权时间-密码】---执行通过
2021-02-01 14:42:43,081 - [test_01register.py-->line:60] - INFO: 用例--【登录】---执行通过
2021-02-01 14:42:56,578 - [test_02NB_new_password.py-->line:90] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-02-01 14:46:02,045 - [test_01register.py-->line:60] - INFO: 用例--【登录】---执行通过
2021-02-01 14:46:30,069 - [test_02NB_new_password.py-->line:90] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-02-01 14:47:41,192 - [test_02NB_new_password_01.py-->line:88] - INFO: 用例--【NB授权-管理员用户新增-密码】---执行通过
2021-02-01 14:47:41,678 - [test_02NB_new_password_01.py-->line:88] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-02-01 14:47:42,165 - [test_02NB_new_password_01.py-->line:88] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-02-01 14:47:42,637 - [test_02NB_new_password_01.py-->line:84] - ERROR: 用例--【NB授权-劫持用户新增-密码】---执行失败
2021-02-01 14:47:42,638 - [test_02NB_new_password_01.py-->line:85] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_02NB_new_password_01.py", line 80, in test_nb_new_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_02NB_new_password_01.py", line 101, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
2021-02-01 14:47:43,132 - [test_02NB_new_password_01.py-->line:88] - INFO: 用例--【NB授权-管理员新增-IC卡】---执行通过
2021-02-01 14:47:43,613 - [test_02NB_new_password_01.py-->line:88] - INFO: 用例--【NB授权-普通用户新增-IC卡】---执行通过
2021-02-01 14:47:44,101 - [test_02NB_new_password_01.py-->line:88] - INFO: 用例--【NB授权-临时用户新增-IC卡】---执行通过
2021-02-01 14:47:44,576 - [test_02NB_new_password_01.py-->line:88] - INFO: 用例--【NB授权-劫持用户新增-IC卡】---执行通过
2021-02-01 15:58:49,115 - [test_11NB_delete_all_authorizations.py-->line:90] - INFO: 用例--【删除全部授权】---执行通过
2021-02-01 16:20:08,657 - [test_02NB_new_password_01.py-->line:88] - INFO: 用例--【NB授权-管理员用户新增-密码】---执行通过
2021-02-01 16:20:09,124 - [test_02NB_new_password_01.py-->line:88] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-02-01 16:20:10,583 - [test_02NB_new_password_01.py-->line:88] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-02-01 16:20:11,050 - [test_02NB_new_password_01.py-->line:84] - ERROR: 用例--【NB授权-劫持用户新增-密码】---执行失败
2021-02-01 16:20:11,050 - [test_02NB_new_password_01.py-->line:85] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_02NB_new_password_01.py", line 80, in test_nb_new_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_02NB_new_password_01.py", line 101, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
2021-02-01 16:20:11,525 - [test_02NB_new_password_01.py-->line:88] - INFO: 用例--【NB授权-管理员新增-IC卡】---执行通过
2021-02-01 16:20:12,010 - [test_02NB_new_password_01.py-->line:88] - INFO: 用例--【NB授权-普通用户新增-IC卡】---执行通过
2021-02-01 16:20:12,467 - [test_02NB_new_password_01.py-->line:88] - INFO: 用例--【NB授权-临时用户新增-IC卡】---执行通过
2021-02-01 16:20:12,926 - [test_02NB_new_password_01.py-->line:88] - INFO: 用例--【NB授权-劫持用户新增-IC卡】---执行通过
2021-02-01 16:25:14,631 - [test_02NB_new_password_02.py-->line:118] - INFO: 用例--【NB授权-管理员新增-指纹】---执行通过
2021-02-01 16:25:15,132 - [test_02NB_new_password_02.py-->line:118] - INFO: 用例--【NB授权-普通用户新增-指纹】---执行通过
2021-02-01 16:25:15,487 - [test_02NB_new_password_02.py-->line:118] - INFO: 用例--【NB授权-临时用户新增-指纹】---执行通过
2021-02-01 16:25:15,850 - [test_02NB_new_password_02.py-->line:118] - INFO: 用例--【NB授权-劫持用户新增-指纹】---执行通过
2021-02-01 16:26:24,986 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权_普通用户_时间过期】---执行通过
2021-02-01 16:26:25,448 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权_普通用户_有效次数】---执行通过
2021-02-01 16:26:25,907 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权_临时用户_时间过期】---执行通过
2021-02-01 16:26:26,375 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权_临时用户_有效次数】---执行通过
2021-02-01 16:26:26,850 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权-临时用户-待生效】---执行通过
2021-02-01 16:26:27,317 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权-临时用户-有效次数-有效次数使用不能再次使用】---执行通过
2021-02-01 16:26:27,804 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权-普通用户-有效次数-有效次数使用不能再次使用】---执行通过
2021-02-01 16:32:08,609 - [test_11NB_delete_all_authorizations.py-->line:90] - INFO: 用例--【删除全部授权】---执行通过
2021-02-01 16:33:06,890 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权_普通用户_时间过期】---执行通过
2021-02-01 16:33:07,391 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权_普通用户_有效次数】---执行通过
2021-02-01 16:33:07,871 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权_临时用户_时间过期】---执行通过
2021-02-01 16:33:08,360 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权_临时用户_有效次数】---执行通过
2021-02-01 16:33:08,851 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权-临时用户-待生效】---执行通过
2021-02-01 16:33:09,337 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权-临时用户-有效次数-有效次数使用不能再次使用】---执行通过
2021-02-01 16:33:09,838 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权-普通用户-有效次数-有效次数使用不能再次使用】---执行通过
2021-02-01 16:46:58,810 - [test_11NB_delete_all_authorizations.py-->line:90] - INFO: 用例--【删除全部授权】---执行通过
2021-02-01 16:47:46,114 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权_普通用户_时间过期】---执行通过
2021-02-01 16:47:46,650 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权_普通用户_有效次数】---执行通过
2021-02-01 16:47:47,113 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权_临时用户_时间过期】---执行通过
2021-02-01 16:47:47,608 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权_临时用户_有效次数】---执行通过
2021-02-01 16:47:48,079 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权-临时用户-待生效】---执行通过
2021-02-01 16:47:48,579 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权-临时用户-有效次数-有效次数使用不能再次使用】---执行通过
2021-02-01 16:47:49,067 - [test_02NB_new_password_03.py-->line:118] - INFO: 用例--【NB授权-普通用户-有效次数-有效次数使用不能再次使用】---执行通过
2021-02-01 16:57:54,664 - [test_02NB_new_password_04.py-->line:119] - INFO: 用例--【NB授权-普通用户新增-IC本地录入】---执行通过
2021-02-01 16:57:54,666 - [test_02NB_new_password_04.py-->line:133] - INFO: 用例--【NB授权-普通用户新增-指纹本地录入】---无需执行
2021-02-01 16:57:55,172 - [test_02NB_new_password_04.py-->line:119] - INFO: 用例--【NB授权-临时用户新增-IC本地录入】---执行通过
2021-02-01 16:57:55,172 - [test_02NB_new_password_04.py-->line:133] - INFO: 用例--【NB授权-临时用户新增-指纹本地录入】---无需执行
2021-02-01 16:57:55,776 - [test_02NB_new_password_04.py-->line:119] - INFO: 用例--【NB授权-普通用户新增-身份证本地录入】---执行通过
2021-02-01 16:57:56,252 - [test_02NB_new_password_04.py-->line:119] - INFO: 用例--【NB授权-普通用户新增-非身份证本地校验】---执行通过
2021-02-01 17:06:27,197 - [test_02NB_new_password_04.py-->line:88] - INFO: 用例--【NB授权-普通用户新增-IC本地录入】---执行通过
2021-02-01 17:06:27,200 - [test_02NB_new_password_04.py-->line:103] - INFO: 用例--【NB授权-普通用户新增-指纹本地录入】---无需执行
2021-02-01 17:06:27,700 - [test_02NB_new_password_04.py-->line:88] - INFO: 用例--【NB授权-临时用户新增-IC本地录入】---执行通过
2021-02-01 17:06:27,701 - [test_02NB_new_password_04.py-->line:103] - INFO: 用例--【NB授权-临时用户新增-指纹本地录入】---无需执行
2021-02-01 17:06:28,182 - [test_02NB_new_password_04.py-->line:88] - INFO: 用例--【NB授权-普通用户新增-身份证本地录入】---执行通过
2021-02-01 17:06:28,655 - [test_02NB_new_password_04.py-->line:88] - INFO: 用例--【NB授权-普通用户新增-非身份证本地校验】---执行通过
2021-02-01 17:07:02,208 - [test_02NB_new_password_04.py-->line:88] - INFO: 用例--【NB授权-普通用户新增-IC本地录入】---执行通过
2021-02-01 17:07:02,208 - [test_02NB_new_password_04.py-->line:102] - INFO: 用例--【NB授权-普通用户新增-指纹本地录入】---无需执行
2021-02-01 17:07:02,701 - [test_02NB_new_password_04.py-->line:88] - INFO: 用例--【NB授权-临时用户新增-IC本地录入】---执行通过
2021-02-01 17:07:02,701 - [test_02NB_new_password_04.py-->line:102] - INFO: 用例--【NB授权-临时用户新增-指纹本地录入】---无需执行
2021-02-01 17:07:03,293 - [test_02NB_new_password_04.py-->line:88] - INFO: 用例--【NB授权-普通用户新增-身份证本地录入】---执行通过
2021-02-01 17:07:04,212 - [test_02NB_new_password_04.py-->line:88] - INFO: 用例--【NB授权-普通用户新增-非身份证本地校验】---执行通过
2021-02-01 17:11:27,215 - [test_02NB_new_password_04.py-->line:88] - INFO: 用例--【NB授权-普通用户新增-IC本地录入】---执行通过
2021-02-01 17:11:27,216 - [test_02NB_new_password_04.py-->line:101] - INFO: 用例--【NB授权-普通用户新增-指纹本地录入】---无需执行
2021-02-01 17:11:27,737 - [test_02NB_new_password_04.py-->line:88] - INFO: 用例--【NB授权-临时用户新增-IC本地录入】---执行通过
2021-02-01 17:11:27,738 - [test_02NB_new_password_04.py-->line:101] - INFO: 用例--【NB授权-临时用户新增-指纹本地录入】---无需执行
2021-02-01 17:11:28,222 - [test_02NB_new_password_04.py-->line:88] - INFO: 用例--【NB授权-普通用户新增-身份证本地录入】---执行通过
2021-02-01 17:11:28,724 - [test_02NB_new_password_04.py-->line:88] - INFO: 用例--【NB授权-普通用户新增-非身份证本地校验】---执行通过
2021-02-01 17:12:13,640 - [test_02NB_new_password_04.py-->line:88] - INFO: 用例--【NB授权-普通用户新增-IC本地录入】---执行通过
2021-02-01 17:12:13,642 - [test_02NB_new_password_04.py-->line:102] - INFO: 用例--【NB授权-普通用户新增-指纹本地录入】---无需执行
2021-02-01 17:12:14,134 - [test_02NB_new_password_04.py-->line:88] - INFO: 用例--【NB授权-临时用户新增-IC本地录入】---执行通过
2021-02-01 17:12:14,135 - [test_02NB_new_password_04.py-->line:102] - INFO: 用例--【NB授权-临时用户新增-指纹本地录入】---无需执行
2021-02-01 17:12:14,623 - [test_02NB_new_password_04.py-->line:88] - INFO: 用例--【NB授权-普通用户新增-身份证本地录入】---执行通过
2021-02-01 17:12:15,109 - [test_02NB_new_password_04.py-->line:88] - INFO: 用例--【NB授权-普通用户新增-非身份证本地校验】---执行通过
2021-02-01 17:13:42,270 - [test_02NB_new_password_04.py-->line:87] - INFO: 用例--【NB授权-普通用户新增-IC本地录入】---执行通过
2021-02-01 17:14:02,772 - [test_02NB_new_password_04.py-->line:87] - INFO: 用例--【NB授权-普通用户新增-IC本地录入】---执行通过
2021-02-01 17:14:02,776 - [test_02NB_new_password_04.py-->line:100] - INFO: 用例--【NB授权-普通用户新增-指纹本地录入】---无需执行
2021-02-01 17:14:03,303 - [test_02NB_new_password_04.py-->line:87] - INFO: 用例--【NB授权-临时用户新增-IC本地录入】---执行通过
2021-02-01 17:14:03,306 - [test_02NB_new_password_04.py-->line:100] - INFO: 用例--【NB授权-临时用户新增-指纹本地录入】---无需执行
2021-02-01 17:14:03,815 - [test_02NB_new_password_04.py-->line:87] - INFO: 用例--【NB授权-普通用户新增-身份证本地录入】---执行通过
2021-02-01 17:14:04,332 - [test_02NB_new_password_04.py-->line:87] - INFO: 用例--【NB授权-普通用户新增-非身份证本地校验】---执行通过
2021-02-01 17:15:11,775 - [test_02NB_new_password_04.py-->line:87] - INFO: 用例--【NB授权-普通用户新增-IC本地录入】---执行通过
2021-02-01 17:15:11,792 - [test_02NB_new_password_04.py-->line:101] - INFO: 用例--【NB授权-普通用户新增-指纹本地录入】---无需执行
2021-02-01 17:15:12,309 - [test_02NB_new_password_04.py-->line:87] - INFO: 用例--【NB授权-临时用户新增-IC本地录入】---执行通过
2021-02-01 17:15:12,314 - [test_02NB_new_password_04.py-->line:101] - INFO: 用例--【NB授权-临时用户新增-指纹本地录入】---无需执行
2021-02-01 17:15:12,833 - [test_02NB_new_password_04.py-->line:87] - INFO: 用例--【NB授权-普通用户新增-身份证本地录入】---执行通过
2021-02-01 17:15:13,354 - [test_02NB_new_password_04.py-->line:87] - INFO: 用例--【NB授权-普通用户新增-非身份证本地校验】---执行通过
2021-02-01 17:16:00,014 - [test_02NB_new_password_04.py-->line:87] - INFO: 用例--【NB授权-普通用户新增-IC本地录入】---执行通过
2021-02-01 17:16:22,016 - [test_02NB_new_password_04.py-->line:100] - INFO: 用例--【NB授权-普通用户新增-指纹本地录入】---无需执行
2021-02-01 17:16:22,544 - [test_02NB_new_password_04.py-->line:87] - INFO: 用例--【NB授权-临时用户新增-IC本地录入】---执行通过
2021-02-01 17:16:44,545 - [test_02NB_new_password_04.py-->line:100] - INFO: 用例--【NB授权-临时用户新增-指纹本地录入】---无需执行
2021-02-01 17:16:45,042 - [test_02NB_new_password_04.py-->line:87] - INFO: 用例--【NB授权-普通用户新增-身份证本地录入】---执行通过
2021-02-01 17:17:07,543 - [test_02NB_new_password_04.py-->line:87] - INFO: 用例--【NB授权-普通用户新增-非身份证本地校验】---执行通过
2021-02-01 17:20:09,936 - [test_11NB_delete_all_authorizations.py-->line:90] - INFO: 用例--【删除全部授权】---执行通过
2021-02-01 17:23:05,580 - [test_02NB_new_password_04.py-->line:87] - INFO: 用例--【NB授权-普通用户新增-IC本地录入】---执行通过
2021-02-01 17:23:27,582 - [test_02NB_new_password_04.py-->line:99] - INFO: 用例--【NB授权-普通用户新增-指纹本地录入】---无需执行
2021-02-01 17:23:28,033 - [test_02NB_new_password_04.py-->line:87] - INFO: 用例--【NB授权-临时用户新增-IC本地录入】---执行通过
2021-02-01 17:23:50,036 - [test_02NB_new_password_04.py-->line:99] - INFO: 用例--【NB授权-临时用户新增-指纹本地录入】---无需执行
2021-02-01 17:23:50,482 - [test_02NB_new_password_04.py-->line:87] - INFO: 用例--【NB授权-普通用户新增-身份证本地录入】---执行通过
2021-02-01 17:24:12,942 - [test_02NB_new_password_04.py-->line:87] - INFO: 用例--【NB授权-普通用户新增-非身份证本地校验】---执行通过
2021-02-01 17:25:16,788 - [test_11NB_delete_all_authorizations.py-->line:90] - INFO: 用例--【删除全部授权】---执行通过
2021-02-01 17:26:45,453 - [test_02NB_new_password_04.py-->line:87] - INFO: 用例--【NB授权-普通用户新增-IC本地录入】---执行通过
2021-02-01 17:27:07,456 - [test_02NB_new_password_04.py-->line:99] - INFO: 用例--【NB授权-普通用户新增-指纹本地录入】---无需执行
2021-02-01 17:27:07,948 - [test_02NB_new_password_04.py-->line:87] - INFO: 用例--【NB授权-临时用户新增-IC本地录入】---执行通过
2021-02-01 17:27:29,951 - [test_02NB_new_password_04.py-->line:99] - INFO: 用例--【NB授权-临时用户新增-指纹本地录入】---无需执行
2021-02-01 17:27:30,445 - [test_02NB_new_password_04.py-->line:87] - INFO: 用例--【NB授权-普通用户新增-身份证本地录入】---执行通过
2021-02-01 17:27:52,929 - [test_02NB_new_password_04.py-->line:87] - INFO: 用例--【NB授权-普通用户新增-非身份证本地校验】---执行通过
2021-02-01 17:31:32,181 - [test_11NB_delete_all_authorizations.py-->line:90] - INFO: 用例--【删除全部授权】---执行通过
2021-02-01 17:32:16,732 - [test_02NB_new_password_04.py-->line:87] - INFO: 用例--【NB授权-普通用户新增-IC本地录入】---执行通过
2021-02-01 17:32:38,734 - [test_02NB_new_password_04.py-->line:99] - INFO: 用例--【NB授权-普通用户新增-指纹本地录入】---无需执行
2021-02-01 17:32:39,209 - [test_02NB_new_password_04.py-->line:87] - INFO: 用例--【NB授权-临时用户新增-IC本地录入】---执行通过
2021-02-01 17:33:01,209 - [test_02NB_new_password_04.py-->line:99] - INFO: 用例--【NB授权-临时用户新增-指纹本地录入】---无需执行
2021-02-01 17:33:01,708 - [test_02NB_new_password_04.py-->line:87] - INFO: 用例--【NB授权-普通用户新增-身份证本地录入】---执行通过
2021-02-01 17:33:24,199 - [test_02NB_new_password_04.py-->line:87] - INFO: 用例--【NB授权-普通用户新增-非身份证本地校验】---执行通过
2021-02-01 17:34:46,181 - [test_11NB_delete_all_authorizations.py-->line:90] - INFO: 用例--【删除全部授权】---执行通过
2021-02-01 17:35:22,977 - [test_02NB_new_password_04.py-->line:87] - INFO: 用例--【NB授权-普通用户新增-IC本地录入】---执行通过
2021-02-01 17:35:24,615 - [test_02NB_new_password_04.py-->line:87] - INFO: 用例--【NB授权-普通用户新增-IC本地录入】---执行通过
2021-02-01 17:35:46,616 - [test_02NB_new_password_04.py-->line:99] - INFO: 用例--【NB授权-普通用户新增-指纹本地录入】---无需执行
2021-02-01 17:35:47,837 - [test_02NB_new_password_04.py-->line:87] - INFO: 用例--【NB授权-临时用户新增-IC本地录入】---执行通过
2021-02-01 17:36:09,838 - [test_02NB_new_password_04.py-->line:99] - INFO: 用例--【NB授权-临时用户新增-指纹本地录入】---无需执行
2021-02-01 17:36:10,322 - [test_02NB_new_password_04.py-->line:87] - INFO: 用例--【NB授权-普通用户新增-身份证本地录入】---执行通过
2021-02-01 17:36:32,810 - [test_02NB_new_password_04.py-->line:87] - INFO: 用例--【NB授权-普通用户新增-非身份证本地校验】---执行通过
2021-02-01 17:37:03,781 - [test_11NB_delete_all_authorizations.py-->line:90] - INFO: 用例--【删除全部授权】---执行通过
2021-02-01 17:52:08,268 - [test_02NB_new_password_04.py-->line:87] - INFO: 用例--【NB授权-普通用户新增-IC本地录入】---执行通过
2021-02-01 17:52:30,271 - [test_02NB_new_password_04.py-->line:99] - INFO: 用例--【NB授权-普通用户新增-指纹本地录入】---无需执行
2021-02-01 17:52:30,753 - [test_02NB_new_password_04.py-->line:87] - INFO: 用例--【NB授权-临时用户新增-IC本地录入】---执行通过
2021-02-01 17:52:52,754 - [test_02NB_new_password_04.py-->line:99] - INFO: 用例--【NB授权-临时用户新增-指纹本地录入】---无需执行
2021-02-01 17:52:53,222 - [test_02NB_new_password_04.py-->line:87] - INFO: 用例--【NB授权-普通用户新增-身份证本地录入】---执行通过
2021-02-01 17:53:15,701 - [test_02NB_new_password_04.py-->line:87] - INFO: 用例--【NB授权-普通用户新增-非身份证本地校验】---执行通过
2021-02-01 18:13:22,914 - [test_03NB_update_password.py-->line:132] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-02-01 18:13:44,986 - [test_03NB_update_password.py-->line:125] - ERROR: 用例--【NB授权-修改临时用户密码-密码】---执行失败
2021-02-01 18:13:44,987 - [test_03NB_update_password.py-->line:128] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '门锁用户不存在', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_03NB_update_password.py", line 121, in test_nb_update_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_03NB_update_password.py", line 143, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '门锁用户不存在', 'content': ''}
2021-02-01 18:18:21,619 - [test_18LK_remove_the_door.py-->line:99] - INFO: 用例--【门锁管理-删除门锁】---执行通过
2021-02-01 18:18:30,843 - [test_17LK_the_new_lock.py-->line:94] - INFO: 用例--【门锁管理-门锁添加】---执行通过
2021-02-01 18:18:36,741 - [test_16LK_a_single_query.py-->line:100] - INFO: 用例--【门锁管理-单条查询】---执行通过
2021-02-01 18:18:48,333 - [test_18LK_remove_the_door.py-->line:99] - INFO: 用例--【门锁管理-删除门锁】---执行通过
2021-02-01 18:18:56,285 - [test_17LK_the_new_lock.py-->line:94] - INFO: 用例--【门锁管理-门锁添加】---执行通过
2021-02-01 18:19:17,326 - [test_17LK_the_new_lock.py-->line:86] - ERROR: 用例--【门锁管理-门锁添加】---执行失败
2021-02-01 18:19:17,326 - [test_17LK_the_new_lock.py-->line:89] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 2010115, 'message': 'IMEI号已存在', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_17LK_the_new_lock.py", line 82, in test_lk_remove_the_door
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_17LK_the_new_lock.py", line 102, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 2010115, 'message': 'IMEI号已存在', 'content': ''}
2021-02-01 18:19:26,078 - [test_18LK_remove_the_door.py-->line:99] - INFO: 用例--【门锁管理-删除门锁】---执行通过
2021-02-01 18:19:32,262 - [test_17LK_the_new_lock.py-->line:93] - INFO: 用例--【门锁管理-门锁添加】---执行通过
2021-02-01 18:22:59,705 - [test_16LK_a_single_query.py-->line:100] - INFO: 用例--【门锁管理-单条查询】---执行通过
2021-02-01 18:27:04,111 - [test_16LK_a_single_query.py-->line:89] - INFO: 用例--【门锁管理-单条查询】---执行通过
2021-02-01 18:27:56,025 - [test_16LK_a_single_query.py-->line:88] - INFO: 用例--【门锁管理-单条查询】---执行通过
2021-02-01 18:28:47,218 - [test_16LK_a_single_query.py-->line:88] - INFO: 用例--【门锁管理-单条查询】---执行通过
2021-02-01 18:29:05,749 - [test_15LK_paging_list.py-->line:88] - INFO: 用例--【门锁管理-分页列表】---执行通过
2021-02-01 18:31:03,448 - [test_14NB_modify_authorization_time.py-->line:107] - ERROR: 用例--【NB授权-修改授权时间-密码】---执行失败
2021-02-01 18:31:03,449 - [test_14NB_modify_authorization_time.py-->line:110] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '门锁用户不存在', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_14NB_modify_authorization_time.py", line 103, in test_nb_modify_authorization_time
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_14NB_modify_authorization_time.py", line 134, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '门锁用户不存在', 'content': ''}
2021-02-02 14:22:17,747 - [test_01register.py-->line:60] - INFO: 用例--【登录】---执行通过
2021-02-02 14:22:30,396 - [test_02NB_new_password.py-->line:90] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-02-02 14:23:16,084 - [test_02NB_new_password_01.py-->line:88] - INFO: 用例--【NB授权-管理员用户新增-密码】---执行通过
2021-02-02 14:23:17,521 - [test_02NB_new_password_01.py-->line:88] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-02-02 14:23:19,287 - [test_02NB_new_password_01.py-->line:88] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-02-02 14:23:19,866 - [test_02NB_new_password_01.py-->line:84] - ERROR: 用例--【NB授权-劫持用户新增-密码】---执行失败
2021-02-02 14:23:19,867 - [test_02NB_new_password_01.py-->line:85] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_02NB_new_password_01.py", line 80, in test_nb_new_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_02NB_new_password_01.py", line 101, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
2021-02-02 14:23:20,556 - [test_02NB_new_password_01.py-->line:88] - INFO: 用例--【NB授权-管理员新增-IC卡】---执行通过
2021-02-02 14:23:21,046 - [test_02NB_new_password_01.py-->line:88] - INFO: 用例--【NB授权-普通用户新增-IC卡】---执行通过
2021-02-02 14:23:21,572 - [test_02NB_new_password_01.py-->line:88] - INFO: 用例--【NB授权-临时用户新增-IC卡】---执行通过
2021-02-02 14:23:22,061 - [test_02NB_new_password_01.py-->line:88] - INFO: 用例--【NB授权-劫持用户新增-IC卡】---执行通过
2021-02-02 14:31:52,835 - [test_02NB_new_password_02.py-->line:120] - INFO: 用例--【NB授权-管理员新增-指纹】---无需执行
2021-02-02 14:31:52,836 - [test_02NB_new_password_02.py-->line:120] - INFO: 用例--【NB授权-普通用户新增-指纹】---无需执行
2021-02-02 14:31:52,837 - [test_02NB_new_password_02.py-->line:120] - INFO: 用例--【NB授权-临时用户新增-指纹】---无需执行
2021-02-02 14:31:52,839 - [test_02NB_new_password_02.py-->line:120] - INFO: 用例--【NB授权-劫持用户新增-指纹】---无需执行
2021-02-02 14:32:40,888 - [test_02NB_new_password_02.py-->line:118] - INFO: 用例--【NB授权-管理员新增-指纹】---执行通过
2021-02-02 14:32:41,416 - [test_02NB_new_password_02.py-->line:118] - INFO: 用例--【NB授权-普通用户新增-指纹】---执行通过
2021-02-02 14:32:41,887 - [test_02NB_new_password_02.py-->line:118] - INFO: 用例--【NB授权-临时用户新增-指纹】---执行通过
2021-02-02 14:32:42,485 - [test_02NB_new_password_02.py-->line:118] - INFO: 用例--【NB授权-劫持用户新增-指纹】---执行通过
2021-02-02 14:38:24,712 - [test_11NB_delete_all_authorizations.py-->line:90] - INFO: 用例--【删除全部授权】---执行通过
2021-02-02 18:08:16,209 - [test_02NB_new_password.py-->line:90] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-02-02 18:18:47,902 - [test_03NB_update_password.py-->line:96] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-02-02 18:20:48,349 - [test_03NB_update_password.py-->line:97] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-02-02 18:21:10,442 - [test_03NB_update_password.py-->line:91] - ERROR: 用例--【NB授权-修改临时用户密码-密码】---执行失败
2021-02-02 18:21:10,442 - [test_03NB_update_password.py-->line:94] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '门锁用户不存在', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_03NB_update_password.py", line 87, in test_nb_update_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_03NB_update_password.py", line 119, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '门锁用户不存在', 'content': ''}
2021-02-02 18:25:34,809 - [test_11NB_delete_all_authorizations.py-->line:90] - INFO: 用例--【删除全部授权】---执行通过
2021-02-02 18:26:17,193 - [test_03NB_update_password.py-->line:97] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-02-02 18:26:27,292 - [test_03NB_update_password.py-->line:91] - ERROR: 用例--【NB授权-修改临时用户密码-密码】---执行失败
2021-02-02 18:26:27,292 - [test_03NB_update_password.py-->line:94] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '门锁用户不存在', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_03NB_update_password.py", line 87, in test_nb_update_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_03NB_update_password.py", line 119, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '门锁用户不存在', 'content': ''}
2021-02-02 18:27:07,758 - [test_03NB_update_password.py-->line:98] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-02-02 18:27:17,848 - [test_03NB_update_password.py-->line:92] - ERROR: 用例--【NB授权-修改临时用户密码-密码】---执行失败
2021-02-02 18:27:17,849 - [test_03NB_update_password.py-->line:95] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '门锁用户不存在', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_03NB_update_password.py", line 88, in test_nb_update_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_03NB_update_password.py", line 120, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '门锁用户不存在', 'content': ''}
2021-02-02 18:28:37,477 - [test_03NB_update_password.py-->line:98] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-02-02 18:28:38,565 - [test_03NB_update_password.py-->line:92] - ERROR: 用例--【NB授权-修改临时用户密码-密码】---执行失败
2021-02-02 18:28:38,566 - [test_03NB_update_password.py-->line:95] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '门锁用户不存在', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_03NB_update_password.py", line 88, in test_nb_update_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_03NB_update_password.py", line 120, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '门锁用户不存在', 'content': ''}
2021-02-02 18:30:38,558 - [test_03NB_update_password.py-->line:98] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-02-02 18:30:39,632 - [test_03NB_update_password.py-->line:92] - ERROR: 用例--【NB授权-修改临时用户密码-密码】---执行失败
2021-02-02 18:30:39,632 - [test_03NB_update_password.py-->line:95] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '门锁用户不存在', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_03NB_update_password.py", line 88, in test_nb_update_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_03NB_update_password.py", line 120, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '门锁用户不存在', 'content': ''}
2021-02-02 18:32:15,537 - [test_03NB_update_password.py-->line:99] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-02-02 18:32:54,546 - [test_03NB_update_password.py-->line:99] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-02-02 18:32:55,865 - [test_03NB_update_password.py-->line:93] - ERROR: 用例--【NB授权-修改临时用户密码-密码】---执行失败
2021-02-02 18:32:55,865 - [test_03NB_update_password.py-->line:96] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': -99, 'message': '内部异常', 'content': None}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_03NB_update_password.py", line 89, in test_nb_update_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_03NB_update_password.py", line 121, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': -99, 'message': '内部异常', 'content': None}
2021-02-02 18:36:52,632 - [test_03NB_update_password.py-->line:99] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-02-02 18:36:53,930 - [test_03NB_update_password.py-->line:93] - ERROR: 用例--【NB授权-修改临时用户密码-密码】---执行失败
2021-02-02 18:36:53,930 - [test_03NB_update_password.py-->line:96] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': -99, 'message': '内部异常', 'content': None}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_03NB_update_password.py", line 89, in test_nb_update_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_03NB_update_password.py", line 121, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': -99, 'message': '内部异常', 'content': None}
2021-02-02 18:38:11,842 - [test_03NB_update_password.py-->line:102] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-02-02 18:38:13,153 - [test_03NB_update_password.py-->line:96] - ERROR: 用例--【NB授权-修改临时用户密码-密码】---执行失败
2021-02-02 18:38:13,153 - [test_03NB_update_password.py-->line:99] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': -99, 'message': '内部异常', 'content': None}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_03NB_update_password.py", line 92, in test_nb_update_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_03NB_update_password.py", line 124, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': -99, 'message': '内部异常', 'content': None}
2021-02-02 18:39:06,606 - [test_03NB_update_password.py-->line:103] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-02-02 18:39:07,686 - [test_03NB_update_password.py-->line:97] - ERROR: 用例--【NB授权-修改临时用户密码-密码】---执行失败
2021-02-02 18:39:07,687 - [test_03NB_update_password.py-->line:100] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '门锁用户不存在', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_03NB_update_password.py", line 93, in test_nb_update_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_03NB_update_password.py", line 125, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '门锁用户不存在', 'content': ''}
2021-02-02 18:39:58,586 - [test_03NB_update_password.py-->line:103] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-02-02 18:39:59,659 - [test_03NB_update_password.py-->line:97] - ERROR: 用例--【NB授权-修改临时用户密码-密码】---执行失败
2021-02-02 18:39:59,660 - [test_03NB_update_password.py-->line:100] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '门锁用户不存在', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_03NB_update_password.py", line 93, in test_nb_update_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_03NB_update_password.py", line 125, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 206, 'message': '门锁用户不存在', 'content': ''}
2021-02-02 18:42:03,715 - [test_03NB_update_password.py-->line:103] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-02-02 18:44:31,927 - [test_03NB_update_password.py-->line:103] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-02-02 18:44:33,336 - [test_03NB_update_password.py-->line:97] - ERROR: 用例--【NB授权-修改临时用户密码-密码】---执行失败
2021-02-02 18:44:33,336 - [test_03NB_update_password.py-->line:100] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_03NB_update_password.py", line 93, in test_nb_update_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_03NB_update_password.py", line 125, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
2021-02-02 18:46:22,930 - [test_03NB_update_password.py-->line:103] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-02-02 18:46:43,352 - [test_03NB_update_password.py-->line:97] - ERROR: 用例--【NB授权-修改临时用户密码-密码】---执行失败
2021-02-02 18:46:43,353 - [test_03NB_update_password.py-->line:100] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_03NB_update_password.py", line 93, in test_nb_update_password
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_03NB_update_password.py", line 125, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
2021-02-02 18:51:10,516 - [test_05NB_delete_the_authorized_01.py-->line:104] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-02-02 18:51:30,942 - [test_05NB_delete_the_authorized_01.py-->line:98] - ERROR: 用例--【NB授权-修改临时用户密码-密码】---执行失败
2021-02-02 18:51:30,942 - [test_05NB_delete_the_authorized_01.py-->line:101] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
Traceback (most recent call last):
  File "E:\86-code\suoguan\testcases\test_05NB_delete_the_authorized_01.py", line 94, in test_nb_delete_the_authorized
    self.assertDictIn(expected, res)
  File "E:\86-code\suoguan\testcases\test_05NB_delete_the_authorized_01.py", line 122, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
2021-02-02 18:51:54,189 - [test_05NB_delete_the_authorized_01.py-->line:104] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-02-02 18:52:14,617 - [test_05NB_delete_the_authorized_01.py-->line:104] - INFO: 用例--【NB_删除授权】---执行通过
2021-02-02 18:52:35,079 - [test_05NB_delete_the_authorized_01.py-->line:104] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-02-02 18:52:55,469 - [test_05NB_delete_the_authorized_01.py-->line:104] - INFO: 用例--【NB_删除授权】---执行通过
2021-02-02 18:53:16,152 - [test_05NB_delete_the_authorized_01.py-->line:104] - INFO: 用例--【NB授权-管理用户新增-密码】---执行通过
2021-02-02 18:53:36,547 - [test_05NB_delete_the_authorized_01.py-->line:104] - INFO: 用例--【NB_删除授权】---执行通过
2021-02-02 19:01:18,696 - [test_05NB_delete_the_authorized_01.py-->line:104] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-02-02 19:01:37,375 - [test_05NB_delete_the_authorized_01.py-->line:104] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-02-02 19:01:38,771 - [test_05NB_delete_the_authorized_01.py-->line:104] - INFO: 用例--【NB_删除授权】---执行通过
2021-02-02 19:01:40,239 - [test_05NB_delete_the_authorized_01.py-->line:104] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-02-02 19:01:41,643 - [test_05NB_delete_the_authorized_01.py-->line:104] - INFO: 用例--【NB_删除授权】---执行通过
2021-02-02 19:01:43,133 - [test_05NB_delete_the_authorized_01.py-->line:104] - INFO: 用例--【NB授权-管理用户新增-密码】---执行通过
2021-02-02 19:01:44,526 - [test_05NB_delete_the_authorized_01.py-->line:104] - INFO: 用例--【NB_删除授权】---执行通过
2021-02-02 19:06:07,191 - [test_05NB_delete_the_authorized_01.py-->line:102] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-02-02 19:06:08,562 - [test_05NB_delete_the_authorized_01.py-->line:102] - INFO: 用例--【NB_删除授权】---执行通过
2021-02-02 19:06:10,033 - [test_05NB_delete_the_authorized_01.py-->line:102] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-02-02 19:06:11,413 - [test_05NB_delete_the_authorized_01.py-->line:102] - INFO: 用例--【NB_删除授权】---执行通过
2021-02-02 19:06:12,851 - [test_05NB_delete_the_authorized_01.py-->line:102] - INFO: 用例--【NB授权-管理用户新增-密码】---执行通过
2021-02-02 19:06:14,236 - [test_05NB_delete_the_authorized_01.py-->line:102] - INFO: 用例--【NB_删除授权】---执行通过
2021-02-02 19:08:44,405 - [test_05NB_delete_the_authorized_01.py-->line:100] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-02-02 19:08:45,843 - [test_05NB_delete_the_authorized_01.py-->line:100] - INFO: 用例--【NB_删除授权】---执行通过
2021-02-02 19:08:47,536 - [test_05NB_delete_the_authorized_01.py-->line:100] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-02-02 19:08:48,910 - [test_05NB_delete_the_authorized_01.py-->line:100] - INFO: 用例--【NB_删除授权】---执行通过
2021-02-02 19:08:50,387 - [test_05NB_delete_the_authorized_01.py-->line:100] - INFO: 用例--【NB授权-管理用户新增-密码】---执行通过
2021-02-02 19:08:51,785 - [test_05NB_delete_the_authorized_01.py-->line:100] - INFO: 用例--【NB_删除授权】---执行通过
2021-02-02 19:09:09,688 - [test_11NB_delete_all_authorizations.py-->line:90] - INFO: 用例--【删除全部授权】---执行通过
2021-02-02 19:11:16,939 - [test_05NB_delete_the_authorized_01.py-->line:100] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-02-02 19:11:48,896 - [test_05NB_delete_the_authorized_01.py-->line:100] - INFO: 用例--【NB_删除授权】---执行通过
2021-02-02 19:12:19,366 - [test_05NB_delete_the_authorized_01.py-->line:100] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-02-02 19:12:49,734 - [test_05NB_delete_the_authorized_01.py-->line:100] - INFO: 用例--【NB_删除授权】---执行通过
2021-02-02 19:13:20,214 - [test_05NB_delete_the_authorized_01.py-->line:100] - INFO: 用例--【NB授权-管理用户新增-密码】---执行通过
2021-02-02 19:13:50,629 - [test_05NB_delete_the_authorized_01.py-->line:100] - INFO: 用例--【NB_删除授权】---执行通过
2021-02-02 19:18:13,281 - [test_05NB_delete_the_authorized_02.py-->line:100] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-02-02 19:18:53,747 - [test_05NB_delete_the_authorized_02.py-->line:100] - INFO: 用例--【NB授权-临时用户新增-IC卡】---执行通过
2021-02-02 19:19:34,122 - [test_05NB_delete_the_authorized_02.py-->line:100] - INFO: 用例--【NB_删除授权】---执行通过
2021-02-02 20:38:52,789 - [test_05NB_delete_the_authorized_01.py-->line:100] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-02-02 20:39:13,446 - [test_05NB_delete_the_authorized_01.py-->line:100] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-02-02 20:39:14,832 - [test_05NB_delete_the_authorized_01.py-->line:100] - INFO: 用例--【NB_删除授权】---执行通过
2021-02-02 20:39:16,316 - [test_05NB_delete_the_authorized_01.py-->line:100] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-02-02 20:39:17,705 - [test_05NB_delete_the_authorized_01.py-->line:100] - INFO: 用例--【NB_删除授权】---执行通过
2021-02-02 20:39:19,182 - [test_05NB_delete_the_authorized_01.py-->line:100] - INFO: 用例--【NB授权-管理用户新增-密码】---执行通过
2021-02-02 20:39:20,550 - [test_05NB_delete_the_authorized_01.py-->line:100] - INFO: 用例--【NB_删除授权】---执行通过
2021-02-02 21:27:06,618 - [test_05NB_delete_the_authorized_02.py-->line:100] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-02-02 21:27:26,107 - [test_05NB_delete_the_authorized_02.py-->line:100] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-02-02 21:27:36,566 - [test_05NB_delete_the_authorized_02.py-->line:100] - INFO: 用例--【NB授权-临时用户新增-IC卡】---执行通过
2021-02-02 21:27:46,968 - [test_05NB_delete_the_authorized_02.py-->line:100] - INFO: 用例--【NB_删除授权】---执行通过
2021-02-02 21:33:05,151 - [test_05NB_delete_the_authorized_02.py-->line:100] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-02-02 21:33:15,608 - [test_05NB_delete_the_authorized_02.py-->line:100] - INFO: 用例--【NB授权-临时用户新增-IC卡】---执行通过
2021-02-02 21:33:26,012 - [test_05NB_delete_the_authorized_02.py-->line:100] - INFO: 用例--【NB_删除授权】---执行通过
2021-02-02 21:34:34,215 - [test_06NB_grant_column_list.py-->line:76] - INFO: 用例--【NB_授权列表】---执行通过
2021-02-02 21:39:44,534 - [test_07NB_authorization_list_details.py-->line:103] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-02-02 21:40:06,977 - [test_07NB_authorization_list_details.py-->line:103] - INFO: 用例--【NB授权-临时用户新增-IC卡】---执行通过
2021-02-02 21:40:29,576 - [test_07NB_authorization_list_details.py-->line:103] - INFO: 用例--【NB_删除授权】---执行通过
2021-02-02 21:40:55,469 - [test_07NB_authorization_list_details.py-->line:103] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-02-02 21:41:17,915 - [test_07NB_authorization_list_details.py-->line:103] - INFO: 用例--【NB授权-临时用户新增-IC卡】---执行通过
2021-02-02 21:41:40,130 - [test_07NB_authorization_list_details.py-->line:103] - INFO: 用例--【NB授权-授权列表详情】---执行通过
2021-02-02 21:41:40,525 - [test_07NB_authorization_list_details.py-->line:103] - INFO: 用例--【NB_删除授权】---执行通过
2021-02-02 21:45:44,064 - [test_09NB_freeze_authorization.py-->line:106] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-02-02 21:46:06,520 - [test_09NB_freeze_authorization.py-->line:106] - INFO: 用例--【NB授权-临时用户新增-IC卡】---执行通过
2021-02-02 21:46:29,742 - [test_09NB_freeze_authorization.py-->line:106] - INFO: 用例--【NB通讯-冻结授权】---执行通过
2021-02-02 21:47:05,237 - [test_09NB_freeze_authorization.py-->line:106] - INFO: 用例--【NB通讯-解冻冻结】---执行通过
2021-02-02 21:47:40,600 - [test_09NB_freeze_authorization.py-->line:106] - INFO: 用例--【NB_删除授权】---执行通过
2021-02-02 21:47:59,790 - [test_09NB_freeze_authorization.py-->line:106] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-02-02 21:48:22,206 - [test_09NB_freeze_authorization.py-->line:106] - INFO: 用例--【NB授权-临时用户新增-IC卡】---执行通过
2021-02-02 21:48:44,660 - [test_09NB_freeze_authorization.py-->line:106] - INFO: 用例--【NB通讯-冻结授权】---执行通过
2021-02-02 21:49:20,169 - [test_09NB_freeze_authorization.py-->line:106] - INFO: 用例--【NB通讯-解冻冻结】---执行通过
2021-02-02 21:49:55,546 - [test_09NB_freeze_authorization.py-->line:106] - INFO: 用例--【NB_删除授权】---执行通过
2021-02-02 21:51:46,369 - [test_11NB_delete_all_authorizations.py-->line:90] - INFO: 用例--【删除全部授权】---执行通过
2021-02-02 21:52:16,644 - [test_09NB_freeze_authorization.py-->line:107] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-02-02 21:52:39,081 - [test_09NB_freeze_authorization.py-->line:107] - INFO: 用例--【NB授权-临时用户新增-IC卡】---执行通过
2021-02-02 21:53:01,561 - [test_09NB_freeze_authorization.py-->line:107] - INFO: 用例--【NB通讯-冻结授权】---执行通过
2021-02-02 21:53:37,020 - [test_09NB_freeze_authorization.py-->line:107] - INFO: 用例--【NB通讯-解冻冻结】---执行通过
2021-02-02 21:54:12,385 - [test_09NB_freeze_authorization.py-->line:107] - INFO: 用例--【NB_删除授权】---执行通过
2021-02-02 21:55:27,901 - [test_12NB_freezing_locks.py-->line:98] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-02-02 21:55:50,342 - [test_12NB_freezing_locks.py-->line:98] - INFO: 用例--【NB通讯-冻结门锁】---执行通过
2021-02-02 21:56:12,778 - [test_12NB_freezing_locks.py-->line:98] - INFO: 用例--【NB通讯-解冻门锁】---执行通过
2021-02-02 21:58:19,564 - [test_15LK_paging_list.py-->line:85] - INFO: 用例--【门锁管理-分页列表】---执行通过
2021-02-02 22:45:50,902 - [test_01register.py-->line:60] - INFO: 用例--【登录】---执行通过
2021-02-03 08:25:28,178 - [test_02NB_new_password.py-->line:90] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-02-03 08:29:01,707 - [test_02NB_new_password_01.py-->line:88] - INFO: 用例--【NB授权-管理员用户新增-密码】---执行通过
2021-02-03 08:29:02,161 - [test_02NB_new_password_01.py-->line:88] - INFO: 用例--【NB授权-普通用户新增-密码】---执行通过
2021-02-03 08:29:02,616 - [test_02NB_new_password_01.py-->line:88] - INFO: 用例--【NB授权-临时用户新增-密码】---执行通过
2021-02-03 08:29:03,280 - [test_02NB_new_password_01.py-->line:84] - ERROR: 用例--【NB授权-劫持用户新增-密码】---执行失败
2021-02-03 08:29:03,280 - [test_02NB_new_password_01.py-->line:85] - ERROR: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
Traceback (most recent call last):
  File "F:\86-code\suoguan\testcases\test_02NB_new_password_01.py", line 80, in test_nb_new_password
    self.assertDictIn(expected, res)
  File "F:\86-code\suoguan\testcases\test_02NB_new_password_01.py", line 101, in assertDictIn
    raise AssertionError("{} not in {}".format(expected, res))
AssertionError: {'code': 0, 'message': '操作成功。'} not in {'code': 202, 'message': 'aep消息发送失败', 'content': ''}
2021-02-03 08:29:03,766 - [test_02NB_new_password_01.py-->line:88] - INFO: 用例--【NB授权-管理员新增-IC卡】---执行通过
2021-02-03 08:29:04,220 - [test_02NB_new_password_01.py-->line:88] - INFO: 用例--【NB授权-普通用户新增-IC卡】---执行通过
2021-02-03 08:29:04,668 - [test_02NB_new_password_01.py-->line:88] - INFO: 用例--【NB授权-临时用户新增-IC卡】---执行通过
2021-02-03 08:29:05,138 - [test_02NB_new_password_01.py-->line:88] - INFO: 用例--【NB授权-劫持用户新增-IC卡】---执行通过
